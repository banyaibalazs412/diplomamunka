
greenHouseMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800acd8  0800acd8  0001acd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b060  0800b060  0001b060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b06c  0800b06c  0001b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  20000000  0800b070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000328  200001e0  0800b250  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000508  0800b250  00020508  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001be67  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003031  00000000  00000000  0003c077  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001900  00000000  00000000  0003f0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000017b8  00000000  00000000  000409a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000be95  00000000  00000000  00042160  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000079e8  00000000  00000000  0004dff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000559dd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007628  00000000  00000000  00055a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800acc0 	.word	0x0800acc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	0800acc0 	.word	0x0800acc0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b97a 	b.w	8000e80 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	468c      	mov	ip, r1
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	9e08      	ldr	r6, [sp, #32]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d151      	bne.n	8000c58 <__udivmoddi4+0xb4>
 8000bb4:	428a      	cmp	r2, r1
 8000bb6:	4617      	mov	r7, r2
 8000bb8:	d96d      	bls.n	8000c96 <__udivmoddi4+0xf2>
 8000bba:	fab2 fe82 	clz	lr, r2
 8000bbe:	f1be 0f00 	cmp.w	lr, #0
 8000bc2:	d00b      	beq.n	8000bdc <__udivmoddi4+0x38>
 8000bc4:	f1ce 0c20 	rsb	ip, lr, #32
 8000bc8:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bcc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bd0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bd4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000bd8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bdc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000be0:	0c25      	lsrs	r5, r4, #16
 8000be2:	fbbc f8fa 	udiv	r8, ip, sl
 8000be6:	fa1f f987 	uxth.w	r9, r7
 8000bea:	fb0a cc18 	mls	ip, sl, r8, ip
 8000bee:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000bf2:	fb08 f309 	mul.w	r3, r8, r9
 8000bf6:	42ab      	cmp	r3, r5
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x6c>
 8000bfa:	19ed      	adds	r5, r5, r7
 8000bfc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c00:	f080 8123 	bcs.w	8000e4a <__udivmoddi4+0x2a6>
 8000c04:	42ab      	cmp	r3, r5
 8000c06:	f240 8120 	bls.w	8000e4a <__udivmoddi4+0x2a6>
 8000c0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0e:	443d      	add	r5, r7
 8000c10:	1aed      	subs	r5, r5, r3
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c18:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c20:	fb00 f909 	mul.w	r9, r0, r9
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x98>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 810a 	bcs.w	8000e46 <__udivmoddi4+0x2a2>
 8000c32:	45a1      	cmp	r9, r4
 8000c34:	f240 8107 	bls.w	8000e46 <__udivmoddi4+0x2a2>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 0409 	sub.w	r4, r4, r9
 8000c40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c44:	2100      	movs	r1, #0
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d061      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c4a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c4e:	2300      	movs	r3, #0
 8000c50:	6034      	str	r4, [r6, #0]
 8000c52:	6073      	str	r3, [r6, #4]
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xc8>
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d054      	beq.n	8000d0a <__udivmoddi4+0x166>
 8000c60:	2100      	movs	r1, #0
 8000c62:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c66:	4608      	mov	r0, r1
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	fab3 f183 	clz	r1, r3
 8000c70:	2900      	cmp	r1, #0
 8000c72:	f040 808e 	bne.w	8000d92 <__udivmoddi4+0x1ee>
 8000c76:	42ab      	cmp	r3, r5
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xdc>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80fa 	bhi.w	8000e74 <__udivmoddi4+0x2d0>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb65 0503 	sbc.w	r5, r5, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	46ac      	mov	ip, r5
 8000c8a:	2e00      	cmp	r6, #0
 8000c8c:	d03f      	beq.n	8000d0e <__udivmoddi4+0x16a>
 8000c8e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	b912      	cbnz	r2, 8000c9e <__udivmoddi4+0xfa>
 8000c98:	2701      	movs	r7, #1
 8000c9a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000c9e:	fab7 fe87 	clz	lr, r7
 8000ca2:	f1be 0f00 	cmp.w	lr, #0
 8000ca6:	d134      	bne.n	8000d12 <__udivmoddi4+0x16e>
 8000ca8:	1beb      	subs	r3, r5, r7
 8000caa:	0c3a      	lsrs	r2, r7, #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cb6:	0c25      	lsrs	r5, r4, #16
 8000cb8:	fb02 3318 	mls	r3, r2, r8, r3
 8000cbc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cc0:	fb0c f308 	mul.w	r3, ip, r8
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x134>
 8000cc8:	19ed      	adds	r5, r5, r7
 8000cca:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x132>
 8000cd0:	42ab      	cmp	r3, r5
 8000cd2:	f200 80d1 	bhi.w	8000e78 <__udivmoddi4+0x2d4>
 8000cd6:	4680      	mov	r8, r0
 8000cd8:	1aed      	subs	r5, r5, r3
 8000cda:	b2a3      	uxth	r3, r4
 8000cdc:	fbb5 f0f2 	udiv	r0, r5, r2
 8000ce0:	fb02 5510 	mls	r5, r2, r0, r5
 8000ce4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000ce8:	fb0c fc00 	mul.w	ip, ip, r0
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x15c>
 8000cf0:	19e4      	adds	r4, r4, r7
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x15a>
 8000cf8:	45a4      	cmp	ip, r4
 8000cfa:	f200 80b8 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cfe:	4618      	mov	r0, r3
 8000d00:	eba4 040c 	sub.w	r4, r4, ip
 8000d04:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d08:	e79d      	b.n	8000c46 <__udivmoddi4+0xa2>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d12:	f1ce 0420 	rsb	r4, lr, #32
 8000d16:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d1a:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d1e:	fa20 f804 	lsr.w	r8, r0, r4
 8000d22:	0c3a      	lsrs	r2, r7, #16
 8000d24:	fa25 f404 	lsr.w	r4, r5, r4
 8000d28:	ea48 0803 	orr.w	r8, r8, r3
 8000d2c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d30:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d34:	fb02 4411 	mls	r4, r2, r1, r4
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d40:	fb01 f30c 	mul.w	r3, r1, ip
 8000d44:	42ab      	cmp	r3, r5
 8000d46:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x1bc>
 8000d4c:	19ed      	adds	r5, r5, r7
 8000d4e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d52:	f080 808a 	bcs.w	8000e6a <__udivmoddi4+0x2c6>
 8000d56:	42ab      	cmp	r3, r5
 8000d58:	f240 8087 	bls.w	8000e6a <__udivmoddi4+0x2c6>
 8000d5c:	3902      	subs	r1, #2
 8000d5e:	443d      	add	r5, r7
 8000d60:	1aeb      	subs	r3, r5, r3
 8000d62:	fa1f f588 	uxth.w	r5, r8
 8000d66:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d6a:	fb02 3310 	mls	r3, r2, r0, r3
 8000d6e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d72:	fb00 f30c 	mul.w	r3, r0, ip
 8000d76:	42ab      	cmp	r3, r5
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x1e6>
 8000d7a:	19ed      	adds	r5, r5, r7
 8000d7c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d80:	d26f      	bcs.n	8000e62 <__udivmoddi4+0x2be>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d96d      	bls.n	8000e62 <__udivmoddi4+0x2be>
 8000d86:	3802      	subs	r0, #2
 8000d88:	443d      	add	r5, r7
 8000d8a:	1aeb      	subs	r3, r5, r3
 8000d8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d90:	e78f      	b.n	8000cb2 <__udivmoddi4+0x10e>
 8000d92:	f1c1 0720 	rsb	r7, r1, #32
 8000d96:	fa22 f807 	lsr.w	r8, r2, r7
 8000d9a:	408b      	lsls	r3, r1
 8000d9c:	fa05 f401 	lsl.w	r4, r5, r1
 8000da0:	ea48 0303 	orr.w	r3, r8, r3
 8000da4:	fa20 fe07 	lsr.w	lr, r0, r7
 8000da8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dac:	40fd      	lsrs	r5, r7
 8000dae:	ea4e 0e04 	orr.w	lr, lr, r4
 8000db2:	fbb5 f9fc 	udiv	r9, r5, ip
 8000db6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000dba:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dbe:	fa1f f883 	uxth.w	r8, r3
 8000dc2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dc6:	fb09 f408 	mul.w	r4, r9, r8
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	fa02 f201 	lsl.w	r2, r2, r1
 8000dd0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x244>
 8000dd6:	18ed      	adds	r5, r5, r3
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d243      	bcs.n	8000e66 <__udivmoddi4+0x2c2>
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	d941      	bls.n	8000e66 <__udivmoddi4+0x2c2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	441d      	add	r5, r3
 8000de8:	1b2d      	subs	r5, r5, r4
 8000dea:	fa1f fe8e 	uxth.w	lr, lr
 8000dee:	fbb5 f0fc 	udiv	r0, r5, ip
 8000df2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000df6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45a0      	cmp	r8, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x26e>
 8000e02:	18e4      	adds	r4, r4, r3
 8000e04:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e08:	d229      	bcs.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0a:	45a0      	cmp	r8, r4
 8000e0c:	d927      	bls.n	8000e5e <__udivmoddi4+0x2ba>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	441c      	add	r4, r3
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba4 0408 	sub.w	r4, r4, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	464d      	mov	r5, r9
 8000e24:	d315      	bcc.n	8000e52 <__udivmoddi4+0x2ae>
 8000e26:	d012      	beq.n	8000e4e <__udivmoddi4+0x2aa>
 8000e28:	b156      	cbz	r6, 8000e40 <__udivmoddi4+0x29c>
 8000e2a:	ebba 030e 	subs.w	r3, sl, lr
 8000e2e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e32:	fa04 f707 	lsl.w	r7, r4, r7
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431f      	orrs	r7, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	6037      	str	r7, [r6, #0]
 8000e3e:	6074      	str	r4, [r6, #4]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e46:	4618      	mov	r0, r3
 8000e48:	e6f8      	b.n	8000c3c <__udivmoddi4+0x98>
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	e6e0      	b.n	8000c10 <__udivmoddi4+0x6c>
 8000e4e:	45c2      	cmp	sl, r8
 8000e50:	d2ea      	bcs.n	8000e28 <__udivmoddi4+0x284>
 8000e52:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e56:	eb69 0503 	sbc.w	r5, r9, r3
 8000e5a:	3801      	subs	r0, #1
 8000e5c:	e7e4      	b.n	8000e28 <__udivmoddi4+0x284>
 8000e5e:	4628      	mov	r0, r5
 8000e60:	e7d7      	b.n	8000e12 <__udivmoddi4+0x26e>
 8000e62:	4640      	mov	r0, r8
 8000e64:	e791      	b.n	8000d8a <__udivmoddi4+0x1e6>
 8000e66:	4681      	mov	r9, r0
 8000e68:	e7be      	b.n	8000de8 <__udivmoddi4+0x244>
 8000e6a:	4601      	mov	r1, r0
 8000e6c:	e778      	b.n	8000d60 <__udivmoddi4+0x1bc>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	443c      	add	r4, r7
 8000e72:	e745      	b.n	8000d00 <__udivmoddi4+0x15c>
 8000e74:	4608      	mov	r0, r1
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xe6>
 8000e78:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7c:	443d      	add	r5, r7
 8000e7e:	e72b      	b.n	8000cd8 <__udivmoddi4+0x134>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <readByte>:
        *data = b;
    }
    return count;
}

int8_t readByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	72fb      	strb	r3, [r7, #11]
 8000e92:	4613      	mov	r3, r2
 8000e94:	72bb      	strb	r3, [r7, #10]
    return readBytes(handler, devAddr, regAddr, 1, data, timeout);
 8000e96:	7aba      	ldrb	r2, [r7, #10]
 8000e98:	7af9      	ldrb	r1, [r7, #11]
 8000e9a:	8b3b      	ldrh	r3, [r7, #24]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f805 	bl	8000eb4 <readBytes>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <readBytes>:

int8_t readBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af04      	add	r7, sp, #16
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	70fb      	strb	r3, [r7, #3]
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	70bb      	strb	r3, [r7, #2]
 8000eca:	4613      	mov	r3, r2
 8000ecc:	707b      	strb	r3, [r7, #1]
	int8_t count = length;
 8000ece:	787b      	ldrb	r3, [r7, #1]
 8000ed0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(handler, devAddr<<1, (uint16_t)regAddr, 1, data, (uint16_t)length, (uint32_t)timeout);
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	78bb      	ldrb	r3, [r7, #2]
 8000edc:	b298      	uxth	r0, r3
 8000ede:	787b      	ldrb	r3, [r7, #1]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	8bba      	ldrh	r2, [r7, #28]
 8000ee4:	9202      	str	r2, [sp, #8]
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2301      	movs	r3, #1
 8000eee:	4602      	mov	r2, r0
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f004 fe13 	bl	8005b1c <HAL_I2C_Mem_Read>
	return count;
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <readWord>:

int8_t readWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b088      	sub	sp, #32
 8000f06:	af02      	add	r7, sp, #8
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	72fb      	strb	r3, [r7, #11]
 8000f10:	4613      	mov	r3, r2
 8000f12:	72bb      	strb	r3, [r7, #10]
	int8_t count = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	75fb      	strb	r3, [r7, #23]
	uint8_t temp[4];
	readBytes(handler, devAddr, regAddr, 2, (uint8_t*)temp, timeout);
 8000f18:	7aba      	ldrb	r2, [r7, #10]
 8000f1a:	7af9      	ldrb	r1, [r7, #11]
 8000f1c:	8c3b      	ldrh	r3, [r7, #32]
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2302      	movs	r3, #2
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f7ff ffc3 	bl	8000eb4 <readBytes>
	*data = (((uint16_t)temp[0])<<8) | (temp[1]);
 8000f2e:	7c3b      	ldrb	r3, [r7, #16]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	7c7b      	ldrb	r3, [r7, #17]
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	b21b      	sxth	r3, r3
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	801a      	strh	r2, [r3, #0]
	return count;
 8000f42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <writeByte>:
    } else {
        return false;
    }
}

bool writeByte(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af02      	add	r7, sp, #8
 8000f54:	6078      	str	r0, [r7, #4]
 8000f56:	4608      	mov	r0, r1
 8000f58:	4611      	mov	r1, r2
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	70fb      	strb	r3, [r7, #3]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70bb      	strb	r3, [r7, #2]
 8000f64:	4613      	mov	r3, r2
 8000f66:	707b      	strb	r3, [r7, #1]
    return writeBytes(handler, devAddr, regAddr, 1, &data);
 8000f68:	78ba      	ldrb	r2, [r7, #2]
 8000f6a:	78f9      	ldrb	r1, [r7, #3]
 8000f6c:	1c7b      	adds	r3, r7, #1
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f000 f805 	bl	8000f82 <writeBytes>
 8000f78:	4603      	mov	r3, r0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <writeBytes>:

bool writeBytes(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data){
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b088      	sub	sp, #32
 8000f86:	af04      	add	r7, sp, #16
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4603      	mov	r3, r0
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70bb      	strb	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
	uint8_t status = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(handler, devAddr<<1, (uint16_t)regAddr,1,data, (uint16_t)length, (uint32_t)100);
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	b299      	uxth	r1, r3
 8000fa8:	78bb      	ldrb	r3, [r7, #2]
 8000faa:	b298      	uxth	r0, r3
 8000fac:	787b      	ldrb	r3, [r7, #1]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	2264      	movs	r2, #100	; 0x64
 8000fb2:	9202      	str	r2, [sp, #8]
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f004 fc98 	bl	80058f4 <HAL_I2C_Mem_Write>
	return status == 0;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	bf0c      	ite	eq
 8000fca:	2301      	moveq	r3, #1
 8000fcc:	2300      	movne	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <writeWord>:
bool writeWord(I2C_HandleTypeDef *handler, uint8_t devAddr, uint8_t regAddr, uint16_t data){
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	70fb      	strb	r3, [r7, #3]
 8000fea:	460b      	mov	r3, r1
 8000fec:	70bb      	strb	r3, [r7, #2]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	803b      	strh	r3, [r7, #0]
	uint8_t towrite[2];
	towrite[0]=(uint8_t)(data>>8) & 0xFF; //MSB
 8000ff2:	883b      	ldrh	r3, [r7, #0]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	733b      	strb	r3, [r7, #12]
	towrite[1]=(uint8_t)data & 0xFF; //LSB
 8000ffc:	883b      	ldrh	r3, [r7, #0]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	737b      	strb	r3, [r7, #13]
	writeBytes(handler, devAddr, regAddr, 2,(uint8_t*)towrite);
 8001002:	78ba      	ldrb	r2, [r7, #2]
 8001004:	78f9      	ldrb	r1, [r7, #3]
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2302      	movs	r3, #2
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb7 	bl	8000f82 <writeBytes>
	return true;
 8001014:	2301      	movs	r3, #1
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <setup_VL53L0X>:

#define I2C &hi2c1
extern I2C_HandleTypeDef hi2c1;


void setup_VL53L0X(VL53L0X * lidar){
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  lidar->address=0x29;//ADDRESS_DEFAULT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2229      	movs	r2, #41	; 0x29
 800102a:	701a      	strb	r2, [r3, #0]
  lidar->io_timeout=0;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	805a      	strh	r2, [r3, #2]
  lidar->did_timeout=false;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	711a      	strb	r2, [r3, #4]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <init>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool init(VL53L0X * lidar,bool io_2v8)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	70fb      	strb	r3, [r7, #3]
  // VL53L0X_DataInit() begin

  // sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
  if (io_2v8)
 8001050:	78fb      	ldrb	r3, [r7, #3]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d009      	beq.n	800106a <init+0x26>
  {
    writeReg(lidar,VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 8001056:	2189      	movs	r1, #137	; 0x89
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 faff 	bl	800165c <readReg>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	2189      	movs	r1, #137	; 0x89
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fac9 	bl	80015fc <writeReg>
      readReg(lidar,(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01)); // set bit 0
  }

  // "Set I2C standard mode"
  writeReg(lidar,0x88, 0x00);
 800106a:	2200      	movs	r2, #0
 800106c:	2188      	movs	r1, #136	; 0x88
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 fac4 	bl	80015fc <writeReg>

  writeReg(lidar,0x80, 0x01);
 8001074:	2201      	movs	r2, #1
 8001076:	2180      	movs	r1, #128	; 0x80
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 fabf 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x01);
 800107e:	2201      	movs	r2, #1
 8001080:	21ff      	movs	r1, #255	; 0xff
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 faba 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fab5 	bl	80015fc <writeReg>
  lidar->stop_variable = readReg(lidar,0x91);
 8001092:	2191      	movs	r1, #145	; 0x91
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 fae1 	bl	800165c <readReg>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	721a      	strb	r2, [r3, #8]
  //snprintf(msg,sizeof(msg),"Stop variable is: 0x%X , should be 0x%X\r\n",lidar->stop_variable,readReg(lidar,0x91));
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  writeReg(lidar,0x00, 0x01);
 80010a2:	2201      	movs	r2, #1
 80010a4:	2100      	movs	r1, #0
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 faa8 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x00);
 80010ac:	2200      	movs	r2, #0
 80010ae:	21ff      	movs	r1, #255	; 0xff
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 faa3 	bl	80015fc <writeReg>
  writeReg(lidar,0x80, 0x00);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2180      	movs	r1, #128	; 0x80
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fa9e 	bl	80015fc <writeReg>

  // disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
  writeReg(lidar,MSRC_CONFIG_CONTROL, readReg(lidar,MSRC_CONFIG_CONTROL) | 0x12);
 80010c0:	2160      	movs	r1, #96	; 0x60
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 faca 	bl	800165c <readReg>
 80010c8:	4603      	mov	r3, r0
 80010ca:	f043 0312 	orr.w	r3, r3, #18
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	2160      	movs	r1, #96	; 0x60
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f000 fa91 	bl	80015fc <writeReg>

  // set final range signal rate limit to 0.25 MCPS (million counts per second)
  setSignalRateLimit(lidar,0.25);
 80010da:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f000 faf6 	bl	80016d0 <setSignalRateLimit>
  //setSignalRateLimit(lidar,0.1);

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xFF);
 80010e4:	22ff      	movs	r2, #255	; 0xff
 80010e6:	2101      	movs	r1, #1
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fa87 	bl	80015fc <writeReg>

  // VL53L0X_StaticInit() begin

  uint8_t spad_count;
  bool spad_type_is_aperture;
  if (!getSpadInfo(lidar,&spad_count, &spad_type_is_aperture)) { return false; }
 80010ee:	f107 0213 	add.w	r2, r7, #19
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fe61 	bl	8001dc0 <getSpadInfo>
 80010fe:	4603      	mov	r3, r0
 8001100:	f083 0301 	eor.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <init+0xca>
 800110a:	2300      	movs	r3, #0
 800110c:	e271      	b.n	80015f2 <init+0x5ae>

  // The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
  // the API, but the same data seems to be more easily readable from
  // GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
  uint8_t ref_spad_map[6];
  readMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	2306      	movs	r3, #6
 8001114:	21b0      	movs	r1, #176	; 0xb0
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f001 fb80 	bl	800281c <readMulti>
  //sprintf(msg_2,"Spads: 0x%X, 0x%X, 0x%X, 0x%X, 0x%X, 0x%X",ref_spad_map[0],ref_spad_map[1],ref_spad_map[2],ref_spad_map[3],ref_spad_map[4],ref_spad_map[5]);
  //HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
  // -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)


  writeReg(lidar,0xFF, 0x01);
 800111c:	2201      	movs	r2, #1
 800111e:	21ff      	movs	r1, #255	; 0xff
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f000 fa6b 	bl	80015fc <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001126:	2200      	movs	r2, #0
 8001128:	214f      	movs	r1, #79	; 0x4f
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fa66 	bl	80015fc <writeReg>
  writeReg(lidar,DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001130:	222c      	movs	r2, #44	; 0x2c
 8001132:	214e      	movs	r1, #78	; 0x4e
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f000 fa61 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x00);
 800113a:	2200      	movs	r2, #0
 800113c:	21ff      	movs	r1, #255	; 0xff
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 fa5c 	bl	80015fc <writeReg>
  writeReg(lidar,GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001144:	22b4      	movs	r2, #180	; 0xb4
 8001146:	21b6      	movs	r1, #182	; 0xb6
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa57 	bl	80015fc <writeReg>

  uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <init+0x114>
 8001154:	230c      	movs	r3, #12
 8001156:	e000      	b.n	800115a <init+0x116>
 8001158:	2300      	movs	r3, #0
 800115a:	757b      	strb	r3, [r7, #21]
  uint8_t spads_enabled = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < 48; i++)
 8001160:	2300      	movs	r3, #0
 8001162:	75bb      	strb	r3, [r7, #22]
 8001164:	e056      	b.n	8001214 <init+0x1d0>
  {
    if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001166:	7dba      	ldrb	r2, [r7, #22]
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	429a      	cmp	r2, r3
 800116c:	d303      	bcc.n	8001176 <init+0x132>
 800116e:	7d3b      	ldrb	r3, [r7, #20]
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	429a      	cmp	r2, r3
 8001174:	d128      	bne.n	80011c8 <init+0x184>
    {
      // This bit is lower than the first one that should be enabled, or
      // (reference_spad_count) bits have already been enabled, so zero this bit
      ref_spad_map[i / 8] &= ~(1 << (i % 7));
 8001176:	7dbb      	ldrb	r3, [r7, #22]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b2db      	uxtb	r3, r3
 800117c:	461c      	mov	r4, r3
 800117e:	f107 0218 	add.w	r2, r7, #24
 8001182:	4413      	add	r3, r2
 8001184:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001188:	b258      	sxtb	r0, r3
 800118a:	7dba      	ldrb	r2, [r7, #22]
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <init+0x180>)
 800118e:	fba3 1302 	umull	r1, r3, r3, r2
 8001192:	1ad1      	subs	r1, r2, r3
 8001194:	0849      	lsrs	r1, r1, #1
 8001196:	440b      	add	r3, r1
 8001198:	0899      	lsrs	r1, r3, #2
 800119a:	460b      	mov	r3, r1
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	1a5b      	subs	r3, r3, r1
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	2301      	movs	r3, #1
 80011a8:	4093      	lsls	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	b25b      	sxtb	r3, r3
 80011b0:	4003      	ands	r3, r0
 80011b2:	b25b      	sxtb	r3, r3
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4423      	add	r3, r4
 80011bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80011c0:	e021      	b.n	8001206 <init+0x1c2>
 80011c2:	bf00      	nop
 80011c4:	24924925 	.word	0x24924925
    }
    else if ((ref_spad_map[i / 8] >> (i % 7)) & 0x1)
 80011c8:	7dbb      	ldrb	r3, [r7, #22]
 80011ca:	08db      	lsrs	r3, r3, #3
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	f107 0218 	add.w	r2, r7, #24
 80011d2:	4413      	add	r3, r2
 80011d4:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80011d8:	4618      	mov	r0, r3
 80011da:	7dba      	ldrb	r2, [r7, #22]
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <init+0x1cc>)
 80011de:	fba3 1302 	umull	r1, r3, r3, r2
 80011e2:	1ad1      	subs	r1, r2, r3
 80011e4:	0849      	lsrs	r1, r1, #1
 80011e6:	440b      	add	r3, r1
 80011e8:	0899      	lsrs	r1, r3, #2
 80011ea:	460b      	mov	r3, r1
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a5b      	subs	r3, r3, r1
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	fa40 f303 	asr.w	r3, r0, r3
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <init+0x1c2>
    {
      spads_enabled++;
 8001200:	7dfb      	ldrb	r3, [r7, #23]
 8001202:	3301      	adds	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
  for (uint8_t i = 0; i < 48; i++)
 8001206:	7dbb      	ldrb	r3, [r7, #22]
 8001208:	3301      	adds	r3, #1
 800120a:	75bb      	strb	r3, [r7, #22]
 800120c:	e002      	b.n	8001214 <init+0x1d0>
 800120e:	bf00      	nop
 8001210:	24924925 	.word	0x24924925
 8001214:	7dbb      	ldrb	r3, [r7, #22]
 8001216:	2b2f      	cmp	r3, #47	; 0x2f
 8001218:	d9a5      	bls.n	8001166 <init+0x122>
    }
  }

  writeMulti(lidar,GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 800121a:	f107 020c 	add.w	r2, r7, #12
 800121e:	2306      	movs	r3, #6
 8001220:	21b0      	movs	r1, #176	; 0xb0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fb32 	bl	800288c <writeMulti>
  // -- VL53L0X_set_reference_spads() end

  // -- VL53L0X_load_tuning_settings() begin
  // DefaultTuningSettings from vl53l0x_tuning.h

  writeReg(lidar,0xFF, 0x01);
 8001228:	2201      	movs	r2, #1
 800122a:	21ff      	movs	r1, #255	; 0xff
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 f9e5 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f9e0 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 800123c:	2200      	movs	r2, #0
 800123e:	21ff      	movs	r1, #255	; 0xff
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f000 f9db 	bl	80015fc <writeReg>
  writeReg(lidar,0x09, 0x00);
 8001246:	2200      	movs	r2, #0
 8001248:	2109      	movs	r1, #9
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f9d6 	bl	80015fc <writeReg>
  writeReg(lidar,0x10, 0x00);
 8001250:	2200      	movs	r2, #0
 8001252:	2110      	movs	r1, #16
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f000 f9d1 	bl	80015fc <writeReg>
  writeReg(lidar,0x11, 0x00);
 800125a:	2200      	movs	r2, #0
 800125c:	2111      	movs	r1, #17
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f9cc 	bl	80015fc <writeReg>

  writeReg(lidar,0x24, 0x01);
 8001264:	2201      	movs	r2, #1
 8001266:	2124      	movs	r1, #36	; 0x24
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f9c7 	bl	80015fc <writeReg>
  writeReg(lidar,0x25, 0xFF);
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	2125      	movs	r1, #37	; 0x25
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f9c2 	bl	80015fc <writeReg>
  writeReg(lidar,0x75, 0x00);
 8001278:	2200      	movs	r2, #0
 800127a:	2175      	movs	r1, #117	; 0x75
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f9bd 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001282:	2201      	movs	r2, #1
 8001284:	21ff      	movs	r1, #255	; 0xff
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f000 f9b8 	bl	80015fc <writeReg>
  writeReg(lidar,0x4E, 0x2C);
 800128c:	222c      	movs	r2, #44	; 0x2c
 800128e:	214e      	movs	r1, #78	; 0x4e
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f9b3 	bl	80015fc <writeReg>
  writeReg(lidar,0x48, 0x00);
 8001296:	2200      	movs	r2, #0
 8001298:	2148      	movs	r1, #72	; 0x48
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f9ae 	bl	80015fc <writeReg>
  writeReg(lidar,0x30, 0x20);
 80012a0:	2220      	movs	r2, #32
 80012a2:	2130      	movs	r1, #48	; 0x30
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f9a9 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 80012aa:	2200      	movs	r2, #0
 80012ac:	21ff      	movs	r1, #255	; 0xff
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 f9a4 	bl	80015fc <writeReg>
  writeReg(lidar,0x30, 0x09);
 80012b4:	2209      	movs	r2, #9
 80012b6:	2130      	movs	r1, #48	; 0x30
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f000 f99f 	bl	80015fc <writeReg>
  writeReg(lidar,0x54, 0x00);
 80012be:	2200      	movs	r2, #0
 80012c0:	2154      	movs	r1, #84	; 0x54
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f99a 	bl	80015fc <writeReg>
  writeReg(lidar,0x31, 0x04);
 80012c8:	2204      	movs	r2, #4
 80012ca:	2131      	movs	r1, #49	; 0x31
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f000 f995 	bl	80015fc <writeReg>
  writeReg(lidar,0x32, 0x03);
 80012d2:	2203      	movs	r2, #3
 80012d4:	2132      	movs	r1, #50	; 0x32
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 f990 	bl	80015fc <writeReg>
  writeReg(lidar,0x40, 0x83);
 80012dc:	2283      	movs	r2, #131	; 0x83
 80012de:	2140      	movs	r1, #64	; 0x40
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f98b 	bl	80015fc <writeReg>
  writeReg(lidar,0x46, 0x25);
 80012e6:	2225      	movs	r2, #37	; 0x25
 80012e8:	2146      	movs	r1, #70	; 0x46
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 f986 	bl	80015fc <writeReg>
  writeReg(lidar,0x60, 0x00);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2160      	movs	r1, #96	; 0x60
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f981 	bl	80015fc <writeReg>
  writeReg(lidar,0x27, 0x00);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2127      	movs	r1, #39	; 0x27
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f97c 	bl	80015fc <writeReg>
  writeReg(lidar,0x50, 0x06);
 8001304:	2206      	movs	r2, #6
 8001306:	2150      	movs	r1, #80	; 0x50
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f977 	bl	80015fc <writeReg>
  writeReg(lidar,0x51, 0x00);
 800130e:	2200      	movs	r2, #0
 8001310:	2151      	movs	r1, #81	; 0x51
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 f972 	bl	80015fc <writeReg>
  writeReg(lidar,0x52, 0x96);
 8001318:	2296      	movs	r2, #150	; 0x96
 800131a:	2152      	movs	r1, #82	; 0x52
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f96d 	bl	80015fc <writeReg>
  writeReg(lidar,0x56, 0x08);
 8001322:	2208      	movs	r2, #8
 8001324:	2156      	movs	r1, #86	; 0x56
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f968 	bl	80015fc <writeReg>
  writeReg(lidar,0x57, 0x30);
 800132c:	2230      	movs	r2, #48	; 0x30
 800132e:	2157      	movs	r1, #87	; 0x57
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f963 	bl	80015fc <writeReg>
  writeReg(lidar,0x61, 0x00);
 8001336:	2200      	movs	r2, #0
 8001338:	2161      	movs	r1, #97	; 0x61
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f95e 	bl	80015fc <writeReg>
  writeReg(lidar,0x62, 0x00);
 8001340:	2200      	movs	r2, #0
 8001342:	2162      	movs	r1, #98	; 0x62
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f959 	bl	80015fc <writeReg>
  writeReg(lidar,0x64, 0x00);
 800134a:	2200      	movs	r2, #0
 800134c:	2164      	movs	r1, #100	; 0x64
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 f954 	bl	80015fc <writeReg>
  writeReg(lidar,0x65, 0x00);
 8001354:	2200      	movs	r2, #0
 8001356:	2165      	movs	r1, #101	; 0x65
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f94f 	bl	80015fc <writeReg>
  writeReg(lidar,0x66, 0xA0);
 800135e:	22a0      	movs	r2, #160	; 0xa0
 8001360:	2166      	movs	r1, #102	; 0x66
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f94a 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001368:	2201      	movs	r2, #1
 800136a:	21ff      	movs	r1, #255	; 0xff
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f945 	bl	80015fc <writeReg>
  writeReg(lidar,0x22, 0x32);
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	2122      	movs	r1, #34	; 0x22
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f940 	bl	80015fc <writeReg>
  writeReg(lidar,0x47, 0x14);
 800137c:	2214      	movs	r2, #20
 800137e:	2147      	movs	r1, #71	; 0x47
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f93b 	bl	80015fc <writeReg>
  writeReg(lidar,0x49, 0xFF);
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	2149      	movs	r1, #73	; 0x49
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f936 	bl	80015fc <writeReg>
  writeReg(lidar,0x4A, 0x00);
 8001390:	2200      	movs	r2, #0
 8001392:	214a      	movs	r1, #74	; 0x4a
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f931 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 800139a:	2200      	movs	r2, #0
 800139c:	21ff      	movs	r1, #255	; 0xff
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f92c 	bl	80015fc <writeReg>
  writeReg(lidar,0x7A, 0x0A);
 80013a4:	220a      	movs	r2, #10
 80013a6:	217a      	movs	r1, #122	; 0x7a
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f927 	bl	80015fc <writeReg>
  writeReg(lidar,0x7B, 0x00);
 80013ae:	2200      	movs	r2, #0
 80013b0:	217b      	movs	r1, #123	; 0x7b
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 f922 	bl	80015fc <writeReg>
  writeReg(lidar,0x78, 0x21);
 80013b8:	2221      	movs	r2, #33	; 0x21
 80013ba:	2178      	movs	r1, #120	; 0x78
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f000 f91d 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 80013c2:	2201      	movs	r2, #1
 80013c4:	21ff      	movs	r1, #255	; 0xff
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f918 	bl	80015fc <writeReg>
  writeReg(lidar,0x23, 0x34);
 80013cc:	2234      	movs	r2, #52	; 0x34
 80013ce:	2123      	movs	r1, #35	; 0x23
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f913 	bl	80015fc <writeReg>
  writeReg(lidar,0x42, 0x00);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2142      	movs	r1, #66	; 0x42
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f90e 	bl	80015fc <writeReg>
  writeReg(lidar,0x44, 0xFF);
 80013e0:	22ff      	movs	r2, #255	; 0xff
 80013e2:	2144      	movs	r1, #68	; 0x44
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f000 f909 	bl	80015fc <writeReg>
  writeReg(lidar,0x45, 0x26);
 80013ea:	2226      	movs	r2, #38	; 0x26
 80013ec:	2145      	movs	r1, #69	; 0x45
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f904 	bl	80015fc <writeReg>
  writeReg(lidar,0x46, 0x05);
 80013f4:	2205      	movs	r2, #5
 80013f6:	2146      	movs	r1, #70	; 0x46
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f8ff 	bl	80015fc <writeReg>
  writeReg(lidar,0x40, 0x40);
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	2140      	movs	r1, #64	; 0x40
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f8fa 	bl	80015fc <writeReg>
  writeReg(lidar,0x0E, 0x06);
 8001408:	2206      	movs	r2, #6
 800140a:	210e      	movs	r1, #14
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f8f5 	bl	80015fc <writeReg>
  writeReg(lidar,0x20, 0x1A);
 8001412:	221a      	movs	r2, #26
 8001414:	2120      	movs	r1, #32
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f000 f8f0 	bl	80015fc <writeReg>
  writeReg(lidar,0x43, 0x40);
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	2143      	movs	r1, #67	; 0x43
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8eb 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001426:	2200      	movs	r2, #0
 8001428:	21ff      	movs	r1, #255	; 0xff
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 f8e6 	bl	80015fc <writeReg>
  writeReg(lidar,0x34, 0x03);
 8001430:	2203      	movs	r2, #3
 8001432:	2134      	movs	r1, #52	; 0x34
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f8e1 	bl	80015fc <writeReg>
  writeReg(lidar,0x35, 0x44);
 800143a:	2244      	movs	r2, #68	; 0x44
 800143c:	2135      	movs	r1, #53	; 0x35
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f8dc 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001444:	2201      	movs	r2, #1
 8001446:	21ff      	movs	r1, #255	; 0xff
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f8d7 	bl	80015fc <writeReg>
  writeReg(lidar,0x31, 0x04);
 800144e:	2204      	movs	r2, #4
 8001450:	2131      	movs	r1, #49	; 0x31
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 f8d2 	bl	80015fc <writeReg>
  writeReg(lidar,0x4B, 0x09);
 8001458:	2209      	movs	r2, #9
 800145a:	214b      	movs	r1, #75	; 0x4b
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f8cd 	bl	80015fc <writeReg>
  writeReg(lidar,0x4C, 0x05);
 8001462:	2205      	movs	r2, #5
 8001464:	214c      	movs	r1, #76	; 0x4c
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8c8 	bl	80015fc <writeReg>
  writeReg(lidar,0x4D, 0x04);
 800146c:	2204      	movs	r2, #4
 800146e:	214d      	movs	r1, #77	; 0x4d
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f8c3 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001476:	2200      	movs	r2, #0
 8001478:	21ff      	movs	r1, #255	; 0xff
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f8be 	bl	80015fc <writeReg>
  writeReg(lidar,0x44, 0x00);
 8001480:	2200      	movs	r2, #0
 8001482:	2144      	movs	r1, #68	; 0x44
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f8b9 	bl	80015fc <writeReg>
  writeReg(lidar,0x45, 0x20);
 800148a:	2220      	movs	r2, #32
 800148c:	2145      	movs	r1, #69	; 0x45
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f8b4 	bl	80015fc <writeReg>
  writeReg(lidar,0x47, 0x08);
 8001494:	2208      	movs	r2, #8
 8001496:	2147      	movs	r1, #71	; 0x47
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f8af 	bl	80015fc <writeReg>
  writeReg(lidar,0x48, 0x28);
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	2148      	movs	r1, #72	; 0x48
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f8aa 	bl	80015fc <writeReg>
  writeReg(lidar,0x67, 0x00);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2167      	movs	r1, #103	; 0x67
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 f8a5 	bl	80015fc <writeReg>
  writeReg(lidar,0x70, 0x04);
 80014b2:	2204      	movs	r2, #4
 80014b4:	2170      	movs	r1, #112	; 0x70
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f8a0 	bl	80015fc <writeReg>
  writeReg(lidar,0x71, 0x01);
 80014bc:	2201      	movs	r2, #1
 80014be:	2171      	movs	r1, #113	; 0x71
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f89b 	bl	80015fc <writeReg>
  writeReg(lidar,0x72, 0xFE);
 80014c6:	22fe      	movs	r2, #254	; 0xfe
 80014c8:	2172      	movs	r1, #114	; 0x72
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f896 	bl	80015fc <writeReg>
  writeReg(lidar,0x76, 0x00);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2176      	movs	r1, #118	; 0x76
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f891 	bl	80015fc <writeReg>
  writeReg(lidar,0x77, 0x00);
 80014da:	2200      	movs	r2, #0
 80014dc:	2177      	movs	r1, #119	; 0x77
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f88c 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 80014e4:	2201      	movs	r2, #1
 80014e6:	21ff      	movs	r1, #255	; 0xff
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f000 f887 	bl	80015fc <writeReg>
  writeReg(lidar,0x0D, 0x01);
 80014ee:	2201      	movs	r2, #1
 80014f0:	210d      	movs	r1, #13
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f882 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 80014f8:	2200      	movs	r2, #0
 80014fa:	21ff      	movs	r1, #255	; 0xff
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 f87d 	bl	80015fc <writeReg>
  writeReg(lidar,0x80, 0x01);
 8001502:	2201      	movs	r2, #1
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f878 	bl	80015fc <writeReg>
  writeReg(lidar,0x01, 0xF8);
 800150c:	22f8      	movs	r2, #248	; 0xf8
 800150e:	2101      	movs	r1, #1
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f000 f873 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x01);
 8001516:	2201      	movs	r2, #1
 8001518:	21ff      	movs	r1, #255	; 0xff
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f000 f86e 	bl	80015fc <writeReg>
  writeReg(lidar,0x8E, 0x01);
 8001520:	2201      	movs	r2, #1
 8001522:	218e      	movs	r1, #142	; 0x8e
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f000 f869 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x01);
 800152a:	2201      	movs	r2, #1
 800152c:	2100      	movs	r1, #0
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f864 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8001534:	2200      	movs	r2, #0
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f000 f85f 	bl	80015fc <writeReg>
  writeReg(lidar,0x80, 0x00);
 800153e:	2200      	movs	r2, #0
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f85a 	bl	80015fc <writeReg>


  writeReg(lidar,SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001548:	2204      	movs	r2, #4
 800154a:	210a      	movs	r1, #10
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f000 f855 	bl	80015fc <writeReg>
  writeReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH, readReg(lidar,GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001552:	2184      	movs	r1, #132	; 0x84
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f881 	bl	800165c <readReg>
 800155a:	4603      	mov	r3, r0
 800155c:	f023 0310 	bic.w	r3, r3, #16
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	2184      	movs	r1, #132	; 0x84
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f848 	bl	80015fc <writeReg>
  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 800156c:	2201      	movs	r2, #1
 800156e:	210b      	movs	r1, #11
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f843 	bl	80015fc <writeReg>

  // -- VL53L0X_SetGpioConfig() end

  lidar->measurement_timing_budget_us = getMeasurementTimingBudget(lidar);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f979 	bl	800186e <getMeasurementTimingBudget>
 800157c:	4602      	mov	r2, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60da      	str	r2, [r3, #12]
  // "Disable MSRC and TCC by default"
  // MSRC = Minimum Signal Rate Check
  // TCC = Target CentreCheck
  // -- VL53L0X_SetSequenceStepEnable() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001582:	22e8      	movs	r2, #232	; 0xe8
 8001584:	2101      	movs	r1, #1
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f838 	bl	80015fc <writeReg>

  // -- VL53L0X_SetSequenceStepEnable() end

  // "Recalculate timing budget"
  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4619      	mov	r1, r3
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f000 f8d2 	bl	800173c <setMeasurementTimingBudget>

  // VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

  // -- VL53L0X_perform_vhv_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001598:	2201      	movs	r2, #1
 800159a:	2101      	movs	r1, #1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f000 f82d 	bl	80015fc <writeReg>
  if (!performSingleRefCalibration(lidar,0x40)) { return false; }
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f000 fddb 	bl	8002160 <performSingleRefCalibration>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f083 0301 	eor.w	r3, r3, #1
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <init+0x576>
 80015b6:	2300      	movs	r3, #0
 80015b8:	e01b      	b.n	80015f2 <init+0x5ae>

  // -- VL53L0X_perform_vhv_calibration() end

  // -- VL53L0X_perform_phase_calibration() begin

  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 80015ba:	2202      	movs	r2, #2
 80015bc:	2101      	movs	r1, #1
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f000 f81c 	bl	80015fc <writeReg>
  if (!performSingleRefCalibration(lidar,0x00)) { return false; }
 80015c4:	2100      	movs	r1, #0
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fdca 	bl	8002160 <performSingleRefCalibration>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f083 0301 	eor.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <init+0x598>
 80015d8:	2300      	movs	r3, #0
 80015da:	e00a      	b.n	80015f2 <init+0x5ae>

  // -- VL53L0X_perform_phase_calibration() end

  // "restore the previous Sequence Config"
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0xE8);
 80015dc:	22e8      	movs	r2, #232	; 0xe8
 80015de:	2101      	movs	r1, #1
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 f80b 	bl	80015fc <writeReg>

  // VL53L0X_PerformRefCalibration() end
  setTimeout(lidar,500);
 80015e6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fbc8 	bl	8001d80 <setTimeout>

  return true;
 80015f0:	2301      	movs	r3, #1


}
 80015f2:	4618      	mov	r0, r3
 80015f4:	371c      	adds	r7, #28
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	bf00      	nop

080015fc <writeReg>:

// Write an 8-bit register
void writeReg(VL53L0X * lidar,uint8_t reg, uint8_t value)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	70fb      	strb	r3, [r7, #3]
 8001608:	4613      	mov	r3, r2
 800160a:	70bb      	strb	r3, [r7, #2]
	writeByte(I2C,lidar->address,reg,value);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7819      	ldrb	r1, [r3, #0]
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	4804      	ldr	r0, [pc, #16]	; (8001628 <writeReg+0x2c>)
 8001616:	f7ff fc9a 	bl	8000f4e <writeByte>
	lidar->last_status = 0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	741a      	strb	r2, [r3, #16]
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000234 	.word	0x20000234

0800162c <writeReg16Bit>:



// Write a 16-bit register
void writeReg16Bit(VL53L0X * lidar,uint8_t reg, uint16_t value)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	70fb      	strb	r3, [r7, #3]
 8001638:	4613      	mov	r3, r2
 800163a:	803b      	strh	r3, [r7, #0]
  writeWord(I2C,lidar->address,reg,value);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7819      	ldrb	r1, [r3, #0]
 8001640:	883b      	ldrh	r3, [r7, #0]
 8001642:	78fa      	ldrb	r2, [r7, #3]
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <writeReg16Bit+0x2c>)
 8001646:	f7ff fcc7 	bl	8000fd8 <writeWord>
  lidar->last_status = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	741a      	strb	r2, [r3, #16]
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000234 	.word	0x20000234

0800165c <readReg>:
  lidar->last_status = 0;
}

// Read an 8-bit register
uint8_t readReg(VL53L0X * lidar,uint8_t reg)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	70fb      	strb	r3, [r7, #3]
  uint8_t value;
  readByte(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	7819      	ldrb	r1, [r3, #0]
 800166c:	f107 000f 	add.w	r0, r7, #15
 8001670:	78fa      	ldrb	r2, [r7, #3]
 8001672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	4603      	mov	r3, r0
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <readReg+0x34>)
 800167c:	f7ff fc02 	bl	8000e84 <readByte>

  lidar->last_status = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	741a      	strb	r2, [r3, #16]
  return value;
 8001686:	7bfb      	ldrb	r3, [r7, #15]
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000234 	.word	0x20000234

08001694 <readReg16Bit>:

// Read a 16-bit register
uint16_t readReg16Bit(VL53L0X * lidar,uint8_t reg)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af02      	add	r7, sp, #8
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  uint16_t value;
  readWord(I2C,lidar->address,reg,&value,I2CTIMEOUT);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	7819      	ldrb	r1, [r3, #0]
 80016a4:	f107 000e 	add.w	r0, r7, #14
 80016a8:	78fa      	ldrb	r2, [r7, #3]
 80016aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	4603      	mov	r3, r0
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <readReg16Bit+0x34>)
 80016b4:	f7ff fc25 	bl	8000f02 <readWord>

  lidar->last_status = 0;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	741a      	strb	r2, [r3, #16]
  return value;
 80016be:	89fb      	ldrh	r3, [r7, #14]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000234 	.word	0x20000234
 80016cc:	00000000 	.word	0x00000000

080016d0 <setSignalRateLimit>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool setSignalRateLimit(VL53L0X * lidar,float limit_Mcps)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	ed87 0a02 	vstr	s0, [r7, #8]
  if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 80016dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80016e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	d40a      	bmi.n	8001700 <setSignalRateLimit+0x30>
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f7fe ff34 	bl	8000558 <__aeabi_f2d>
 80016f0:	a310      	add	r3, pc, #64	; (adr r3, 8001734 <setSignalRateLimit+0x64>)
 80016f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f6:	f7ff fa13 	bl	8000b20 <__aeabi_dcmpgt>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <setSignalRateLimit+0x34>
 8001700:	2300      	movs	r3, #0
 8001702:	e011      	b.n	8001728 <setSignalRateLimit+0x58>

  // Q9.7 fixed point format (9 integer bits, 7 fractional bits)
  writeReg16Bit(lidar,FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001704:	edd7 7a02 	vldr	s15, [r7, #8]
 8001708:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001730 <setSignalRateLimit+0x60>
 800170c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001714:	edc7 7a01 	vstr	s15, [r7, #4]
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	b29b      	uxth	r3, r3
 800171c:	461a      	mov	r2, r3
 800171e:	2144      	movs	r1, #68	; 0x44
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f7ff ff83 	bl	800162c <writeReg16Bit>
  return true;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	43000000 	.word	0x43000000
 8001734:	0a3d70a4 	.word	0x0a3d70a4
 8001738:	407fffd7 	.word	0x407fffd7

0800173c <setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool setMeasurementTimingBudget(VL53L0X * lidar,uint32_t budget_us)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b092      	sub	sp, #72	; 0x48
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead      = 1320; // note that this is different than the value in get_
 8001746:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800174a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t const EndOverhead        = 960;
 800174e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001752:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t const MsrcOverhead       = 660;
 8001754:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001758:	87bb      	strh	r3, [r7, #60]	; 0x3c
  uint16_t const TccOverhead        = 590;
 800175a:	f240 234e 	movw	r3, #590	; 0x24e
 800175e:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t const DssOverhead        = 690;
 8001760:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001764:	873b      	strh	r3, [r7, #56]	; 0x38
  uint16_t const PreRangeOverhead   = 660;
 8001766:	f44f 7325 	mov.w	r3, #660	; 0x294
 800176a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint16_t const FinalRangeOverhead = 550;
 800176c:	f240 2326 	movw	r3, #550	; 0x226
 8001770:	86bb      	strh	r3, [r7, #52]	; 0x34

  uint32_t const MinTimingBudget = 20000;
 8001772:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001776:	633b      	str	r3, [r7, #48]	; 0x30

  if (budget_us < MinTimingBudget) { return false; }
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177c:	429a      	cmp	r2, r3
 800177e:	d201      	bcs.n	8001784 <setMeasurementTimingBudget+0x48>
 8001780:	2300      	movs	r3, #0
 8001782:	e070      	b.n	8001866 <setMeasurementTimingBudget+0x12a>

  uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001784:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001788:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800178a:	4413      	add	r3, r2
 800178c:	647b      	str	r3, [r7, #68]	; 0x44

  getSequenceStepEnables(lidar,&enables);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fbb3 	bl	8001f00 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 800179a:	f107 020c 	add.w	r2, r7, #12
 800179e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a2:	4619      	mov	r1, r3
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 fbf6 	bl	8001f96 <getSequenceStepTimeouts>

  if (enables.tcc)
 80017aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <setMeasurementTimingBudget+0x82>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80017b6:	4413      	add	r3, r2
 80017b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017ba:	4413      	add	r3, r2
 80017bc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.dss)
 80017be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d007      	beq.n	80017d6 <setMeasurementTimingBudget+0x9a>
  {
    used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017d0:	4413      	add	r3, r2
 80017d2:	647b      	str	r3, [r7, #68]	; 0x44
 80017d4:	e009      	b.n	80017ea <setMeasurementTimingBudget+0xae>
  }
  else if (enables.msrc)
 80017d6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <setMeasurementTimingBudget+0xae>
  {
    used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80017e2:	4413      	add	r3, r2
 80017e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017e6:	4413      	add	r3, r2
 80017e8:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.pre_range)
 80017ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <setMeasurementTimingBudget+0xc2>
  {
    used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80017f6:	4413      	add	r3, r2
 80017f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80017fa:	4413      	add	r3, r2
 80017fc:	647b      	str	r3, [r7, #68]	; 0x44
  }

  if (enables.final_range)
 80017fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001802:	2b00      	cmp	r3, #0
 8001804:	d02e      	beq.n	8001864 <setMeasurementTimingBudget+0x128>
  {
    used_budget_us += FinalRangeOverhead;
 8001806:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001808:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800180a:	4413      	add	r3, r2
 800180c:	647b      	str	r3, [r7, #68]	; 0x44
    // budget and the sum of all other timeouts within the sequence.
    // If there is no room for the final range timeout, then an error
    // will be set. Otherwise the remaining time will be applied to
    // the final range."

    if (used_budget_us > budget_us)
 800180e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d901      	bls.n	800181a <setMeasurementTimingBudget+0xde>
    {
      // "Requested timeout too big."
      return false;
 8001816:	2300      	movs	r3, #0
 8001818:	e025      	b.n	8001866 <setMeasurementTimingBudget+0x12a>
    }

    uint32_t final_range_timeout_us = budget_us - used_budget_us;
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(final_range_timeout_us,
                                 timeouts.final_range_vcsel_period_pclks);
 8001822:	89fb      	ldrh	r3, [r7, #14]
      timeoutMicrosecondsToMclks(final_range_timeout_us,
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800182a:	f000 fc7f 	bl	800212c <timeoutMicrosecondsToMclks>
 800182e:	4603      	mov	r3, r0
    uint16_t final_range_timeout_mclks =
 8001830:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

    if (enables.pre_range)
 8001834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <setMeasurementTimingBudget+0x10c>
    {
      final_range_timeout_mclks += timeouts.pre_range_mclks;
 800183c:	8a7a      	ldrh	r2, [r7, #18]
 800183e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001842:	4413      	add	r3, r2
 8001844:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001848:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800184c:	4618      	mov	r0, r3
 800184e:	f000 fc22 	bl	8002096 <encodeTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	461a      	mov	r2, r3
 8001856:	2171      	movs	r1, #113	; 0x71
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fee7 	bl	800162c <writeReg16Bit>
      encodeTimeout(final_range_timeout_mclks));

    // set_sequence_step_timeout() end

    lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	60da      	str	r2, [r3, #12]
  }
  return true;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3748      	adds	r7, #72	; 0x48
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <getMeasurementTimingBudget>:

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
uint32_t getMeasurementTimingBudget(VL53L0X * lidar)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b08e      	sub	sp, #56	; 0x38
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 8001876:	f240 7376 	movw	r3, #1910	; 0x776
 800187a:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t const EndOverhead        = 960;
 800187c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001880:	863b      	strh	r3, [r7, #48]	; 0x30
  uint16_t const MsrcOverhead       = 660;
 8001882:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001886:	85fb      	strh	r3, [r7, #46]	; 0x2e
  uint16_t const TccOverhead        = 590;
 8001888:	f240 234e 	movw	r3, #590	; 0x24e
 800188c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint16_t const DssOverhead        = 690;
 800188e:	f240 23b2 	movw	r3, #690	; 0x2b2
 8001892:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t const PreRangeOverhead   = 660;
 8001894:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001898:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t const FinalRangeOverhead = 550;
 800189a:	f240 2326 	movw	r3, #550	; 0x226
 800189e:	84fb      	strh	r3, [r7, #38]	; 0x26

  // "Start and end overhead times always present"
  uint32_t budget_us = StartOverhead + EndOverhead;
 80018a0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80018a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80018a4:	4413      	add	r3, r2
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34

  getSequenceStepEnables(lidar,&enables);
 80018a8:	f107 0320 	add.w	r3, r7, #32
 80018ac:	4619      	mov	r1, r3
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fb26 	bl	8001f00 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 80018b4:	f107 0208 	add.w	r2, r7, #8
 80018b8:	f107 0320 	add.w	r3, r7, #32
 80018bc:	4619      	mov	r1, r3
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 fb69 	bl	8001f96 <getSequenceStepTimeouts>

  if (enables.tcc)
 80018c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <getMeasurementTimingBudget+0x6a>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 80018cc:	697a      	ldr	r2, [r7, #20]
 80018ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018d0:	4413      	add	r3, r2
 80018d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018d4:	4413      	add	r3, r2
 80018d6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.dss)
 80018d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d007      	beq.n	80018f0 <getMeasurementTimingBudget+0x82>
  {
    budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018e4:	4413      	add	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018ea:	4413      	add	r3, r2
 80018ec:	637b      	str	r3, [r7, #52]	; 0x34
 80018ee:	e009      	b.n	8001904 <getMeasurementTimingBudget+0x96>
  }
  else if (enables.msrc)
 80018f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <getMeasurementTimingBudget+0x96>
  {
    budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018fc:	4413      	add	r3, r2
 80018fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001900:	4413      	add	r3, r2
 8001902:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.pre_range)
 8001904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <getMeasurementTimingBudget+0xaa>
  {
    budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001910:	4413      	add	r3, r2
 8001912:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001914:	4413      	add	r3, r2
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  }

  if (enables.final_range)
 8001918:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <getMeasurementTimingBudget+0xbe>
  {
    budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8001920:	69fa      	ldr	r2, [r7, #28]
 8001922:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001924:	4413      	add	r3, r2
 8001926:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001928:	4413      	add	r3, r2
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  lidar->measurement_timing_budget_us = budget_us; // store for internal reuse
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001930:	60da      	str	r2, [r3, #12]
  return budget_us;
 8001932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001934:	4618      	mov	r0, r3
 8001936:	3738      	adds	r7, #56	; 0x38
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <setVcselPulsePeriod>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool setVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type, uint8_t period_pclks)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	70fb      	strb	r3, [r7, #3]
 8001948:	4613      	mov	r3, r2
 800194a:	70bb      	strb	r3, [r7, #2]
  uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 800194c:	78bb      	ldrb	r3, [r7, #2]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 fc70 	bl	8002234 <encodeVcselPeriod>
 8001954:	4603      	mov	r3, r0
 8001956:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  SequenceStepEnables enables;
  SequenceStepTimeouts timeouts;

  getSequenceStepEnables(lidar,&enables);
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	4619      	mov	r1, r3
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 facd 	bl	8001f00 <getSequenceStepEnables>
  getSequenceStepTimeouts(lidar,&enables, &timeouts);
 8001966:	f107 0208 	add.w	r2, r7, #8
 800196a:	f107 0320 	add.w	r3, r7, #32
 800196e:	4619      	mov	r1, r3
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fb10 	bl	8001f96 <getSequenceStepTimeouts>
  //
  // For the MSRC timeout, the same applies - this timeout being
  // dependant on the pre-range vcsel period."


  if (type == VcselPeriodPreRange)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d165      	bne.n	8001a48 <setVcselPulsePeriod+0x10c>
  {
    // "Set phase check limits"
    switch (period_pclks)
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	3b0c      	subs	r3, #12
 8001980:	2b06      	cmp	r3, #6
 8001982:	d829      	bhi.n	80019d8 <setVcselPulsePeriod+0x9c>
 8001984:	a201      	add	r2, pc, #4	; (adr r2, 800198c <setVcselPulsePeriod+0x50>)
 8001986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198a:	bf00      	nop
 800198c:	080019a9 	.word	0x080019a9
 8001990:	080019d9 	.word	0x080019d9
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019d9 	.word	0x080019d9
 800199c:	080019c1 	.word	0x080019c1
 80019a0:	080019d9 	.word	0x080019d9
 80019a4:	080019cd 	.word	0x080019cd
    {
      case 12:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80019a8:	2218      	movs	r2, #24
 80019aa:	2157      	movs	r1, #87	; 0x57
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fe25 	bl	80015fc <writeReg>
        break;
 80019b2:	e013      	b.n	80019dc <setVcselPulsePeriod+0xa0>

      case 14:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80019b4:	2230      	movs	r2, #48	; 0x30
 80019b6:	2157      	movs	r1, #87	; 0x57
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff fe1f 	bl	80015fc <writeReg>
        break;
 80019be:	e00d      	b.n	80019dc <setVcselPulsePeriod+0xa0>

      case 16:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80019c0:	2240      	movs	r2, #64	; 0x40
 80019c2:	2157      	movs	r1, #87	; 0x57
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff fe19 	bl	80015fc <writeReg>
        break;
 80019ca:	e007      	b.n	80019dc <setVcselPulsePeriod+0xa0>

      case 18:
        writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80019cc:	2250      	movs	r2, #80	; 0x50
 80019ce:	2157      	movs	r1, #87	; 0x57
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fe13 	bl	80015fc <writeReg>
        break;
 80019d6:	e001      	b.n	80019dc <setVcselPulsePeriod+0xa0>

      default:
        // invalid period
        return false;
 80019d8:	2300      	movs	r3, #0
 80019da:	e123      	b.n	8001c24 <setVcselPulsePeriod+0x2e8>
    }
    writeReg(lidar,PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 80019dc:	2208      	movs	r2, #8
 80019de:	2156      	movs	r1, #86	; 0x56
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff fe0b 	bl	80015fc <writeReg>

    // apply new VCSEL period
    writeReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80019e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ea:	461a      	mov	r2, r3
 80019ec:	2150      	movs	r1, #80	; 0x50
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff fe04 	bl	80015fc <writeReg>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

    uint16_t new_pre_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	78ba      	ldrb	r2, [r7, #2]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fb96 	bl	800212c <timeoutMicrosecondsToMclks>
 8001a00:	4603      	mov	r3, r0
    uint16_t new_pre_range_timeout_mclks =
 8001a02:	857b      	strh	r3, [r7, #42]	; 0x2a

    writeReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001a04:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fb45 	bl	8002096 <encodeTimeout>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	461a      	mov	r2, r3
 8001a10:	2151      	movs	r1, #81	; 0x51
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fe0a 	bl	800162c <writeReg16Bit>

    // set_sequence_step_timeout() begin
    // (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

    uint16_t new_msrc_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	78ba      	ldrb	r2, [r7, #2]
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fb84 	bl	800212c <timeoutMicrosecondsToMclks>
 8001a24:	4603      	mov	r3, r0
    uint16_t new_msrc_timeout_mclks =
 8001a26:	853b      	strh	r3, [r7, #40]	; 0x28

    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 8001a28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2e:	d804      	bhi.n	8001a3a <setVcselPulsePeriod+0xfe>
      (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8001a30:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a32:	b2db      	uxtb	r3, r3
    writeReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP,
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	e000      	b.n	8001a3c <setVcselPulsePeriod+0x100>
 8001a3a:	23ff      	movs	r3, #255	; 0xff
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2146      	movs	r1, #70	; 0x46
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fddb 	bl	80015fc <writeReg>
 8001a46:	e0cf      	b.n	8001be8 <setVcselPulsePeriod+0x2ac>

    // set_sequence_step_timeout() end
  }
  else if (type == VcselPeriodFinalRange)
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	f040 80ca 	bne.w	8001be4 <setVcselPulsePeriod+0x2a8>
  {
    switch (period_pclks)
 8001a50:	78bb      	ldrb	r3, [r7, #2]
 8001a52:	3b08      	subs	r3, #8
 8001a54:	2b06      	cmp	r3, #6
 8001a56:	f200 80a1 	bhi.w	8001b9c <setVcselPulsePeriod+0x260>
 8001a5a:	a201      	add	r2, pc, #4	; (adr r2, 8001a60 <setVcselPulsePeriod+0x124>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001a7d 	.word	0x08001a7d
 8001a64:	08001b9d 	.word	0x08001b9d
 8001a68:	08001ac5 	.word	0x08001ac5
 8001a6c:	08001b9d 	.word	0x08001b9d
 8001a70:	08001b0d 	.word	0x08001b0d
 8001a74:	08001b9d 	.word	0x08001b9d
 8001a78:	08001b55 	.word	0x08001b55
    {
      case 8:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	2148      	movs	r1, #72	; 0x48
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fdbb 	bl	80015fc <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001a86:	2208      	movs	r2, #8
 8001a88:	2147      	movs	r1, #71	; 0x47
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fdb6 	bl	80015fc <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 8001a90:	2202      	movs	r2, #2
 8001a92:	2132      	movs	r1, #50	; 0x32
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fdb1 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	2130      	movs	r1, #48	; 0x30
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff fdac 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	21ff      	movs	r1, #255	; 0xff
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fda7 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x30);
 8001aae:	2230      	movs	r2, #48	; 0x30
 8001ab0:	2130      	movs	r1, #48	; 0x30
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fda2 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	21ff      	movs	r1, #255	; 0xff
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f7ff fd9d 	bl	80015fc <writeReg>
        break;
 8001ac2:	e06d      	b.n	8001ba0 <setVcselPulsePeriod+0x264>

      case 10:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 8001ac4:	2228      	movs	r2, #40	; 0x28
 8001ac6:	2148      	movs	r1, #72	; 0x48
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f7ff fd97 	bl	80015fc <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001ace:	2208      	movs	r2, #8
 8001ad0:	2147      	movs	r1, #71	; 0x47
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fd92 	bl	80015fc <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001ad8:	2203      	movs	r2, #3
 8001ada:	2132      	movs	r1, #50	; 0x32
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff fd8d 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8001ae2:	2209      	movs	r2, #9
 8001ae4:	2130      	movs	r1, #48	; 0x30
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fd88 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001aec:	2201      	movs	r2, #1
 8001aee:	21ff      	movs	r1, #255	; 0xff
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fd83 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 8001af6:	2220      	movs	r2, #32
 8001af8:	2130      	movs	r1, #48	; 0x30
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff fd7e 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8001b00:	2200      	movs	r2, #0
 8001b02:	21ff      	movs	r1, #255	; 0xff
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff fd79 	bl	80015fc <writeReg>
        break;
 8001b0a:	e049      	b.n	8001ba0 <setVcselPulsePeriod+0x264>

      case 12:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 8001b0c:	2238      	movs	r2, #56	; 0x38
 8001b0e:	2148      	movs	r1, #72	; 0x48
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fd73 	bl	80015fc <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001b16:	2208      	movs	r2, #8
 8001b18:	2147      	movs	r1, #71	; 0x47
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff fd6e 	bl	80015fc <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001b20:	2203      	movs	r2, #3
 8001b22:	2132      	movs	r1, #50	; 0x32
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fd69 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	2130      	movs	r1, #48	; 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff fd64 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001b34:	2201      	movs	r2, #1
 8001b36:	21ff      	movs	r1, #255	; 0xff
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fd5f 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 8001b3e:	2220      	movs	r2, #32
 8001b40:	2130      	movs	r1, #48	; 0x30
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f7ff fd5a 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	21ff      	movs	r1, #255	; 0xff
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fd55 	bl	80015fc <writeReg>
        break;
 8001b52:	e025      	b.n	8001ba0 <setVcselPulsePeriod+0x264>

      case 14:
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8001b54:	2248      	movs	r2, #72	; 0x48
 8001b56:	2148      	movs	r1, #72	; 0x48
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff fd4f 	bl	80015fc <writeReg>
        writeReg(lidar,FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8001b5e:	2208      	movs	r2, #8
 8001b60:	2147      	movs	r1, #71	; 0x47
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff fd4a 	bl	80015fc <writeReg>
        writeReg(lidar,GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8001b68:	2203      	movs	r2, #3
 8001b6a:	2132      	movs	r1, #50	; 0x32
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fd45 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 8001b72:	2207      	movs	r2, #7
 8001b74:	2130      	movs	r1, #48	; 0x30
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fd40 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x01);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	21ff      	movs	r1, #255	; 0xff
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f7ff fd3b 	bl	80015fc <writeReg>
        writeReg(lidar,ALGO_PHASECAL_LIM, 0x20);
 8001b86:	2220      	movs	r2, #32
 8001b88:	2130      	movs	r1, #48	; 0x30
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff fd36 	bl	80015fc <writeReg>
        writeReg(lidar,0xFF, 0x00);
 8001b90:	2200      	movs	r2, #0
 8001b92:	21ff      	movs	r1, #255	; 0xff
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff fd31 	bl	80015fc <writeReg>
        break;
 8001b9a:	e001      	b.n	8001ba0 <setVcselPulsePeriod+0x264>

      default:
        // invalid period
        return false;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	e041      	b.n	8001c24 <setVcselPulsePeriod+0x2e8>
    }

    // apply new VCSEL period
    writeReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8001ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2170      	movs	r1, #112	; 0x70
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fd27 	bl	80015fc <writeReg>
    //  must be added. To do this both final and pre-range
    //  timeouts must be expressed in macro periods MClks
    //  because they have different vcsel periods."

    uint16_t new_final_range_timeout_mclks =
      timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	78ba      	ldrb	r2, [r7, #2]
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fab9 	bl	800212c <timeoutMicrosecondsToMclks>
 8001bba:	4603      	mov	r3, r0
    uint16_t new_final_range_timeout_mclks =
 8001bbc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (enables.pre_range)
 8001bbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <setVcselPulsePeriod+0x292>
    {
      new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 8001bc6:	89fa      	ldrh	r2, [r7, #14]
 8001bc8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bca:	4413      	add	r3, r2
 8001bcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    writeReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8001bce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fa60 	bl	8002096 <encodeTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	461a      	mov	r2, r3
 8001bda:	2171      	movs	r1, #113	; 0x71
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fd25 	bl	800162c <writeReg16Bit>
 8001be2:	e001      	b.n	8001be8 <setVcselPulsePeriod+0x2ac>
    // set_sequence_step_timeout end
  }
  else
  {
    // invalid type
    return false;
 8001be4:	2300      	movs	r3, #0
 8001be6:	e01d      	b.n	8001c24 <setVcselPulsePeriod+0x2e8>
  }

  // "Finally, the timing budget must be re-applied"

  setMeasurementTimingBudget(lidar,lidar->measurement_timing_budget_us);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4619      	mov	r1, r3
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fda4 	bl	800173c <setMeasurementTimingBudget>

  // "Perform the phase calibration. This is needed after changing on vcsel period."
  // VL53L0X_perform_phase_calibration() begin

  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff fd30 	bl	800165c <readReg>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001c02:	2202      	movs	r2, #2
 8001c04:	2101      	movs	r1, #1
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fcf8 	bl	80015fc <writeReg>
  performSingleRefCalibration(lidar,0x0);
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 faa6 	bl	8002160 <performSingleRefCalibration>
  writeReg(lidar,SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8001c14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c18:	461a      	mov	r2, r3
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fced 	bl	80015fc <writeReg>

  // VL53L0X_perform_phase_calibration() end

  return true;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3730      	adds	r7, #48	; 0x30
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <getVcselPulsePeriod>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t getVcselPulsePeriod(VL53L0X * lidar,vcselPeriodType type)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	70fb      	strb	r3, [r7, #3]
  if (type == VcselPeriodPreRange)
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <getVcselPulsePeriod+0x26>
  {
    return decodeVcselPeriod(readReg(lidar,PRE_RANGE_CONFIG_VCSEL_PERIOD));
 8001c3e:	2150      	movs	r1, #80	; 0x50
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fd0b 	bl	800165c <readReg>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 fae3 	bl	8002214 <decodeVcselPeriod>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	e00d      	b.n	8001c6e <getVcselPulsePeriod+0x42>
  }
  else if (type == VcselPeriodFinalRange)
 8001c52:	78fb      	ldrb	r3, [r7, #3]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d109      	bne.n	8001c6c <getVcselPulsePeriod+0x40>
  {
    return decodeVcselPeriod(readReg(lidar,FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8001c58:	2170      	movs	r1, #112	; 0x70
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff fcfe 	bl	800165c <readReg>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fad6 	bl	8002214 <decodeVcselPeriod>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	e000      	b.n	8001c6e <getVcselPulsePeriod+0x42>
  }
  else { return 255; }
 8001c6c:	23ff      	movs	r3, #255	; 0xff
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <readRangeContinuousMillimeters>:

// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
uint16_t readRangeContinuousMillimeters(VL53L0X * lidar)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b084      	sub	sp, #16
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
  startTimeout(lidar);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 faa1 	bl	80021c6 <startTimeout>

  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c84:	e00b      	b.n	8001c9e <readRangeContinuousMillimeters+0x28>
  {
    if (checkTimeoutExpired(lidar))
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 faab 	bl	80021e2 <checkTimeoutExpired>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d005      	beq.n	8001c9e <readRangeContinuousMillimeters+0x28>
    {
      lidar->did_timeout = true;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	711a      	strb	r2, [r3, #4]
      return 65535;
 8001c98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9c:	e01d      	b.n	8001cda <readRangeContinuousMillimeters+0x64>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001c9e:	2113      	movs	r1, #19
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fcdb 	bl	800165c <readReg>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ea      	beq.n	8001c86 <readRangeContinuousMillimeters+0x10>
  }


  // assumptions: Linearity Corrective Gain is 1000 (default);
  // fractional ranging is not enabled
  uint16_t range = readReg16Bit(lidar,RESULT_RANGE_STATUS + 10);
 8001cb0:	211e      	movs	r1, #30
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fcee 	bl	8001694 <readReg16Bit>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	81fb      	strh	r3, [r7, #14]

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	210b      	movs	r1, #11
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fc9b 	bl	80015fc <writeReg>
  if (timeoutOccurred(lidar))
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f869 	bl	8001d9e <timeoutOccurred>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <readRangeContinuousMillimeters+0x62>
    {
      range = 0x1FFE;
 8001cd2:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 8001cd6:	81fb      	strh	r3, [r7, #14]
    }

  return range;
 8001cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <readRangeSingleMillimeters>:

// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
uint16_t readRangeSingleMillimeters(VL53L0X * lidar)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  writeReg(lidar,0x80, 0x01);
 8001cea:	2201      	movs	r2, #1
 8001cec:	2180      	movs	r1, #128	; 0x80
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fc84 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	21ff      	movs	r1, #255	; 0xff
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fc7f 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2100      	movs	r1, #0
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff fc7a 	bl	80015fc <writeReg>
  writeReg(lidar,0x91, lidar->stop_variable);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7a1b      	ldrb	r3, [r3, #8]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2191      	movs	r1, #145	; 0x91
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fc73 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001d16:	2201      	movs	r2, #1
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fc6e 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x00);
 8001d20:	2200      	movs	r2, #0
 8001d22:	21ff      	movs	r1, #255	; 0xff
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff fc69 	bl	80015fc <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff fc64 	bl	80015fc <writeReg>

  writeReg(lidar,SYSRANGE_START, 0x01);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2100      	movs	r1, #0
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff fc5f 	bl	80015fc <writeReg>

  // "Wait until start bit has been cleared"
  startTimeout(lidar);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fa41 	bl	80021c6 <startTimeout>
  while (readReg(lidar,SYSRANGE_START) & 0x01)
 8001d44:	e00b      	b.n	8001d5e <readRangeSingleMillimeters+0x7c>
  {
    if (checkTimeoutExpired(lidar))
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 fa4b 	bl	80021e2 <checkTimeoutExpired>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d005      	beq.n	8001d5e <readRangeSingleMillimeters+0x7c>
    {
      lidar->did_timeout = true;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	711a      	strb	r2, [r3, #4]
      return 65535;
 8001d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5c:	e00c      	b.n	8001d78 <readRangeSingleMillimeters+0x96>
  while (readReg(lidar,SYSRANGE_START) & 0x01)
 8001d5e:	2100      	movs	r1, #0
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7ff fc7b 	bl	800165c <readReg>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ea      	bne.n	8001d46 <readRangeSingleMillimeters+0x64>
    }
  }

  return readRangeContinuousMillimeters(lidar);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff80 	bl	8001c76 <readRangeContinuousMillimeters>
 8001d76:	4603      	mov	r3, r0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <setTimeout>:

void setTimeout(VL53L0X * lidar,uint16_t timeout)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
	lidar->io_timeout = timeout;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	805a      	strh	r2, [r3, #2]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <timeoutOccurred>:
}

// Did a timeout occur in one of the read functions since the last call to
// timeoutOccurred()?
bool timeoutOccurred(VL53L0X * lidar)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  bool tmp = lidar->did_timeout;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  lidar->did_timeout = false;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	711a      	strb	r2, [r3, #4]
  return tmp;
 8001db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(VL53L0X * lidar,uint8_t * count, bool * type_is_aperture)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint8_t tmp;

  writeReg(lidar,0x80, 0x01);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f7ff fc13 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	21ff      	movs	r1, #255	; 0xff
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff fc0e 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x00);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	68f8      	ldr	r0, [r7, #12]
 8001de6:	f7ff fc09 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x06);
 8001dea:	2206      	movs	r2, #6
 8001dec:	21ff      	movs	r1, #255	; 0xff
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff fc04 	bl	80015fc <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83) | 0x04);
 8001df4:	2183      	movs	r1, #131	; 0x83
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f7ff fc30 	bl	800165c <readReg>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	2183      	movs	r1, #131	; 0x83
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f7ff fbf7 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x07);
 8001e0e:	2207      	movs	r2, #7
 8001e10:	21ff      	movs	r1, #255	; 0xff
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fbf2 	bl	80015fc <writeReg>
  writeReg(lidar,0x81, 0x01);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2181      	movs	r1, #129	; 0x81
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7ff fbed 	bl	80015fc <writeReg>

  writeReg(lidar,0x80, 0x01);
 8001e22:	2201      	movs	r2, #1
 8001e24:	2180      	movs	r1, #128	; 0x80
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f7ff fbe8 	bl	80015fc <writeReg>

  writeReg(lidar,0x94, 0x6b);
 8001e2c:	226b      	movs	r2, #107	; 0x6b
 8001e2e:	2194      	movs	r1, #148	; 0x94
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f7ff fbe3 	bl	80015fc <writeReg>
  writeReg(lidar,0x83, 0x00);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2183      	movs	r1, #131	; 0x83
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff fbde 	bl	80015fc <writeReg>
  startTimeout(lidar);
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 f9c0 	bl	80021c6 <startTimeout>
  while (readReg(lidar,0x83) == 0x00)
 8001e46:	e007      	b.n	8001e58 <getSpadInfo+0x98>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 f9ca 	bl	80021e2 <checkTimeoutExpired>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <getSpadInfo+0x98>
 8001e54:	2300      	movs	r3, #0
 8001e56:	e04f      	b.n	8001ef8 <getSpadInfo+0x138>
  while (readReg(lidar,0x83) == 0x00)
 8001e58:	2183      	movs	r1, #131	; 0x83
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f7ff fbfe 	bl	800165c <readReg>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d0f0      	beq.n	8001e48 <getSpadInfo+0x88>
  }
  writeReg(lidar,0x83, 0x01);
 8001e66:	2201      	movs	r2, #1
 8001e68:	2183      	movs	r1, #131	; 0x83
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff fbc6 	bl	80015fc <writeReg>
  tmp = readReg(lidar,0x92);
 8001e70:	2192      	movs	r1, #146	; 0x92
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff fbf2 	bl	800165c <readReg>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	75fb      	strb	r3, [r7, #23]

  *count = tmp & 0x7f;
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	701a      	strb	r2, [r3, #0]
  *type_is_aperture = (tmp >> 7) & 0x01;
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	09db      	lsrs	r3, r3, #7
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf14      	ite	ne
 8001e96:	2301      	movne	r3, #1
 8001e98:	2300      	moveq	r3, #0
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	701a      	strb	r2, [r3, #0]

  writeReg(lidar,0x81, 0x00);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2181      	movs	r1, #129	; 0x81
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f7ff fba9 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x06);
 8001eaa:	2206      	movs	r2, #6
 8001eac:	21ff      	movs	r1, #255	; 0xff
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fba4 	bl	80015fc <writeReg>
  writeReg(lidar,0x83, readReg(lidar,0x83)  & ~0x04);
 8001eb4:	2183      	movs	r1, #131	; 0x83
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fbd0 	bl	800165c <readReg>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2183      	movs	r1, #131	; 0x83
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f7ff fb97 	bl	80015fc <writeReg>
  writeReg(lidar,0xFF, 0x01);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	21ff      	movs	r1, #255	; 0xff
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f7ff fb92 	bl	80015fc <writeReg>
  writeReg(lidar,0x00, 0x01);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2100      	movs	r1, #0
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff fb8d 	bl	80015fc <writeReg>

  writeReg(lidar,0xFF, 0x00);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	21ff      	movs	r1, #255	; 0xff
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fb88 	bl	80015fc <writeReg>
  writeReg(lidar,0x80, 0x00);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fb83 	bl	80015fc <writeReg>

  return true;
 8001ef6:	2301      	movs	r3, #1
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <getSequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(VL53L0X * lidar,SequenceStepEnables * enables)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  uint8_t sequence_config = readReg(lidar,SYSTEM_SEQUENCE_CONFIG);
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fba5 	bl	800165c <readReg>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73fb      	strb	r3, [r7, #15]

  enables->tcc          = (sequence_config >> 4) & 0x1;
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	701a      	strb	r2, [r3, #0]
  enables->dss          = (sequence_config >> 3) & 0x1;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	709a      	strb	r2, [r3, #2]
  enables->msrc         = (sequence_config >> 2) & 0x1;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	089b      	lsrs	r3, r3, #2
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	bf14      	ite	ne
 8001f54:	2301      	movne	r3, #1
 8001f56:	2300      	moveq	r3, #0
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	705a      	strb	r2, [r3, #1]
  enables->pre_range    = (sequence_config >> 6) & 0x1;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	099b      	lsrs	r3, r3, #6
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	bf14      	ite	ne
 8001f6c:	2301      	movne	r3, #1
 8001f6e:	2300      	moveq	r3, #0
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	70da      	strb	r2, [r3, #3]
  enables->final_range  = (sequence_config >> 7) & 0x1;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	09db      	lsrs	r3, r3, #7
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	711a      	strb	r2, [r3, #4]
}
 8001f8e:	bf00      	nop
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(VL53L0X * lidar,SequenceStepEnables const * enables, SequenceStepTimeouts * timeouts)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b084      	sub	sp, #16
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	60f8      	str	r0, [r7, #12]
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
  timeouts->pre_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodPreRange);
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f7ff fe41 	bl	8001c2c <getVcselPulsePeriod>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	801a      	strh	r2, [r3, #0]

  timeouts->msrc_dss_tcc_mclks = readReg(lidar,MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 8001fb2:	2146      	movs	r1, #70	; 0x46
 8001fb4:	68f8      	ldr	r0, [r7, #12]
 8001fb6:	f7ff fb51 	bl	800165c <readReg>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	809a      	strh	r2, [r3, #4]
  timeouts->msrc_dss_tcc_us =
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	889a      	ldrh	r2, [r3, #4]
                               timeouts->pre_range_vcsel_period_pclks);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	f000 f88c 	bl	80020f0 <timeoutMclksToMicroseconds>
 8001fd8:	4602      	mov	r2, r0
  timeouts->msrc_dss_tcc_us =
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]

  timeouts->pre_range_mclks =
    decodeTimeout(readReg16Bit(lidar,PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001fde:	2151      	movs	r1, #81	; 0x51
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff fb57 	bl	8001694 <readReg16Bit>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f840 	bl	800206e <decodeTimeout>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	461a      	mov	r2, r3
  timeouts->pre_range_mclks =
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	80da      	strh	r2, [r3, #6]
  timeouts->pre_range_us =
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	88da      	ldrh	r2, [r3, #6]
                               timeouts->pre_range_vcsel_period_pclks);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	881b      	ldrh	r3, [r3, #0]
    timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	4619      	mov	r1, r3
 8002002:	4610      	mov	r0, r2
 8002004:	f000 f874 	bl	80020f0 <timeoutMclksToMicroseconds>
 8002008:	4602      	mov	r2, r0
  timeouts->pre_range_us =
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	611a      	str	r2, [r3, #16]

  timeouts->final_range_vcsel_period_pclks = getVcselPulsePeriod(lidar,VcselPeriodFinalRange);
 800200e:	2101      	movs	r1, #1
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7ff fe0b 	bl	8001c2c <getVcselPulsePeriod>
 8002016:	4603      	mov	r3, r0
 8002018:	b29a      	uxth	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	805a      	strh	r2, [r3, #2]

  timeouts->final_range_mclks =
    decodeTimeout(readReg16Bit(lidar,FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 800201e:	2171      	movs	r1, #113	; 0x71
 8002020:	68f8      	ldr	r0, [r7, #12]
 8002022:	f7ff fb37 	bl	8001694 <readReg16Bit>
 8002026:	4603      	mov	r3, r0
 8002028:	4618      	mov	r0, r3
 800202a:	f000 f820 	bl	800206e <decodeTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
  timeouts->final_range_mclks =
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	811a      	strh	r2, [r3, #8]

  if (enables->pre_range)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	78db      	ldrb	r3, [r3, #3]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d007      	beq.n	800204e <getSequenceStepTimeouts+0xb8>
  {
    timeouts->final_range_mclks -= timeouts->pre_range_mclks;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	891a      	ldrh	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	88db      	ldrh	r3, [r3, #6]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29a      	uxth	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	811a      	strh	r2, [r3, #8]
  }

  timeouts->final_range_us =
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	891a      	ldrh	r2, [r3, #8]
                               timeouts->final_range_vcsel_period_pclks);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	885b      	ldrh	r3, [r3, #2]
    timeoutMclksToMicroseconds(timeouts->final_range_mclks,
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4619      	mov	r1, r3
 800205a:	4610      	mov	r0, r2
 800205c:	f000 f848 	bl	80020f0 <timeoutMclksToMicroseconds>
 8002060:	4602      	mov	r2, r0
  timeouts->final_range_us =
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	615a      	str	r2, [r3, #20]
}
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <decodeTimeout>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t decodeTimeout(uint16_t reg_val)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	4603      	mov	r3, r0
 8002076:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"
  return (uint16_t)((reg_val & 0x00FF) <<
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	b2db      	uxtb	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	0a12      	lsrs	r2, r2, #8
 8002080:	b292      	uxth	r2, r2
  return (uint16_t)((reg_val & 0x00FF) <<
 8002082:	4093      	lsls	r3, r2
 8002084:	b29b      	uxth	r3, r3
         (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8002086:	3301      	adds	r3, #1
 8002088:	b29b      	uxth	r3, r3
}
 800208a:	4618      	mov	r0, r3
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <encodeTimeout>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t encodeTimeout(uint16_t timeout_mclks)
{
 8002096:	b480      	push	{r7}
 8002098:	b085      	sub	sp, #20
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	80fb      	strh	r3, [r7, #6]
  // format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  uint16_t ms_byte = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	817b      	strh	r3, [r7, #10]

  if (timeout_mclks > 0)
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d018      	beq.n	80020e0 <encodeTimeout+0x4a>
  {
    ls_byte = timeout_mclks - 1;
 80020ae:	88fb      	ldrh	r3, [r7, #6]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	60fb      	str	r3, [r7, #12]

    while ((ls_byte & 0xFFFFFF00) > 0)
 80020b4:	e005      	b.n	80020c2 <encodeTimeout+0x2c>
    {
      ls_byte >>= 1;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	085b      	lsrs	r3, r3, #1
 80020ba:	60fb      	str	r3, [r7, #12]
      ms_byte++;
 80020bc:	897b      	ldrh	r3, [r7, #10]
 80020be:	3301      	adds	r3, #1
 80020c0:	817b      	strh	r3, [r7, #10]
    while ((ls_byte & 0xFFFFFF00) > 0)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f4      	bne.n	80020b6 <encodeTimeout+0x20>
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 80020cc:	897b      	ldrh	r3, [r7, #10]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b29b      	uxth	r3, r3
 80020de:	e000      	b.n	80020e2 <encodeTimeout+0x4c>
  }
  else { return 0; }
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <timeoutMclksToMicroseconds>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	80fb      	strh	r3, [r7, #6]
 80020fc:	4613      	mov	r3, r2
 80020fe:	717b      	strb	r3, [r7, #5]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002100:	797b      	ldrb	r3, [r7, #5]
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f8a6 	bl	8002254 <calcMacroPeriod>
 8002108:	60f8      	str	r0, [r7, #12]

  return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	fb02 f203 	mul.w	r2, r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	4413      	add	r3, r2
 8002118:	4a03      	ldr	r2, [pc, #12]	; (8002128 <timeoutMclksToMicroseconds+0x38>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	099b      	lsrs	r3, r3, #6
}
 8002120:	4618      	mov	r0, r3
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	10624dd3 	.word	0x10624dd3

0800212c <timeoutMicrosecondsToMclks>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	4618      	mov	r0, r3
 800213c:	f000 f88a 	bl	8002254 <calcMacroPeriod>
 8002140:	60f8      	str	r0, [r7, #12]

  return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002148:	fb02 f203 	mul.w	r2, r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	085b      	lsrs	r3, r3, #1
 8002150:	441a      	add	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(VL53L0X * lidar,uint8_t vhv_init_byte)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	70fb      	strb	r3, [r7, #3]
  writeReg(lidar,SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	2100      	movs	r1, #0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fa3f 	bl	80015fc <writeReg>

  startTimeout(lidar);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 f821 	bl	80021c6 <startTimeout>
  
  
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002184:	e007      	b.n	8002196 <performSingleRefCalibration+0x36>
  {
    if (checkTimeoutExpired(lidar)) { return false; }
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f82b 	bl	80021e2 <checkTimeoutExpired>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <performSingleRefCalibration+0x36>
 8002192:	2300      	movs	r3, #0
 8002194:	e013      	b.n	80021be <performSingleRefCalibration+0x5e>
  while ((readReg(lidar,RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8002196:	2113      	movs	r1, #19
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff fa5f 	bl	800165c <readReg>
 800219e:	4603      	mov	r3, r0
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0ee      	beq.n	8002186 <performSingleRefCalibration+0x26>
  }

  writeReg(lidar,SYSTEM_INTERRUPT_CLEAR, 0x01);
 80021a8:	2201      	movs	r2, #1
 80021aa:	210b      	movs	r1, #11
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f7ff fa25 	bl	80015fc <writeReg>

  writeReg(lidar,SYSRANGE_START, 0x00);
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fa20 	bl	80015fc <writeReg>

  return true;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <startTimeout>:


void startTimeout(VL53L0X * lidar)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
	lidar->timeout_start_ms = HAL_GetTick();
 80021ce:	f001 fc37 	bl	8003a40 <HAL_GetTick>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	80da      	strh	r2, [r3, #6]
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <checkTimeoutExpired>:

// Check if timeout is enabled (set to nonzero value) and has expired
bool checkTimeoutExpired(VL53L0X * lidar)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	if (lidar->io_timeout > 0 && (HAL_GetTick() - lidar->timeout_start_ms) > lidar->io_timeout)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <checkTimeoutExpired+0x28>
 80021f2:	f001 fc25 	bl	8003a40 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	88db      	ldrh	r3, [r3, #6]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	8852      	ldrh	r2, [r2, #2]
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <checkTimeoutExpired+0x28>
		{
			return true;
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <checkTimeoutExpired+0x2a>
		}
	else
	{
		return false;
 800220a:	2300      	movs	r3, #0
	}
}
 800220c:	4618      	mov	r0, r3
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <decodeVcselPeriod>:

// Decode VCSEL (vertical cavity surface emitting laser) pulse period in PCLKs
// from register value
// based on VL53L0X_decode_vcsel_period()
uint8_t decodeVcselPeriod(uint8_t reg_val)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
	return (((reg_val) + 1) << 1);
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	3301      	adds	r3, #1
 8002222:	b2db      	uxtb	r3, r3
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <encodeVcselPeriod>:

// Encode VCSEL pulse period register value from period in PCLKs
// based on VL53L0X_encode_vcsel_period()
uint8_t encodeVcselPeriod(uint8_t period_pclks)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	71fb      	strb	r3, [r7, #7]
	return (((period_pclks) >> 1) - 1);
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b2db      	uxtb	r3, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <calcMacroPeriod>:

// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
uint32_t calcMacroPeriod(uint8_t vcsel_period_pclks)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	return ((((uint32_t)2304 * (vcsel_period_pclks) * 1655) + 500) / 1000);
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a07      	ldr	r2, [pc, #28]	; (8002280 <calcMacroPeriod+0x2c>)
 8002262:	fb02 f303 	mul.w	r3, r2, r3
 8002266:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800226a:	4a06      	ldr	r2, [pc, #24]	; (8002284 <calcMacroPeriod+0x30>)
 800226c:	fba2 2303 	umull	r2, r3, r2, r3
 8002270:	099b      	lsrs	r3, r3, #6
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	003a2f00 	.word	0x003a2f00
 8002284:	10624dd3 	.word	0x10624dd3

08002288 <HX711_Init>:
#include "hx711.h"
#include "main.h"

void HX711_Init(HX711 data)
{
 8002288:	b084      	sub	sp, #16
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	f107 0e20 	add.w	lr, r7, #32
 8002294:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = data.pinSck;
 8002298:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800229a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioSck, &GPIO_InitStruct);
 80022a8:	6a3b      	ldr	r3, [r7, #32]
 80022aa:	1d3a      	adds	r2, r7, #4
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f002 fefe 	bl	80050b0 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = data.pinData;
 80022b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80022b6:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022bc:	2301      	movs	r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(data.gpioData, &GPIO_InitStruct);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	1d3a      	adds	r2, r7, #4
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f002 fef0 	bl	80050b0 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80022d4:	2201      	movs	r2, #1
 80022d6:	4618      	mov	r0, r3
 80022d8:	f003 f87c 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80022dc:	2032      	movs	r0, #50	; 0x32
 80022de:	f001 fbbb 	bl	8003a58 <HAL_Delay>
	HAL_GPIO_WritePin(data.gpioData, data.pinSck, GPIO_PIN_RESET);
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80022e6:	2200      	movs	r2, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f873 	bl	80053d4 <HAL_GPIO_WritePin>

}
 80022ee:	bf00      	nop
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022f8:	b004      	add	sp, #16
 80022fa:	4770      	bx	lr

080022fc <HX711_Average_Value>:

int HX711_Average_Value(HX711 data, uint8_t times)
{
 80022fc:	b084      	sub	sp, #16
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af02      	add	r7, sp, #8
 8002304:	f107 0e10 	add.w	lr, r7, #16
 8002308:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    int sum = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	e00d      	b.n	8002332 <HX711_Average_Value+0x36>
    {
        sum += HX711_Value(data);
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f107 0310 	add.w	r3, r7, #16
 800231e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002320:	f000 f818 	bl	8002354 <HX711_Value>
 8002324:	4602      	mov	r2, r0
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < times; i++)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	603b      	str	r3, [r7, #0]
 8002332:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	dcec      	bgt.n	8002316 <HX711_Average_Value+0x1a>
    }

    return sum / times;
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002350:	b004      	add	sp, #16
 8002352:	4770      	bx	lr

08002354 <HX711_Value>:

int HX711_Value(HX711 data)
{
 8002354:	b084      	sub	sp, #16
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	f107 0e10 	add.w	lr, r7, #16
 8002360:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
    int buffer;
    buffer = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	607b      	str	r3, [r7, #4]

    while (HAL_GPIO_ReadPin(data.gpioData, data.pinData)==1)
 8002368:	bf00      	nop
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	8b7a      	ldrh	r2, [r7, #26]
 800236e:	4611      	mov	r1, r2
 8002370:	4618      	mov	r0, r3
 8002372:	f003 f817 	bl	80053a4 <HAL_GPIO_ReadPin>
 8002376:	4603      	mov	r3, r0
 8002378:	2b01      	cmp	r3, #1
 800237a:	d0f6      	beq.n	800236a <HX711_Value+0x16>
    ;

    for (uint8_t i = 0; i < 24; i++)
 800237c:	2300      	movs	r3, #0
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	e01d      	b.n	80023be <HX711_Value+0x6a>
    {
    	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	8b39      	ldrh	r1, [r7, #24]
 8002386:	2201      	movs	r2, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f003 f823 	bl	80053d4 <HAL_GPIO_WritePin>

        buffer = buffer << 1 ;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	607b      	str	r3, [r7, #4]

        if (HAL_GPIO_ReadPin(data.gpioData, data.pinData))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	8b7a      	ldrh	r2, [r7, #26]
 8002398:	4611      	mov	r1, r2
 800239a:	4618      	mov	r0, r3
 800239c:	f003 f802 	bl	80053a4 <HAL_GPIO_ReadPin>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d002      	beq.n	80023ac <HX711_Value+0x58>
        {
            buffer ++;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	3301      	adds	r3, #1
 80023aa:	607b      	str	r3, [r7, #4]
        }

        HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	8b39      	ldrh	r1, [r7, #24]
 80023b0:	2200      	movs	r2, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f80e 	bl	80053d4 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 24; i++)
 80023b8:	78fb      	ldrb	r3, [r7, #3]
 80023ba:	3301      	adds	r3, #1
 80023bc:	70fb      	strb	r3, [r7, #3]
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	2b17      	cmp	r3, #23
 80023c2:	d9de      	bls.n	8002382 <HX711_Value+0x2e>
    }

    HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_SET);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	8b39      	ldrh	r1, [r7, #24]
 80023c8:	2201      	movs	r2, #1
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 f802 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data.gpioSck, data.pinSck, GPIO_PIN_RESET);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	8b39      	ldrh	r1, [r7, #24]
 80023d4:	2200      	movs	r2, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f002 fffc 	bl	80053d4 <HAL_GPIO_WritePin>

    return buffer;
 80023dc:	687b      	ldr	r3, [r7, #4]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023e8:	b004      	add	sp, #16
 80023ea:	4770      	bx	lr

080023ec <HX711_Tare>:

HX711 HX711_Tare(HX711 data, uint8_t times)
{
 80023ec:	b084      	sub	sp, #16
 80023ee:	b5b0      	push	{r4, r5, r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af02      	add	r7, sp, #8
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80023fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    int sum = HX711_Average_Value(data, times);
 80023fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800240e:	f7ff ff75 	bl	80022fc <HX711_Average_Value>
 8002412:	60f8      	str	r0, [r7, #12]
    data.offset = sum;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
    return data;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	461d      	mov	r5, r3
 800241c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8002420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	602b      	str	r3, [r5, #0]
}
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002432:	b004      	add	sp, #16
 8002434:	4770      	bx	lr
	...

08002438 <PrintMessage>:
  * Uzenet kiirasa consolera UART2 keresztul
  *
  * @param char message[]
  */
  void PrintMessage(char message[])
  {
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2,message, strlen(message), HAL_MAX_DELAY);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f7fd fecd 	bl	80001e0 <strlen>
 8002446:	4603      	mov	r3, r0
 8002448:	b29a      	uxth	r2, r3
 800244a:	f04f 33ff 	mov.w	r3, #4294967295
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4803      	ldr	r0, [pc, #12]	; (8002460 <PrintMessage+0x28>)
 8002452:	f006 fa4b 	bl	80088ec <HAL_UART_Transmit>
  }
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000468 	.word	0x20000468

08002464 <PrintNumber>:
   * Szam kiirasa consolera UART2 keresztul
   *
   * @param uint16_t number
   */
  void PrintNumber(uint16_t number)
    {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	80fb      	strh	r3, [r7, #6]
	  char converted_number[6];
	  sprintf(converted_number, "%d", number);
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	f107 0308 	add.w	r3, r7, #8
 8002474:	4906      	ldr	r1, [pc, #24]	; (8002490 <PrintNumber+0x2c>)
 8002476:	4618      	mov	r0, r3
 8002478:	f007 fb16 	bl	8009aa8 <siprintf>
  	  PrintMessage(converted_number);
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ffd9 	bl	8002438 <PrintMessage>
    }
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	0800acd8 	.word	0x0800acd8

08002494 <PrintNewLine>:

  /**
   * Uj sor kiirasa consolera UART2 keresztul
   */
  void PrintNewLine()
  {
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	  HAL_UART_Transmit(&huart2, (uint8_t*)newLine, sizeof(newLine), HAL_MAX_DELAY);
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	2203      	movs	r2, #3
 800249e:	4903      	ldr	r1, [pc, #12]	; (80024ac <PrintNewLine+0x18>)
 80024a0:	4803      	ldr	r0, [pc, #12]	; (80024b0 <PrintNewLine+0x1c>)
 80024a2:	f006 fa23 	bl	80088ec <HAL_UART_Transmit>
  }
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000000 	.word	0x20000000
 80024b0:	20000468 	.word	0x20000468

080024b4 <getTime>:

  /**
   * RTC ido lekerdezese
   */
  void getTime()
  {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80024b8:	2200      	movs	r2, #0
 80024ba:	4905      	ldr	r1, [pc, #20]	; (80024d0 <getTime+0x1c>)
 80024bc:	4805      	ldr	r0, [pc, #20]	; (80024d4 <getTime+0x20>)
 80024be:	f005 f9c2 	bl	8007846 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80024c2:	2200      	movs	r2, #0
 80024c4:	4904      	ldr	r1, [pc, #16]	; (80024d8 <getTime+0x24>)
 80024c6:	4803      	ldr	r0, [pc, #12]	; (80024d4 <getTime+0x20>)
 80024c8:	f005 fa19 	bl	80078fe <HAL_RTC_GetDate>
  }
 80024cc:	bf00      	nop
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	2000036c 	.word	0x2000036c
 80024d4:	20000380 	.word	0x20000380
 80024d8:	2000043c 	.word	0x2000043c

080024dc <initLaserDistanceSensor>:

  /**
   * Laser distance sensor inicializalasa
   */
  void initLaserDistanceSensor()
  {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	  setup_VL53L0X(&sensor1);
 80024e0:	481f      	ldr	r0, [pc, #124]	; (8002560 <initLaserDistanceSensor+0x84>)
 80024e2:	f7fe fd9c 	bl	800101e <setup_VL53L0X>
	  HAL_GPIO_WritePin(LASER_DISTANCE_XSHUT_GPIO_Port, LASER_DISTANCE_XSHUT_Pin, GPIO_PIN_RESET);
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ec:	481d      	ldr	r0, [pc, #116]	; (8002564 <initLaserDistanceSensor+0x88>)
 80024ee:	f002 ff71 	bl	80053d4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80024f2:	2064      	movs	r0, #100	; 0x64
 80024f4:	f001 fab0 	bl	8003a58 <HAL_Delay>

	  HAL_GPIO_WritePin(LASER_DISTANCE_XSHUT_GPIO_Port, LASER_DISTANCE_XSHUT_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024fe:	4819      	ldr	r0, [pc, #100]	; (8002564 <initLaserDistanceSensor+0x88>)
 8002500:	f002 ff68 	bl	80053d4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8002504:	2064      	movs	r0, #100	; 0x64
 8002506:	f001 faa7 	bl	8003a58 <HAL_Delay>
	  if(!init(&sensor1,true))
 800250a:	2101      	movs	r1, #1
 800250c:	4814      	ldr	r0, [pc, #80]	; (8002560 <initLaserDistanceSensor+0x84>)
 800250e:	f7fe fd99 	bl	8001044 <init>
 8002512:	4603      	mov	r3, r0
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <initLaserDistanceSensor+0x4e>
	  {
			  PrintMessage("Laser Distance sensor inicializalas sikertelen");
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <initLaserDistanceSensor+0x8c>)
 8002520:	f7ff ff8a 	bl	8002438 <PrintMessage>
			  PrintNewLine();
 8002524:	f7ff ffb6 	bl	8002494 <PrintNewLine>
 8002528:	e004      	b.n	8002534 <initLaserDistanceSensor+0x58>
	  }
	  else
	  {
		  PrintMessage("Laser Distance sensor inicializalas sikeres");
 800252a:	4810      	ldr	r0, [pc, #64]	; (800256c <initLaserDistanceSensor+0x90>)
 800252c:	f7ff ff84 	bl	8002438 <PrintMessage>
		  PrintNewLine();
 8002530:	f7ff ffb0 	bl	8002494 <PrintNewLine>
	  }
	  setTimeout(&sensor1,500);
 8002534:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002538:	4809      	ldr	r0, [pc, #36]	; (8002560 <initLaserDistanceSensor+0x84>)
 800253a:	f7ff fc21 	bl	8001d80 <setTimeout>

	  setVcselPulsePeriod(&sensor1,VcselPeriodPreRange, 18);
 800253e:	2212      	movs	r2, #18
 8002540:	2100      	movs	r1, #0
 8002542:	4807      	ldr	r0, [pc, #28]	; (8002560 <initLaserDistanceSensor+0x84>)
 8002544:	f7ff f9fa 	bl	800193c <setVcselPulsePeriod>
	  setVcselPulsePeriod(&sensor1,VcselPeriodFinalRange, 14);
 8002548:	220e      	movs	r2, #14
 800254a:	2101      	movs	r1, #1
 800254c:	4804      	ldr	r0, [pc, #16]	; (8002560 <initLaserDistanceSensor+0x84>)
 800254e:	f7ff f9f5 	bl	800193c <setVcselPulsePeriod>
	  setMeasurementTimingBudget(&sensor1,200000);
 8002552:	4907      	ldr	r1, [pc, #28]	; (8002570 <initLaserDistanceSensor+0x94>)
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <initLaserDistanceSensor+0x84>)
 8002556:	f7ff f8f1 	bl	800173c <setMeasurementTimingBudget>
  }
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000454 	.word	0x20000454
 8002564:	48000400 	.word	0x48000400
 8002568:	0800acdc 	.word	0x0800acdc
 800256c:	0800ad0c 	.word	0x0800ad0c
 8002570:	00030d40 	.word	0x00030d40

08002574 <readLaserDistanceValue>:

  /**
   * Laser distance sensor ertek beolvasas
   */
  void readLaserDistanceValue()
  {
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	  sensor_values.laser_sensor_distance = readRangeSingleMillimeters(&sensor1);
 8002578:	4804      	ldr	r0, [pc, #16]	; (800258c <readLaserDistanceValue+0x18>)
 800257a:	f7ff fbb2 	bl	8001ce2 <readRangeSingleMillimeters>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b03      	ldr	r3, [pc, #12]	; (8002590 <readLaserDistanceValue+0x1c>)
 8002584:	801a      	strh	r2, [r3, #0]
  }
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000454 	.word	0x20000454
 8002590:	20000224 	.word	0x20000224

08002594 <ultraSonicDisctanceRead>:

  /**
   * Ultrasonic distance sensor ertek beolvasas
   */
  void ultraSonicDisctanceRead(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(ULTRA_SONIC_TRG_GPIO_Port, ULTRA_SONIC_TRG_Pin, GPIO_PIN_SET);
 8002598:	2201      	movs	r2, #1
 800259a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800259e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a2:	f002 ff17 	bl	80053d4 <HAL_GPIO_WritePin>
  	HAL_Delay(100);
 80025a6:	2064      	movs	r0, #100	; 0x64
 80025a8:	f001 fa56 	bl	8003a58 <HAL_Delay>
  	HAL_GPIO_WritePin(ULTRA_SONIC_TRG_GPIO_Port, ULTRA_SONIC_TRG_Pin, GPIO_PIN_RESET);
 80025ac:	2200      	movs	r2, #0
 80025ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025b6:	f002 ff0d 	bl	80053d4 <HAL_GPIO_WritePin>
  	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC2);
 80025ba:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <ultraSonicDisctanceRead+0x3c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a04      	ldr	r2, [pc, #16]	; (80025d0 <ultraSonicDisctanceRead+0x3c>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	68d2      	ldr	r2, [r2, #12]
 80025c4:	f042 0204 	orr.w	r2, r2, #4
 80025c8:	60da      	str	r2, [r3, #12]
  }
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	200003f0 	.word	0x200003f0

080025d4 <measureTemperatureAndHumidity>:

  /**
   * Homerseklet es paratartalom ertek beolvasas
   */
  void measureTemperatureAndHumidity()
  {
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	  readDHT11(&dht_sensor);
 80025d8:	4806      	ldr	r0, [pc, #24]	; (80025f4 <measureTemperatureAndHumidity+0x20>)
 80025da:	f000 fdd8 	bl	800318e <readDHT11>
	  sensor_values.temperature = dht_sensor.temperature;
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <measureTemperatureAndHumidity+0x20>)
 80025e0:	7b1a      	ldrb	r2, [r3, #12]
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <measureTemperatureAndHumidity+0x24>)
 80025e4:	711a      	strb	r2, [r3, #4]
	  sensor_values.humidity = dht_sensor.humidty;
 80025e6:	4b03      	ldr	r3, [pc, #12]	; (80025f4 <measureTemperatureAndHumidity+0x20>)
 80025e8:	7b5a      	ldrb	r2, [r3, #13]
 80025ea:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <measureTemperatureAndHumidity+0x24>)
 80025ec:	715a      	strb	r2, [r3, #5]
  }
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004f0 	.word	0x200004f0
 80025f8:	20000224 	.word	0x20000224

080025fc <loadCellInit>:

  /**
   * Suly cella inicializalas
   */
  void loadCellInit()
  {
 80025fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fe:	b08b      	sub	sp, #44	; 0x2c
 8002600:	af04      	add	r7, sp, #16
	  loadcell_sensor.gpioData = LOAD_CELL_DT_GPIO_Port;
 8002602:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <loadCellInit+0x74>)
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <loadCellInit+0x78>)
 8002606:	605a      	str	r2, [r3, #4]
	  loadcell_sensor.gpioSck = LOAD_CELL_CLK_GPIO_Port;
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <loadCellInit+0x74>)
 800260a:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <loadCellInit+0x78>)
 800260c:	601a      	str	r2, [r3, #0]
	  loadcell_sensor.pinData = LOAD_CELL_DT_Pin;
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <loadCellInit+0x74>)
 8002610:	2202      	movs	r2, #2
 8002612:	815a      	strh	r2, [r3, #10]
	  loadcell_sensor.pinSck = LOAD_CELL_CLK_Pin;
 8002614:	4b16      	ldr	r3, [pc, #88]	; (8002670 <loadCellInit+0x74>)
 8002616:	2208      	movs	r2, #8
 8002618:	811a      	strh	r2, [r3, #8]
	  loadcell_sensor.gain = 128;
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <loadCellInit+0x74>)
 800261c:	2280      	movs	r2, #128	; 0x80
 800261e:	611a      	str	r2, [r3, #16]
	  loadcell_sensor.offset = 0;
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <loadCellInit+0x74>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]

	  HX711_Init(loadcell_sensor);
 8002626:	4b12      	ldr	r3, [pc, #72]	; (8002670 <loadCellInit+0x74>)
 8002628:	691a      	ldr	r2, [r3, #16]
 800262a:	9200      	str	r2, [sp, #0]
 800262c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800262e:	f7ff fe2b 	bl	8002288 <HX711_Init>
	  HAL_Delay(2000);
 8002632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002636:	f001 fa0f 	bl	8003a58 <HAL_Delay>
	  loadcell_sensor =  HX711_Tare(loadcell_sensor, 1);
 800263a:	4e0d      	ldr	r6, [pc, #52]	; (8002670 <loadCellInit+0x74>)
 800263c:	463c      	mov	r4, r7
 800263e:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <loadCellInit+0x74>)
 8002640:	2201      	movs	r2, #1
 8002642:	9202      	str	r2, [sp, #8]
 8002644:	466d      	mov	r5, sp
 8002646:	f103 020c 	add.w	r2, r3, #12
 800264a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800264e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002652:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff fec9 	bl	80023ec <HX711_Tare>
 800265a:	4635      	mov	r5, r6
 800265c:	463c      	mov	r4, r7
 800265e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	602b      	str	r3, [r5, #0]

  }
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800266e:	bf00      	nop
 8002670:	20000440 	.word	0x20000440
 8002674:	48000800 	.word	0x48000800

08002678 <measureWeight>:

  /**
   * Tomeg mero cella ertek beolvasas es skalazasa
   */
  void measureWeight()
  {
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af02      	add	r7, sp, #8
	  sensor_values.weight = ((HX711_Value(loadcell_sensor) - (unsigned long)loadcell_sensor.offset) / LOAD_CELL_SCALE);
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <measureWeight+0x34>)
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	9200      	str	r2, [sp, #0]
 8002684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002686:	f7ff fe65 	bl	8002354 <HX711_Value>
 800268a:	4603      	mov	r3, r0
 800268c:	461a      	mov	r2, r3
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <measureWeight+0x34>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	1ad2      	subs	r2, r2, r3
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <measureWeight+0x38>)
 8002696:	fba3 1302 	umull	r1, r3, r3, r2
 800269a:	1ad2      	subs	r2, r2, r3
 800269c:	0852      	lsrs	r2, r2, #1
 800269e:	4413      	add	r3, r2
 80026a0:	0a1b      	lsrs	r3, r3, #8
 80026a2:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <measureWeight+0x3c>)
 80026a4:	6093      	str	r3, [r2, #8]
  }
 80026a6:	bf00      	nop
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000440 	.word	0x20000440
 80026b0:	59d61f13 	.word	0x59d61f13
 80026b4:	20000224 	.word	0x20000224

080026b8 <measureSoilMoisture>:

  /**
   * Fold nedvesseg ertek beolvasas
   */
  void measureSoilMoisture()
  {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
	  HAL_ADC_Start(&hadc1);
 80026bc:	4807      	ldr	r0, [pc, #28]	; (80026dc <measureSoilMoisture+0x24>)
 80026be:	f001 fd4f 	bl	8004160 <HAL_ADC_Start>
	  sensor_values.moisture =  HAL_ADC_GetValue(&hadc1);
 80026c2:	4806      	ldr	r0, [pc, #24]	; (80026dc <measureSoilMoisture+0x24>)
 80026c4:	f001 fde2 	bl	800428c <HAL_ADC_GetValue>
 80026c8:	4603      	mov	r3, r0
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <measureSoilMoisture+0x28>)
 80026ce:	819a      	strh	r2, [r3, #12]
	  HAL_ADC_Stop(&hadc1);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <measureSoilMoisture+0x24>)
 80026d2:	f001 fda8 	bl	8004226 <HAL_ADC_Stop>
  }
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000280 	.word	0x20000280
 80026e0:	20000224 	.word	0x20000224

080026e4 <sendJSONData>:

  /**
   * JSON adat kuldese az ESP32 mikrovezerlonek
   */
  void sendJSONData()
  {
 80026e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e6:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80026ea:	af06      	add	r7, sp, #24
	  char jsonData[1000]= "";
 80026ec:	463b      	mov	r3, r7
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	3304      	adds	r3, #4
 80026f4:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f007 f9cc 	bl	8009a98 <memset>
	  sprintf(jsonData,
			  "{\"deviceId\": %d, \"laserDistance\": %d, \"sonicDistance\": %d,"
			  " \"temperature\": %d, \"humidity\": %d, \"weight\": %d, \"moisture\": %d}",
			  DEVICE_ID,
			  sensor_values.laser_sensor_distance,
 8002700:	4b15      	ldr	r3, [pc, #84]	; (8002758 <sendJSONData+0x74>)
 8002702:	881b      	ldrh	r3, [r3, #0]
	  sprintf(jsonData,
 8002704:	461e      	mov	r6, r3
			  sensor_values.ultra_sonic_sensor_distance,
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <sendJSONData+0x74>)
 8002708:	885b      	ldrh	r3, [r3, #2]
	  sprintf(jsonData,
 800270a:	4619      	mov	r1, r3
			  sensor_values.temperature,
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <sendJSONData+0x74>)
 800270e:	791b      	ldrb	r3, [r3, #4]
	  sprintf(jsonData,
 8002710:	461c      	mov	r4, r3
			  sensor_values.humidity,
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <sendJSONData+0x74>)
 8002714:	795b      	ldrb	r3, [r3, #5]
	  sprintf(jsonData,
 8002716:	461d      	mov	r5, r3
 8002718:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <sendJSONData+0x74>)
 800271a:	689b      	ldr	r3, [r3, #8]
			  sensor_values.weight,
			  sensor_values.moisture
 800271c:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <sendJSONData+0x74>)
 800271e:	8992      	ldrh	r2, [r2, #12]
	  sprintf(jsonData,
 8002720:	4638      	mov	r0, r7
 8002722:	9204      	str	r2, [sp, #16]
 8002724:	9303      	str	r3, [sp, #12]
 8002726:	9502      	str	r5, [sp, #8]
 8002728:	9401      	str	r4, [sp, #4]
 800272a:	9100      	str	r1, [sp, #0]
 800272c:	4633      	mov	r3, r6
 800272e:	2201      	movs	r2, #1
 8002730:	490a      	ldr	r1, [pc, #40]	; (800275c <sendJSONData+0x78>)
 8002732:	f007 f9b9 	bl	8009aa8 <siprintf>
			  );
	  HAL_UART_Transmit(&huart1, jsonData, strlen(jsonData), HAL_MAX_DELAY);
 8002736:	463b      	mov	r3, r7
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd fd51 	bl	80001e0 <strlen>
 800273e:	4603      	mov	r3, r0
 8002740:	b29a      	uxth	r2, r3
 8002742:	4639      	mov	r1, r7
 8002744:	f04f 33ff 	mov.w	r3, #4294967295
 8002748:	4805      	ldr	r0, [pc, #20]	; (8002760 <sendJSONData+0x7c>)
 800274a:	f006 f8cf 	bl	80088ec <HAL_UART_Transmit>
  }
 800274e:	bf00      	nop
 8002750:	f507 777b 	add.w	r7, r7, #1004	; 0x3ec
 8002754:	46bd      	mov	sp, r7
 8002756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002758:	20000224 	.word	0x20000224
 800275c:	0800ad38 	.word	0x0800ad38
 8002760:	200002e8 	.word	0x200002e8

08002764 <measureAllData>:

  /**
   * Az osszes sensor adat beolvasasa
   */
  void measureAllData() {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	  readLaserDistanceValue();
 8002768:	f7ff ff04 	bl	8002574 <readLaserDistanceValue>
	  PrintMessage("laser sensor ertek: ");
 800276c:	4824      	ldr	r0, [pc, #144]	; (8002800 <measureAllData+0x9c>)
 800276e:	f7ff fe63 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.laser_sensor_distance);
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <measureAllData+0xa0>)
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fe74 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 800277c:	f7ff fe8a 	bl	8002494 <PrintNewLine>
	  ultraSonicDisctanceRead();
 8002780:	f7ff ff08 	bl	8002594 <ultraSonicDisctanceRead>
	  PrintMessage("us sensor ertek: ");
 8002784:	4820      	ldr	r0, [pc, #128]	; (8002808 <measureAllData+0xa4>)
 8002786:	f7ff fe57 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.ultra_sonic_sensor_distance);
 800278a:	4b1e      	ldr	r3, [pc, #120]	; (8002804 <measureAllData+0xa0>)
 800278c:	885b      	ldrh	r3, [r3, #2]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fe68 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 8002794:	f7ff fe7e 	bl	8002494 <PrintNewLine>
	  measureTemperatureAndHumidity();
 8002798:	f7ff ff1c 	bl	80025d4 <measureTemperatureAndHumidity>
	  PrintMessage("temp sensor ertek: ");
 800279c:	481b      	ldr	r0, [pc, #108]	; (800280c <measureAllData+0xa8>)
 800279e:	f7ff fe4b 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.temperature);
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <measureAllData+0xa0>)
 80027a4:	791b      	ldrb	r3, [r3, #4]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fe5b 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 80027ae:	f7ff fe71 	bl	8002494 <PrintNewLine>
	  PrintMessage("hum sensor ertek: ");
 80027b2:	4817      	ldr	r0, [pc, #92]	; (8002810 <measureAllData+0xac>)
 80027b4:	f7ff fe40 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.humidity);
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <measureAllData+0xa0>)
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fe50 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 80027c4:	f7ff fe66 	bl	8002494 <PrintNewLine>
	  measureWeight();
 80027c8:	f7ff ff56 	bl	8002678 <measureWeight>
	  PrintMessage("weight sensor ertek: ");
 80027cc:	4811      	ldr	r0, [pc, #68]	; (8002814 <measureAllData+0xb0>)
 80027ce:	f7ff fe33 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.weight);
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <measureAllData+0xa0>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	4618      	mov	r0, r3
 80027da:	f7ff fe43 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 80027de:	f7ff fe59 	bl	8002494 <PrintNewLine>
	  measureSoilMoisture();
 80027e2:	f7ff ff69 	bl	80026b8 <measureSoilMoisture>
	  PrintMessage("moisture sensor ertek: ");
 80027e6:	480c      	ldr	r0, [pc, #48]	; (8002818 <measureAllData+0xb4>)
 80027e8:	f7ff fe26 	bl	8002438 <PrintMessage>
	  PrintNumber(sensor_values.moisture);
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <measureAllData+0xa0>)
 80027ee:	899b      	ldrh	r3, [r3, #12]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff fe37 	bl	8002464 <PrintNumber>
	  PrintNewLine();
 80027f6:	f7ff fe4d 	bl	8002494 <PrintNewLine>
  }
 80027fa:	bf00      	nop
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	0800adb4 	.word	0x0800adb4
 8002804:	20000224 	.word	0x20000224
 8002808:	0800adcc 	.word	0x0800adcc
 800280c:	0800ade0 	.word	0x0800ade0
 8002810:	0800adf4 	.word	0x0800adf4
 8002814:	0800ae08 	.word	0x0800ae08
 8002818:	0800ae20 	.word	0x0800ae20

0800281c <readMulti>:
        _Error_Handler(__FILE__, __LINE__);
      }
  }

  void readMulti(VL53L0X * lidar,uint8_t reg, uint8_t * dst, uint8_t count)
   {
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	607a      	str	r2, [r7, #4]
 8002826:	461a      	mov	r2, r3
 8002828:	460b      	mov	r3, r1
 800282a:	72fb      	strb	r3, [r7, #11]
 800282c:	4613      	mov	r3, r2
 800282e:	72bb      	strb	r3, [r7, #10]
       /* Send register address */
       if (HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS<<1, &reg, 1, 1000) != HAL_OK)
 8002830:	f107 020b 	add.w	r2, r7, #11
 8002834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	2301      	movs	r3, #1
 800283c:	2152      	movs	r1, #82	; 0x52
 800283e:	4811      	ldr	r0, [pc, #68]	; (8002884 <readMulti+0x68>)
 8002840:	f002 fe6e 	bl	8005520 <HAL_I2C_Master_Transmit>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <readMulti+0x38>
         {
           {
               _Error_Handler(__FILE__, __LINE__);
 800284a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800284e:	480e      	ldr	r0, [pc, #56]	; (8002888 <readMulti+0x6c>)
 8002850:	f000 fb78 	bl	8002f44 <_Error_Handler>
           }
         }

       /* Receive multiple byte */
       if (HAL_I2C_Master_Receive(&hi2c1, ((SLAVE_ADDRESS <<1) | 0x01), dst, count, 1000) != HAL_OK)
 8002854:	7abb      	ldrb	r3, [r7, #10]
 8002856:	b29a      	uxth	r2, r3
 8002858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4613      	mov	r3, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	2153      	movs	r1, #83	; 0x53
 8002864:	4807      	ldr	r0, [pc, #28]	; (8002884 <readMulti+0x68>)
 8002866:	f002 ff4f 	bl	8005708 <HAL_I2C_Master_Receive>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d004      	beq.n	800287a <readMulti+0x5e>
         {
            _Error_Handler(__FILE__, __LINE__);
 8002870:	f240 1159 	movw	r1, #345	; 0x159
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <readMulti+0x6c>)
 8002876:	f000 fb65 	bl	8002f44 <_Error_Handler>
         }
   }
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000234 	.word	0x20000234
 8002888:	0800ae38 	.word	0x0800ae38

0800288c <writeMulti>:

   void writeMulti(VL53L0X * lidar,uint8_t reg, uint8_t* src, uint8_t count)
   {
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	461a      	mov	r2, r3
 8002898:	460b      	mov	r3, r1
 800289a:	72fb      	strb	r3, [r7, #11]
 800289c:	4613      	mov	r3, r2
 800289e:	72bb      	strb	r3, [r7, #10]
            /* Try to transmit via I2C */
           if(HAL_I2C_Mem_Write(&hi2c1, SLAVE_ADDRESS<<1, reg, reg>0xFF ? I2C_MEMADD_SIZE_16BIT : I2C_MEMADD_SIZE_8BIT, src, count, 1000) != HAL_OK)
 80028a0:	7afb      	ldrb	r3, [r7, #11]
 80028a2:	b299      	uxth	r1, r3
 80028a4:	7abb      	ldrb	r3, [r7, #10]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028ac:	9202      	str	r2, [sp, #8]
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	2301      	movs	r3, #1
 80028b6:	460a      	mov	r2, r1
 80028b8:	2152      	movs	r1, #82	; 0x52
 80028ba:	4807      	ldr	r0, [pc, #28]	; (80028d8 <writeMulti+0x4c>)
 80028bc:	f003 f81a 	bl	80058f4 <HAL_I2C_Mem_Write>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d004      	beq.n	80028d0 <writeMulti+0x44>
               {
                  _Error_Handler(__FILE__, __LINE__);
 80028c6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80028ca:	4804      	ldr	r0, [pc, #16]	; (80028dc <writeMulti+0x50>)
 80028cc:	f000 fb3a 	bl	8002f44 <_Error_Handler>
               }

   }
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000234 	.word	0x20000234
 80028dc:	0800ae38 	.word	0x0800ae38

080028e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80028e4:	f001 f83c 	bl	8003960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e8:	f000 f86a 	bl	80029c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028ec:	f000 fab2 	bl	8002e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 80028f0:	f000 f8f4 	bl	8002adc <MX_ADC1_Init>
  MX_I2C1_Init();
 80028f4:	f000 f956 	bl	8002ba4 <MX_I2C1_Init>
  MX_RTC_Init();
 80028f8:	f000 f994 	bl	8002c24 <MX_RTC_Init>
  MX_TIM1_Init();
 80028fc:	f000 f9ba 	bl	8002c74 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002900:	f000 fa48 	bl	8002d94 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002904:	f000 fa76 	bl	8002df4 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8002908:	f000 fa0e 	bl	8002d28 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // sensor inicializalasok
  initLaserDistanceSensor();
 800290c:	f7ff fde6 	bl	80024dc <initLaserDistanceSensor>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8002910:	2104      	movs	r1, #4
 8002912:	4821      	ldr	r0, [pc, #132]	; (8002998 <main+0xb8>)
 8002914:	f005 fa1c 	bl	8007d50 <HAL_TIM_IC_Start_IT>
  init_dht11(&dht_sensor, &htim6, DHT11_GPIO_Port, DHT11_Pin);
 8002918:	2301      	movs	r3, #1
 800291a:	4a20      	ldr	r2, [pc, #128]	; (800299c <main+0xbc>)
 800291c:	4920      	ldr	r1, [pc, #128]	; (80029a0 <main+0xc0>)
 800291e:	4821      	ldr	r0, [pc, #132]	; (80029a4 <main+0xc4>)
 8002920:	f000 fbe4 	bl	80030ec <init_dht11>
  loadCellInit();
 8002924:	f7ff fe6a 	bl	80025fc <loadCellInit>
  measureAllData();
 8002928:	f7ff ff1c 	bl	8002764 <measureAllData>
  HAL_UART_Receive_IT(&huart1, uart_buffer, 2);
 800292c:	2202      	movs	r2, #2
 800292e:	491e      	ldr	r1, [pc, #120]	; (80029a8 <main+0xc8>)
 8002930:	481e      	ldr	r0, [pc, #120]	; (80029ac <main+0xcc>)
 8002932:	f006 f86f 	bl	8008a14 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart1, "S", 1, HAL_MAX_DELAY);
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	2201      	movs	r2, #1
 800293c:	491c      	ldr	r1, [pc, #112]	; (80029b0 <main+0xd0>)
 800293e:	481b      	ldr	r0, [pc, #108]	; (80029ac <main+0xcc>)
 8002940:	f005 ffd4 	bl	80088ec <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if((rtc_time.Seconds == 0 && (rtc_time.Minutes % measurement_time) == 0))
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <main+0xd4>)
 8002946:	789b      	ldrb	r3, [r3, #2]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10f      	bne.n	800296c <main+0x8c>
 800294c:	4b19      	ldr	r3, [pc, #100]	; (80029b4 <main+0xd4>)
 800294e:	785b      	ldrb	r3, [r3, #1]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <main+0xd8>)
 8002952:	7812      	ldrb	r2, [r2, #0]
 8002954:	fbb3 f1f2 	udiv	r1, r3, r2
 8002958:	fb02 f201 	mul.w	r2, r2, r1
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <main+0x8c>
	  {
		  measureAllData();
 8002964:	f7ff fefe 	bl	8002764 <measureAllData>
		  sendJSONData();
 8002968:	f7ff febc 	bl	80026e4 <sendJSONData>
	  }

	  if(rapidMeasure == 1)
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <main+0xdc>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d106      	bne.n	8002982 <main+0xa2>
	  {
		measureAllData();
 8002974:	f7ff fef6 	bl	8002764 <measureAllData>
		sendJSONData();
 8002978:	f7ff feb4 	bl	80026e4 <sendJSONData>
		rapidMeasure = 0;
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <main+0xdc>)
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
	  }

	  getTime();
 8002982:	f7ff fd97 	bl	80024b4 <getTime>
	  measureAllData();
 8002986:	f7ff feed 	bl	8002764 <measureAllData>
	  sendJSONData();
 800298a:	f7ff feab 	bl	80026e4 <sendJSONData>
	  HAL_Delay(1000);
 800298e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002992:	f001 f861 	bl	8003a58 <HAL_Delay>
	  if((rtc_time.Seconds == 0 && (rtc_time.Minutes % measurement_time) == 0))
 8002996:	e7d5      	b.n	8002944 <main+0x64>
 8002998:	200003f0 	.word	0x200003f0
 800299c:	48000800 	.word	0x48000800
 80029a0:	200003a4 	.word	0x200003a4
 80029a4:	200004f0 	.word	0x200004f0
 80029a8:	2000020c 	.word	0x2000020c
 80029ac:	200002e8 	.word	0x200002e8
 80029b0:	0800ae4c 	.word	0x0800ae4c
 80029b4:	2000036c 	.word	0x2000036c
 80029b8:	20000003 	.word	0x20000003
 80029bc:	200004ec 	.word	0x200004ec

080029c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b0b0      	sub	sp, #192	; 0xc0
 80029c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80029ca:	2244      	movs	r2, #68	; 0x44
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f007 f862 	bl	8009a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029e4:	463b      	mov	r3, r7
 80029e6:	2268      	movs	r2, #104	; 0x68
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f007 f854 	bl	8009a98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80029f0:	230a      	movs	r3, #10
 80029f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a02:	2301      	movs	r3, #1
 8002a04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002a20:	2307      	movs	r3, #7
 8002a22:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a26:	2302      	movs	r3, #2
 8002a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a32:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 fd0c 	bl	8006454 <HAL_RCC_OscConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8002a42:	f000 fb4f 	bl	80030e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a46:	230f      	movs	r3, #15
 8002a48:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a56:	2300      	movs	r3, #0
 8002a58:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002a5e:	2104      	movs	r1, #4
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 f917 	bl	8006c94 <HAL_RCC_ClockConfig>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002a6c:	f000 fb3a 	bl	80030e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
 8002a70:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <SystemClock_Config+0x118>)
 8002a72:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a74:	2300      	movs	r3, #0
 8002a76:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002a80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002a90:	2301      	movs	r3, #1
 8002a92:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8002a94:	2308      	movs	r3, #8
 8002a96:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8002aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002aaa:	463b      	mov	r3, r7
 8002aac:	4618      	mov	r0, r3
 8002aae:	f004 faf5 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8002ab8:	f000 fb14 	bl	80030e4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002abc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ac0:	f003 fc72 	bl	80063a8 <HAL_PWREx_ControlVoltageScaling>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <SystemClock_Config+0x10e>
  {
    Error_Handler();
 8002aca:	f000 fb0b 	bl	80030e4 <Error_Handler>
  }
}
 8002ace:	bf00      	nop
 8002ad0:	37c0      	adds	r7, #192	; 0xc0
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	00024043 	.word	0x00024043

08002adc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ae2:	463b      	mov	r3, r7
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
 8002af0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002af4:	4a29      	ldr	r2, [pc, #164]	; (8002b9c <MX_ADC1_Init+0xc0>)
 8002af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b04:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b10:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b12:	2204      	movs	r2, #4
 8002b14:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002b28:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b36:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002b3c:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002b44:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002b4a:	4b13      	ldr	r3, [pc, #76]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002b52:	4811      	ldr	r0, [pc, #68]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b54:	f001 f9b8 	bl	8003ec8 <HAL_ADC_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002b5e:	f000 fac1 	bl	80030e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <MX_ADC1_Init+0xc4>)
 8002b64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002b66:	2306      	movs	r3, #6
 8002b68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002b6e:	237f      	movs	r3, #127	; 0x7f
 8002b70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b72:	2304      	movs	r3, #4
 8002b74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <MX_ADC1_Init+0xbc>)
 8002b80:	f001 fb92 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002b8a:	f000 faab 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000280 	.word	0x20000280
 8002b9c:	50040000 	.word	0x50040000
 8002ba0:	0c900008 	.word	0x0c900008

08002ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002baa:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <MX_I2C1_Init+0x78>)
 8002bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <MX_I2C1_Init+0x7c>)
 8002bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002bb4:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bba:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bde:	480e      	ldr	r0, [pc, #56]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002be0:	f002 fc10 	bl	8005404 <HAL_I2C_Init>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002bea:	f000 fa7b 	bl	80030e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4809      	ldr	r0, [pc, #36]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002bf2:	f003 fb33 	bl	800625c <HAL_I2CEx_ConfigAnalogFilter>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002bfc:	f000 fa72 	bl	80030e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c00:	2100      	movs	r1, #0
 8002c02:	4805      	ldr	r0, [pc, #20]	; (8002c18 <MX_I2C1_Init+0x74>)
 8002c04:	f003 fb75 	bl	80062f2 <HAL_I2CEx_ConfigDigitalFilter>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c0e:	f000 fa69 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000234 	.word	0x20000234
 8002c1c:	40005400 	.word	0x40005400
 8002c20:	00702991 	.word	0x00702991

08002c24 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c2a:	4a11      	ldr	r2, [pc, #68]	; (8002c70 <MX_RTC_Init+0x4c>)
 8002c2c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c2e:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c36:	227f      	movs	r2, #127	; 0x7f
 8002c38:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c3a:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c3c:	22ff      	movs	r2, #255	; 0xff
 8002c3e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c40:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c46:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c4c:	4b07      	ldr	r3, [pc, #28]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c52:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_RTC_Init+0x48>)
 8002c5a:	f004 fd79 	bl	8007750 <HAL_RTC_Init>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d001      	beq.n	8002c68 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002c64:	f000 fa3e 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20000380 	.word	0x20000380
 8002c70:	40002800 	.word	0x40002800

08002c74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	605a      	str	r2, [r3, #4]
 8002c8e:	609a      	str	r2, [r3, #8]
 8002c90:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002c92:	4b23      	ldr	r3, [pc, #140]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002c94:	4a23      	ldr	r2, [pc, #140]	; (8002d24 <MX_TIM1_Init+0xb0>)
 8002c96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002c9a:	224f      	movs	r2, #79	; 0x4f
 8002c9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c9e:	4b20      	ldr	r3, [pc, #128]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002caa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cac:	4b1c      	ldr	r3, [pc, #112]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cb2:	4b1b      	ldr	r3, [pc, #108]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb8:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002cbe:	4818      	ldr	r0, [pc, #96]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002cc0:	f004 ffef 	bl	8007ca2 <HAL_TIM_IC_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002cca:	f000 fa0b 	bl	80030e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002cda:	f107 0314 	add.w	r3, r7, #20
 8002cde:	4619      	mov	r1, r3
 8002ce0:	480f      	ldr	r0, [pc, #60]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002ce2:	f005 fd29 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002cec:	f000 f9fa 	bl	80030e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	2204      	movs	r2, #4
 8002d04:	4619      	mov	r1, r3
 8002d06:	4806      	ldr	r0, [pc, #24]	; (8002d20 <MX_TIM1_Init+0xac>)
 8002d08:	f005 fa6f 	bl	80081ea <HAL_TIM_IC_ConfigChannel>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002d12:	f000 f9e7 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d16:	bf00      	nop
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200003f0 	.word	0x200003f0
 8002d24:	40012c00 	.word	0x40012c00

08002d28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <MX_TIM6_Init+0x68>)
 8002d3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d40:	224f      	movs	r2, #79	; 0x4f
 8002d42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d50:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d52:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d5a:	f004 fecf 	bl	8007afc <HAL_TIM_Base_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002d64:	f000 f9be 	bl	80030e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_TIM6_Init+0x64>)
 8002d76:	f005 fcdf 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002d80:	f000 f9b0 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	200003a4 	.word	0x200003a4
 8002d90:	40001000 	.word	0x40001000

08002d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d98:	4b14      	ldr	r3, [pc, #80]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <MX_USART1_UART_Init+0x5c>)
 8002d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d9e:	4b13      	ldr	r3, [pc, #76]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002dac:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dba:	220c      	movs	r2, #12
 8002dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc4:	4b09      	ldr	r3, [pc, #36]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dd6:	4805      	ldr	r0, [pc, #20]	; (8002dec <MX_USART1_UART_Init+0x58>)
 8002dd8:	f005 fd3a 	bl	8008850 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002de2:	f000 f97f 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	200002e8 	.word	0x200002e8
 8002df0:	40013800 	.word	0x40013800

08002df4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002dfa:	4a15      	ldr	r2, [pc, #84]	; (8002e50 <MX_USART2_UART_Init+0x5c>)
 8002dfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002dfe:	4b13      	ldr	r3, [pc, #76]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e1a:	220c      	movs	r2, #12
 8002e1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e2a:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e36:	4805      	ldr	r0, [pc, #20]	; (8002e4c <MX_USART2_UART_Init+0x58>)
 8002e38:	f005 fd0a 	bl	8008850 <HAL_UART_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002e42:	f000 f94f 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000468 	.word	0x20000468
 8002e50:	40004400 	.word	0x40004400

08002e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b088      	sub	sp, #32
 8002e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5a:	f107 030c 	add.w	r3, r7, #12
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	605a      	str	r2, [r3, #4]
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e6a:	4a33      	ldr	r2, [pc, #204]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e6c:	4b32      	ldr	r3, [pc, #200]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e70:	f043 0304 	orr.w	r3, r3, #4
 8002e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e76:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	4a27      	ldr	r2, [pc, #156]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
 8002ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <MX_GPIO_Init+0xe4>)
 8002ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_Pin|LOAD_CELL_DT_Pin|LOAD_CELL_CLK_Pin, GPIO_PIN_RESET);
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	210b      	movs	r1, #11
 8002eb6:	4821      	ldr	r0, [pc, #132]	; (8002f3c <MX_GPIO_Init+0xe8>)
 8002eb8:	f002 fa8c 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ULTRA_SONIC_TRG_GPIO_Port, ULTRA_SONIC_TRG_Pin, GPIO_PIN_RESET);
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ec6:	f002 fa85 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LASER_DISTANCE_XSHUT_GPIO_Port, LASER_DISTANCE_XSHUT_Pin, GPIO_PIN_RESET);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed0:	481b      	ldr	r0, [pc, #108]	; (8002f40 <MX_GPIO_Init+0xec>)
 8002ed2:	f002 fa7f 	bl	80053d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DHT11_Pin LOAD_CELL_DT_Pin LOAD_CELL_CLK_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|LOAD_CELL_DT_Pin|LOAD_CELL_CLK_Pin;
 8002ed6:	230b      	movs	r3, #11
 8002ed8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee6:	f107 030c 	add.w	r3, r7, #12
 8002eea:	4619      	mov	r1, r3
 8002eec:	4813      	ldr	r0, [pc, #76]	; (8002f3c <MX_GPIO_Init+0xe8>)
 8002eee:	f002 f8df 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULTRA_SONIC_TRG_Pin */
  GPIO_InitStruct.Pin = ULTRA_SONIC_TRG_Pin;
 8002ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efc:	2300      	movs	r3, #0
 8002efe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ULTRA_SONIC_TRG_GPIO_Port, &GPIO_InitStruct);
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f0e:	f002 f8cf 	bl	80050b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_DISTANCE_XSHUT_Pin */
  GPIO_InitStruct.Pin = LASER_DISTANCE_XSHUT_Pin;
 8002f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LASER_DISTANCE_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8002f24:	f107 030c 	add.w	r3, r7, #12
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4805      	ldr	r0, [pc, #20]	; (8002f40 <MX_GPIO_Init+0xec>)
 8002f2c:	f002 f8c0 	bl	80050b0 <HAL_GPIO_Init>

}
 8002f30:	bf00      	nop
 8002f32:	3720      	adds	r7, #32
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	48000800 	.word	0x48000800
 8002f40:	48000400 	.word	0x48000400

08002f44 <_Error_Handler>:

/* USER CODE BEGIN 4 */
void _Error_Handler(char *file, int line)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* USER CODE END Error_Handler_Debug */
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	0000      	movs	r0, r0
 8002f5c:	0000      	movs	r0, r0
	...

08002f60 <HAL_TIM_IC_CaptureCallback>:

// Timer az ultrahang tavolsag szenzor ertekenek olvasasara
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002f60:	b590      	push	{r4, r7, lr}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7f1b      	ldrb	r3, [r3, #28]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	f040 8083 	bne.w	8003078 <HAL_TIM_IC_CaptureCallback+0x118>
		if (ultra_sonic_frist_captured == 0) {
 8002f72:	4b45      	ldr	r3, [pc, #276]	; (8003088 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11a      	bne.n	8002fb0 <HAL_TIM_IC_CaptureCallback+0x50>
			ultra_sonic_rising = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f005 f9c9 	bl	8008314 <HAL_TIM_ReadCapturedValue>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b41      	ldr	r3, [pc, #260]	; (800308c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002f86:	601a      	str	r2, [r3, #0]
			ultra_sonic_frist_captured = 1;
 8002f88:	4b3f      	ldr	r3, [pc, #252]	; (8003088 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6a12      	ldr	r2, [r2, #32]
 8002f98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f9c:	621a      	str	r2, [r3, #32]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	6a12      	ldr	r2, [r2, #32]
 8002fa8:	f042 0220 	orr.w	r2, r2, #32
 8002fac:	621a      	str	r2, [r3, #32]
					TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);

		}
	}
}
 8002fae:	e063      	b.n	8003078 <HAL_TIM_IC_CaptureCallback+0x118>
		} else if (ultra_sonic_frist_captured) {
 8002fb0:	4b35      	ldr	r3, [pc, #212]	; (8003088 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05f      	beq.n	8003078 <HAL_TIM_IC_CaptureCallback+0x118>
			ultra_sonic_falling = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002fb8:	2104      	movs	r1, #4
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 f9aa 	bl	8008314 <HAL_TIM_ReadCapturedValue>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b33      	ldr	r3, [pc, #204]	; (8003090 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002fc4:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	625a      	str	r2, [r3, #36]	; 0x24
			if (ultra_sonic_falling > ultra_sonic_rising) {
 8002fce:	4b30      	ldr	r3, [pc, #192]	; (8003090 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4b2e      	ldr	r3, [pc, #184]	; (800308c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d907      	bls.n	8002fea <HAL_TIM_IC_CaptureCallback+0x8a>
				ultrasonic_difference = ultra_sonic_falling - ultra_sonic_rising;
 8002fda:	4b2d      	ldr	r3, [pc, #180]	; (8003090 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b2b      	ldr	r3, [pc, #172]	; (800308c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	; (8003094 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e00f      	b.n	800300a <HAL_TIM_IC_CaptureCallback+0xaa>
			} else if (ultra_sonic_rising > ultra_sonic_falling) {
 8002fea:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4b28      	ldr	r3, [pc, #160]	; (8003090 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d909      	bls.n	800300a <HAL_TIM_IC_CaptureCallback+0xaa>
				ultrasonic_difference = (65535 - ultra_sonic_rising) + ultra_sonic_falling;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8003004:	33ff      	adds	r3, #255	; 0xff
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <HAL_TIM_IC_CaptureCallback+0x134>)
 8003008:	6013      	str	r3, [r2, #0]
			sensor_values.ultra_sonic_sensor_distance = ultrasonic_difference * 0.34 / 2;
 800300a:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_TIM_IC_CaptureCallback+0x134>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd fa80 	bl	8000514 <__aeabi_ui2d>
 8003014:	a31a      	add	r3, pc, #104	; (adr r3, 8003080 <HAL_TIM_IC_CaptureCallback+0x120>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	f7fd faf1 	bl	8000600 <__aeabi_dmul>
 800301e:	4603      	mov	r3, r0
 8003020:	460c      	mov	r4, r1
 8003022:	4618      	mov	r0, r3
 8003024:	4621      	mov	r1, r4
 8003026:	f04f 0200 	mov.w	r2, #0
 800302a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800302e:	f7fd fc11 	bl	8000854 <__aeabi_ddiv>
 8003032:	4603      	mov	r3, r0
 8003034:	460c      	mov	r4, r1
 8003036:	4618      	mov	r0, r3
 8003038:	4621      	mov	r1, r4
 800303a:	f7fd fd7b 	bl	8000b34 <__aeabi_d2uiz>
 800303e:	4603      	mov	r3, r0
 8003040:	b29a      	uxth	r2, r3
 8003042:	4b15      	ldr	r3, [pc, #84]	; (8003098 <HAL_TIM_IC_CaptureCallback+0x138>)
 8003044:	805a      	strh	r2, [r3, #2]
			ultra_sonic_frist_captured = 0;
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <HAL_TIM_IC_CaptureCallback+0x128>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	6a12      	ldr	r2, [r2, #32]
 8003056:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800305a:	621a      	str	r2, [r3, #32]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	6a12      	ldr	r2, [r2, #32]
 8003066:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	68d2      	ldr	r2, [r2, #12]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	60da      	str	r2, [r3, #12]
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	5c28f5c3 	.word	0x5c28f5c3
 8003084:	3fd5c28f 	.word	0x3fd5c28f
 8003088:	20000208 	.word	0x20000208
 800308c:	200001fc 	.word	0x200001fc
 8003090:	20000200 	.word	0x20000200
 8003094:	20000204 	.word	0x20000204
 8003098:	20000224 	.word	0x20000224

0800309c <HAL_UART_RxCpltCallback>:

// Interrupt callback az UART-on erkezo adatokra
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, uart_buffer, 2);
 80030a4:	2202      	movs	r2, #2
 80030a6:	490a      	ldr	r1, [pc, #40]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030a8:	480a      	ldr	r0, [pc, #40]	; (80030d4 <HAL_UART_RxCpltCallback+0x38>)
 80030aa:	f005 fcb3 	bl	8008a14 <HAL_UART_Receive_IT>

	if (uart_buffer[0] == '0')
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b30      	cmp	r3, #48	; 0x30
 80030b4:	d103      	bne.n	80030be <HAL_UART_RxCpltCallback+0x22>
	{
		rapidMeasure = 1;
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_UART_RxCpltCallback+0x3c>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		sscanf (uart_buffer,"%d",&measurement_time);
	}
}
 80030bc:	e004      	b.n	80030c8 <HAL_UART_RxCpltCallback+0x2c>
		sscanf (uart_buffer,"%d",&measurement_time);
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <HAL_UART_RxCpltCallback+0x40>)
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <HAL_UART_RxCpltCallback+0x44>)
 80030c2:	4803      	ldr	r0, [pc, #12]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030c4:	f006 fd14 	bl	8009af0 <siscanf>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000020c 	.word	0x2000020c
 80030d4:	200002e8 	.word	0x200002e8
 80030d8:	200004ec 	.word	0x200004ec
 80030dc:	20000003 	.word	0x20000003
 80030e0:	0800acd8 	.word	0x0800acd8

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ea:	e7fe      	b.n	80030ea <Error_Handler+0x6>

080030ec <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	887a      	ldrh	r2, [r7, #2]
 800310a:	809a      	strh	r2, [r3, #4]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8003134:	78fb      	ldrb	r3, [r7, #3]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d111      	bne.n	800315e <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	889b      	ldrh	r3, [r3, #4]
 800313e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f107 020c 	add.w	r2, r7, #12
 8003154:	4611      	mov	r1, r2
 8003156:	4618      	mov	r0, r3
 8003158:	f001 ffaa 	bl	80050b0 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 800315c:	e013      	b.n	8003186 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d110      	bne.n	8003186 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	889b      	ldrh	r3, [r3, #4]
 8003168:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003172:	2303      	movs	r3, #3
 8003174:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f107 020c 	add.w	r2, r7, #12
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f001 ff95 	bl	80050b0 <HAL_GPIO_Init>
}
 8003186:	bf00      	nop
 8003188:	3720      	adds	r7, #32
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b094      	sub	sp, #80	; 0x50
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	86fb      	strh	r3, [r7, #54]	; 0x36
 800319a:	2300      	movs	r3, #0
 800319c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800319e:	2300      	movs	r3, #0
 80031a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 80031b0:	2300      	movs	r3, #0
 80031b2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 80031bc:	2101      	movs	r1, #1
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ffaa 	bl	8003118 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6818      	ldr	r0, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	889b      	ldrh	r3, [r3, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	4619      	mov	r1, r3
 80031d0:	f002 f900 	bl	80053d4 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80031d4:	2012      	movs	r0, #18
 80031d6:	f000 fc3f 	bl	8003a58 <HAL_Delay>
 80031da:	b672      	cpsid	i
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f004 fce3 	bl	8007bac <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80031e6:	2100      	movs	r1, #0
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff95 	bl	8003118 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2200      	movs	r2, #0
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80031f8:	e00a      	b.n	8003210 <readDHT11+0x82>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	b29b      	uxth	r3, r3
 8003204:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003208:	d902      	bls.n	8003210 <readDHT11+0x82>
  __ASM volatile ("cpsie i" : : : "memory");
 800320a:	b662      	cpsie	i
			__enable_irq();
			return 0;
 800320c:	2300      	movs	r3, #0
 800320e:	e12a      	b.n	8003466 <readDHT11+0x2d8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	889b      	ldrh	r3, [r3, #4]
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f002 f8c2 	bl	80053a4 <HAL_GPIO_ReadPin>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d0e9      	beq.n	80031fa <readDHT11+0x6c>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2200      	movs	r2, #0
 800322e:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8003230:	e00a      	b.n	8003248 <readDHT11+0xba>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	b29b      	uxth	r3, r3
 800323c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003240:	d902      	bls.n	8003248 <readDHT11+0xba>
 8003242:	b662      	cpsie	i
			__enable_irq();
			return 0;
 8003244:	2300      	movs	r3, #0
 8003246:	e10e      	b.n	8003466 <readDHT11+0x2d8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	889b      	ldrh	r3, [r3, #4]
 8003250:	4619      	mov	r1, r3
 8003252:	4610      	mov	r0, r2
 8003254:	f002 f8a6 	bl	80053a4 <HAL_GPIO_ReadPin>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0e9      	beq.n	8003232 <readDHT11+0xa4>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2200      	movs	r2, #0
 8003270:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8003272:	e00a      	b.n	800328a <readDHT11+0xfc>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327c:	b29b      	uxth	r3, r3
 800327e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003282:	d902      	bls.n	800328a <readDHT11+0xfc>
 8003284:	b662      	cpsie	i
			__enable_irq();
			return 0;
 8003286:	2300      	movs	r3, #0
 8003288:	e0ed      	b.n	8003466 <readDHT11+0x2d8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	889b      	ldrh	r3, [r3, #4]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f002 f885 	bl	80053a4 <HAL_GPIO_ReadPin>
 800329a:	4603      	mov	r3, r0
 800329c:	2b01      	cmp	r3, #1
 800329e:	d0e9      	beq.n	8003274 <readDHT11+0xe6>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 80032aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032ac:	2b4a      	cmp	r3, #74	; 0x4a
 80032ae:	d80b      	bhi.n	80032c8 <readDHT11+0x13a>
 80032b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80032b2:	2b55      	cmp	r3, #85	; 0x55
 80032b4:	d908      	bls.n	80032c8 <readDHT11+0x13a>
 80032b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032b8:	2b4a      	cmp	r3, #74	; 0x4a
 80032ba:	d805      	bhi.n	80032c8 <readDHT11+0x13a>
 80032bc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80032be:	2b55      	cmp	r3, #85	; 0x55
 80032c0:	d902      	bls.n	80032c8 <readDHT11+0x13a>
 80032c2:	b662      	cpsie	i
	{
		__enable_irq();
		return 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	e0ce      	b.n	8003466 <readDHT11+0x2d8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44
 80032cc:	e05b      	b.n	8003386 <readDHT11+0x1f8>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2200      	movs	r2, #0
 80032d6:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80032d8:	e00a      	b.n	80032f0 <readDHT11+0x162>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032e8:	d902      	bls.n	80032f0 <readDHT11+0x162>
 80032ea:	b662      	cpsie	i
				__enable_irq();
				return 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e0ba      	b.n	8003466 <readDHT11+0x2d8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	889b      	ldrh	r3, [r3, #4]
 80032f8:	4619      	mov	r1, r3
 80032fa:	4610      	mov	r0, r2
 80032fc:	f002 f852 	bl	80053a4 <HAL_GPIO_ReadPin>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0e9      	beq.n	80032da <readDHT11+0x14c>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2200      	movs	r2, #0
 800330e:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8003310:	e00a      	b.n	8003328 <readDHT11+0x19a>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	b29b      	uxth	r3, r3
 800331c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003320:	d902      	bls.n	8003328 <readDHT11+0x19a>
 8003322:	b662      	cpsie	i
				__enable_irq();
				return 0;
 8003324:	2300      	movs	r3, #0
 8003326:	e09e      	b.n	8003466 <readDHT11+0x2d8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	889b      	ldrh	r3, [r3, #4]
 8003330:	4619      	mov	r1, r3
 8003332:	4610      	mov	r0, r2
 8003334:	f002 f836 	bl	80053a4 <HAL_GPIO_ReadPin>
 8003338:	4603      	mov	r3, r0
 800333a:	2b01      	cmp	r3, #1
 800333c:	d0e9      	beq.n	8003312 <readDHT11+0x184>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 8003348:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800334a:	2b14      	cmp	r3, #20
 800334c:	d906      	bls.n	800335c <readDHT11+0x1ce>
 800334e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003350:	2b1d      	cmp	r3, #29
 8003352:	d803      	bhi.n	800335c <readDHT11+0x1ce>
		{
			mBit = 0;
 8003354:	2300      	movs	r3, #0
 8003356:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800335a:	e008      	b.n	800336e <readDHT11+0x1e0>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800335c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800335e:	2b3c      	cmp	r3, #60	; 0x3c
 8003360:	d905      	bls.n	800336e <readDHT11+0x1e0>
 8003362:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003364:	2b4f      	cmp	r3, #79	; 0x4f
 8003366:	d802      	bhi.n	800336e <readDHT11+0x1e0>
		{
			 mBit = 1;
 8003368:	2301      	movs	r3, #1
 800336a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 800336e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003372:	b2d9      	uxtb	r1, r3
 8003374:	f107 0208 	add.w	r2, r7, #8
 8003378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800337a:	4413      	add	r3, r2
 800337c:	460a      	mov	r2, r1
 800337e:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8003380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003382:	3301      	adds	r3, #1
 8003384:	647b      	str	r3, [r7, #68]	; 0x44
 8003386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003388:	2b27      	cmp	r3, #39	; 0x27
 800338a:	dda0      	ble.n	80032ce <readDHT11+0x140>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fc5f 	bl	8007c54 <HAL_TIM_Base_Stop>
 8003396:	b662      	cpsie	i
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8003398:	2300      	movs	r3, #0
 800339a:	643b      	str	r3, [r7, #64]	; 0x40
 800339c:	e011      	b.n	80033c2 <readDHT11+0x234>
	{
		humVal += mData[i];
 800339e:	f107 0208 	add.w	r2, r7, #8
 80033a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a4:	4413      	add	r3, r2
 80033a6:	781a      	ldrb	r2, [r3, #0]
 80033a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033ac:	4413      	add	r3, r2
 80033ae:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 80033b2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 80033bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033be:	3301      	adds	r3, #1
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033c4:	2b07      	cmp	r3, #7
 80033c6:	ddea      	ble.n	800339e <readDHT11+0x210>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80033c8:	2310      	movs	r3, #16
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033cc:	e011      	b.n	80033f2 <readDHT11+0x264>
	{
		tempVal += mData[i];
 80033ce:	f107 0208 	add.w	r2, r7, #8
 80033d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d4:	4413      	add	r3, r2
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80033dc:	4413      	add	r3, r2
 80033de:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 80033e2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 80033ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ee:	3301      	adds	r3, #1
 80033f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f4:	2b17      	cmp	r3, #23
 80033f6:	ddea      	ble.n	80033ce <readDHT11+0x240>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80033f8:	2320      	movs	r3, #32
 80033fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80033fc:	e011      	b.n	8003422 <readDHT11+0x294>
	{
		parityVal += mData[i];
 80033fe:	f107 0208 	add.w	r2, r7, #8
 8003402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003404:	4413      	add	r3, r2
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800340c:	4413      	add	r3, r2
 800340e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8003412:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 800341c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341e:	3301      	adds	r3, #1
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	2b27      	cmp	r3, #39	; 0x27
 8003426:	ddea      	ble.n	80033fe <readDHT11+0x270>
	}

	parityVal = parityVal >> 1;
 8003428:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8003432:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 800343c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8003440:	085b      	lsrs	r3, r3, #1
 8003442:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 8003446:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800344a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800344e:	4413      	add	r3, r2
 8003450:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 800345a:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003462:	735a      	strb	r2, [r3, #13]


	return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	4618      	mov	r0, r3
 8003468:	3750      	adds	r7, #80	; 0x50
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003476:	4a0f      	ldr	r2, [pc, #60]	; (80034b4 <HAL_MspInit+0x44>)
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <HAL_MspInit+0x44>)
 800347a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347c:	f043 0301 	orr.w	r3, r3, #1
 8003480:	6613      	str	r3, [r2, #96]	; 0x60
 8003482:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_MspInit+0x44>)
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <HAL_MspInit+0x44>)
 8003490:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <HAL_MspInit+0x44>)
 8003492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
 800349a:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <HAL_MspInit+0x44>)
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000

080034b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	; 0x28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	605a      	str	r2, [r3, #4]
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a15      	ldr	r2, [pc, #84]	; (800352c <HAL_ADC_MspInit+0x74>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d123      	bne.n	8003522 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80034da:	4a15      	ldr	r2, [pc, #84]	; (8003530 <HAL_ADC_MspInit+0x78>)
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <HAL_ADC_MspInit+0x78>)
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80034e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034e6:	4b12      	ldr	r3, [pc, #72]	; (8003530 <HAL_ADC_MspInit+0x78>)
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ee:	613b      	str	r3, [r7, #16]
 80034f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f2:	4a0f      	ldr	r2, [pc, #60]	; (8003530 <HAL_ADC_MspInit+0x78>)
 80034f4:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <HAL_ADC_MspInit+0x78>)
 80034f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f8:	f043 0304 	orr.w	r3, r3, #4
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <HAL_ADC_MspInit+0x78>)
 8003500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003502:	f003 0304 	and.w	r3, r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
 8003508:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800350a:	2304      	movs	r3, #4
 800350c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800350e:	230b      	movs	r3, #11
 8003510:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003516:	f107 0314 	add.w	r3, r7, #20
 800351a:	4619      	mov	r1, r3
 800351c:	4805      	ldr	r0, [pc, #20]	; (8003534 <HAL_ADC_MspInit+0x7c>)
 800351e:	f001 fdc7 	bl	80050b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	50040000 	.word	0x50040000
 8003530:	40021000 	.word	0x40021000
 8003534:	48000800 	.word	0x48000800

08003538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_I2C_MspInit+0x7c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d128      	bne.n	80035ac <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800355a:	4a17      	ldr	r2, [pc, #92]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 800355c:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 800355e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003566:	4b14      	ldr	r3, [pc, #80]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003572:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003578:	2312      	movs	r3, #18
 800357a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800357c:	2301      	movs	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003584:	2304      	movs	r3, #4
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003588:	f107 0314 	add.w	r3, r7, #20
 800358c:	4619      	mov	r1, r3
 800358e:	480b      	ldr	r0, [pc, #44]	; (80035bc <HAL_I2C_MspInit+0x84>)
 8003590:	f001 fd8e 	bl	80050b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003594:	4a08      	ldr	r2, [pc, #32]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 8003596:	4b08      	ldr	r3, [pc, #32]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800359e:	6593      	str	r3, [r2, #88]	; 0x58
 80035a0:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <HAL_I2C_MspInit+0x80>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40005400 	.word	0x40005400
 80035b8:	40021000 	.word	0x40021000
 80035bc:	48000400 	.word	0x48000400

080035c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_RTC_MspInit+0x30>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d107      	bne.n	80035e2 <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035d2:	4a08      	ldr	r2, [pc, #32]	; (80035f4 <HAL_RTC_MspInit+0x34>)
 80035d4:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <HAL_RTC_MspInit+0x34>)
 80035d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40002800 	.word	0x40002800
 80035f4:	40021000 	.word	0x40021000

080035f8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003600:	f107 0314 	add.w	r3, r7, #20
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1c      	ldr	r2, [pc, #112]	; (8003688 <HAL_TIM_IC_MspInit+0x90>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d131      	bne.n	800367e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800361a:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003624:	6613      	str	r3, [r2, #96]	; 0x60
 8003626:	4b19      	ldr	r3, [pc, #100]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362e:	613b      	str	r3, [r7, #16]
 8003630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	4a16      	ldr	r2, [pc, #88]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 8003634:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 8003636:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800363e:	4b13      	ldr	r3, [pc, #76]	; (800368c <HAL_TIM_IC_MspInit+0x94>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	60fb      	str	r3, [r7, #12]
 8003648:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800364a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800364e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800365c:	2301      	movs	r3, #1
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	4619      	mov	r1, r3
 8003666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800366a:	f001 fd21 	bl	80050b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	201b      	movs	r0, #27
 8003674:	f001 fc67 	bl	8004f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003678:	201b      	movs	r0, #27
 800367a:	f001 fc80 	bl	8004f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <HAL_TIM_Base_MspInit+0x38>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10b      	bne.n	80036ba <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <HAL_TIM_Base_MspInit+0x3c>)
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <HAL_TIM_Base_MspInit+0x3c>)
 80036a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a8:	f043 0310 	orr.w	r3, r3, #16
 80036ac:	6593      	str	r3, [r2, #88]	; 0x58
 80036ae:	4b07      	ldr	r3, [pc, #28]	; (80036cc <HAL_TIM_Base_MspInit+0x3c>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40001000 	.word	0x40001000
 80036cc:	40021000 	.word	0x40021000

080036d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b08c      	sub	sp, #48	; 0x30
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	2200      	movs	r2, #0
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	605a      	str	r2, [r3, #4]
 80036e2:	609a      	str	r2, [r3, #8]
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a4a      	ldr	r2, [pc, #296]	; (8003818 <HAL_UART_MspInit+0x148>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d14e      	bne.n	8003790 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036f2:	4a4a      	ldr	r2, [pc, #296]	; (800381c <HAL_UART_MspInit+0x14c>)
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_UART_MspInit+0x14c>)
 80036f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036fc:	6613      	str	r3, [r2, #96]	; 0x60
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_UART_MspInit+0x14c>)
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	4a44      	ldr	r2, [pc, #272]	; (800381c <HAL_UART_MspInit+0x14c>)
 800370c:	4b43      	ldr	r3, [pc, #268]	; (800381c <HAL_UART_MspInit+0x14c>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003716:	4b41      	ldr	r3, [pc, #260]	; (800381c <HAL_UART_MspInit+0x14c>)
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003722:	4a3e      	ldr	r2, [pc, #248]	; (800381c <HAL_UART_MspInit+0x14c>)
 8003724:	4b3d      	ldr	r3, [pc, #244]	; (800381c <HAL_UART_MspInit+0x14c>)
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	f043 0302 	orr.w	r3, r3, #2
 800372c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_UART_MspInit+0x14c>)
 8003730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800373a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800373e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003748:	2303      	movs	r3, #3
 800374a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800374c:	2307      	movs	r3, #7
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003750:	f107 031c 	add.w	r3, r7, #28
 8003754:	4619      	mov	r1, r3
 8003756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800375a:	f001 fca9 	bl	80050b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800375e:	2340      	movs	r3, #64	; 0x40
 8003760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003762:	2302      	movs	r3, #2
 8003764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800376a:	2303      	movs	r3, #3
 800376c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800376e:	2307      	movs	r3, #7
 8003770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003772:	f107 031c 	add.w	r3, r7, #28
 8003776:	4619      	mov	r1, r3
 8003778:	4829      	ldr	r0, [pc, #164]	; (8003820 <HAL_UART_MspInit+0x150>)
 800377a:	f001 fc99 	bl	80050b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	2025      	movs	r0, #37	; 0x25
 8003784:	f001 fbdf 	bl	8004f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003788:	2025      	movs	r0, #37	; 0x25
 800378a:	f001 fbf8 	bl	8004f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800378e:	e03f      	b.n	8003810 <HAL_UART_MspInit+0x140>
  else if(huart->Instance==USART2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a23      	ldr	r2, [pc, #140]	; (8003824 <HAL_UART_MspInit+0x154>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d13a      	bne.n	8003810 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART2_CLK_ENABLE();
 800379a:	4a20      	ldr	r2, [pc, #128]	; (800381c <HAL_UART_MspInit+0x14c>)
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <HAL_UART_MspInit+0x14c>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a4:	6593      	str	r3, [r2, #88]	; 0x58
 80037a6:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_UART_MspInit+0x14c>)
 80037a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b2:	4a1a      	ldr	r2, [pc, #104]	; (800381c <HAL_UART_MspInit+0x14c>)
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_UART_MspInit+0x14c>)
 80037b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037be:	4b17      	ldr	r3, [pc, #92]	; (800381c <HAL_UART_MspInit+0x14c>)
 80037c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037ca:	2304      	movs	r3, #4
 80037cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ce:	2302      	movs	r3, #2
 80037d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037da:	2307      	movs	r3, #7
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037de:	f107 031c 	add.w	r3, r7, #28
 80037e2:	4619      	mov	r1, r3
 80037e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e8:	f001 fc62 	bl	80050b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	2303      	movs	r3, #3
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80037fe:	2303      	movs	r3, #3
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003802:	f107 031c 	add.w	r3, r7, #28
 8003806:	4619      	mov	r1, r3
 8003808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380c:	f001 fc50 	bl	80050b0 <HAL_GPIO_Init>
}
 8003810:	bf00      	nop
 8003812:	3730      	adds	r7, #48	; 0x30
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40013800 	.word	0x40013800
 800381c:	40021000 	.word	0x40021000
 8003820:	48000400 	.word	0x48000400
 8003824:	40004400 	.word	0x40004400

08003828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800382c:	e7fe      	b.n	800382c <NMI_Handler+0x4>

0800382e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003832:	e7fe      	b.n	8003832 <HardFault_Handler+0x4>

08003834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003838:	e7fe      	b.n	8003838 <MemManage_Handler+0x4>

0800383a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383e:	e7fe      	b.n	800383e <BusFault_Handler+0x4>

08003840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003844:	e7fe      	b.n	8003844 <UsageFault_Handler+0x4>

08003846 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003866:	bf00      	nop
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003874:	f000 f8d0 	bl	8003a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003878:	bf00      	nop
 800387a:	bd80      	pop	{r7, pc}

0800387c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM1_CC_IRQHandler+0x10>)
 8003882:	f004 fb93 	bl	8007fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	200003f0 	.word	0x200003f0

08003890 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <USART1_IRQHandler+0x10>)
 8003896:	f005 f901 	bl	8008a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	200002e8 	.word	0x200002e8

080038a4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80038ac:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <_sbrk+0x50>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <_sbrk+0x16>
		heap_end = &end;
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <_sbrk+0x50>)
 80038b6:	4a10      	ldr	r2, [pc, #64]	; (80038f8 <_sbrk+0x54>)
 80038b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80038ba:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <_sbrk+0x50>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80038c0:	4b0c      	ldr	r3, [pc, #48]	; (80038f4 <_sbrk+0x50>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4413      	add	r3, r2
 80038c8:	466a      	mov	r2, sp
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d907      	bls.n	80038de <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80038ce:	f006 f8b9 	bl	8009a44 <__errno>
 80038d2:	4602      	mov	r2, r0
 80038d4:	230c      	movs	r3, #12
 80038d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80038d8:	f04f 33ff 	mov.w	r3, #4294967295
 80038dc:	e006      	b.n	80038ec <_sbrk+0x48>
	}

	heap_end += incr;
 80038de:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <_sbrk+0x50>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	4a03      	ldr	r2, [pc, #12]	; (80038f4 <_sbrk+0x50>)
 80038e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000218 	.word	0x20000218
 80038f8:	20000508 	.word	0x20000508

080038fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <SystemInit+0x5c>)
 8003902:	4b15      	ldr	r3, [pc, #84]	; (8003958 <SystemInit+0x5c>)
 8003904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800390c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003910:	4a12      	ldr	r2, [pc, #72]	; (800395c <SystemInit+0x60>)
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <SystemInit+0x60>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f043 0301 	orr.w	r3, r3, #1
 800391a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <SystemInit+0x60>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <SystemInit+0x60>)
 8003924:	4b0d      	ldr	r3, [pc, #52]	; (800395c <SystemInit+0x60>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800392c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003930:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003932:	4b0a      	ldr	r3, [pc, #40]	; (800395c <SystemInit+0x60>)
 8003934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003938:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800393a:	4a08      	ldr	r2, [pc, #32]	; (800395c <SystemInit+0x60>)
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <SystemInit+0x60>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003944:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003946:	4b05      	ldr	r3, [pc, #20]	; (800395c <SystemInit+0x60>)
 8003948:	2200      	movs	r2, #0
 800394a:	619a      	str	r2, [r3, #24]
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00
 800395c:	40021000 	.word	0x40021000

08003960 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003966:	2300      	movs	r3, #0
 8003968:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <HAL_Init+0x3c>)
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_Init+0x3c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003974:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003976:	2003      	movs	r0, #3
 8003978:	f001 fada 	bl	8004f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800397c:	2000      	movs	r0, #0
 800397e:	f000 f80f 	bl	80039a0 <HAL_InitTick>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	71fb      	strb	r3, [r7, #7]
 800398c:	e001      	b.n	8003992 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800398e:	f7ff fd6f 	bl	8003470 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003992:	79fb      	ldrb	r3, [r7, #7]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40022000 	.word	0x40022000

080039a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80039ac:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_InitTick+0x6c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d023      	beq.n	80039fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_InitTick+0x70>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <HAL_InitTick+0x6c>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	4619      	mov	r1, r3
 80039be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fae5 	bl	8004f9a <HAL_SYSTICK_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10f      	bne.n	80039f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b0f      	cmp	r3, #15
 80039da:	d809      	bhi.n	80039f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039dc:	2200      	movs	r2, #0
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	f04f 30ff 	mov.w	r0, #4294967295
 80039e4:	f001 faaf 	bl	8004f46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_InitTick+0x74>)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e007      	b.n	8003a00 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e004      	b.n	8003a00 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
 80039fa:	e001      	b.n	8003a00 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	2000000c 	.word	0x2000000c
 8003a10:	20000004 	.word	0x20000004
 8003a14:	20000008 	.word	0x20000008

08003a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_IncTick+0x20>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_IncTick+0x24>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4413      	add	r3, r2
 8003a28:	4a04      	ldr	r2, [pc, #16]	; (8003a3c <HAL_IncTick+0x24>)
 8003a2a:	6013      	str	r3, [r2, #0]
}
 8003a2c:	bf00      	nop
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	2000000c 	.word	0x2000000c
 8003a3c:	20000500 	.word	0x20000500

08003a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  return uwTick;
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <HAL_GetTick+0x14>)
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20000500 	.word	0x20000500

08003a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a60:	f7ff ffee 	bl	8003a40 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a70:	d005      	beq.n	8003a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a72:	4b09      	ldr	r3, [pc, #36]	; (8003a98 <HAL_Delay+0x40>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a7e:	bf00      	nop
 8003a80:	f7ff ffde 	bl	8003a40 <HAL_GetTick>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	1ad2      	subs	r2, r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d3f7      	bcc.n	8003a80 <HAL_Delay+0x28>
  {
  }
}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	2000000c 	.word	0x2000000c

08003a9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	609a      	str	r2, [r3, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr

08003ac2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	b083      	sub	sp, #12
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]
 8003aca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <LL_ADC_SetOffset+0x44>)
 8003b26:	4013      	ands	r3, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003b2e:	683a      	ldr	r2, [r7, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003b3c:	bf00      	nop
 8003b3e:	371c      	adds	r7, #28
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr
 8003b48:	03fff000 	.word	0x03fff000

08003b4c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3360      	adds	r3, #96	; 0x60
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	4413      	add	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	461a      	mov	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	615a      	str	r2, [r3, #20]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	3330      	adds	r3, #48	; 0x30
 8003be4:	461a      	mov	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	0a1b      	lsrs	r3, r3, #8
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	4413      	add	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 031f 	and.w	r3, r3, #31
 8003bfe:	211f      	movs	r1, #31
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	43db      	mvns	r3, r3
 8003c06:	401a      	ands	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	0e9b      	lsrs	r3, r3, #26
 8003c0c:	f003 011f 	and.w	r1, r3, #31
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f003 031f 	and.w	r3, r3, #31
 8003c16:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c20:	bf00      	nop
 8003c22:	371c      	adds	r7, #28
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0e5b      	lsrs	r3, r3, #25
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f003 0304 	and.w	r3, r3, #4
 8003c48:	4413      	add	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	0d1b      	lsrs	r3, r3, #20
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	2107      	movs	r1, #7
 8003c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	401a      	ands	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0d1b      	lsrs	r3, r3, #20
 8003c66:	f003 031f 	and.w	r3, r3, #31
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c76:	bf00      	nop
 8003c78:	371c      	adds	r7, #28
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0318 	and.w	r3, r3, #24
 8003ca6:	4908      	ldr	r1, [pc, #32]	; (8003cc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003ca8:	40d9      	lsrs	r1, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	400b      	ands	r3, r1
 8003cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	0007ffff 	.word	0x0007ffff

08003ccc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003cdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6093      	str	r3, [r2, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d04:	d101      	bne.n	8003d0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d2c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d54:	d101      	bne.n	8003d5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e000      	b.n	8003d5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003d78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d7c:	f043 0201 	orr.w	r2, r3, #1
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003da0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003da4:	f043 0202 	orr.w	r2, r3, #2
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <LL_ADC_IsEnabled+0x18>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <LL_ADC_IsEnabled+0x1a>
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d101      	bne.n	8003df6 <LL_ADC_IsDisableOngoing+0x18>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_ADC_IsDisableOngoing+0x1a>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e18:	f043 0204 	orr.w	r2, r3, #4
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e40:	f043 0210 	orr.w	r2, r3, #16
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d101      	bne.n	8003e6c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d101      	bne.n	8003eba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b088      	sub	sp, #32
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e12f      	b.n	8004142 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d109      	bne.n	8003f04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff fae1 	bl	80034b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7ff fef1 	bl	8003cf0 <LL_ADC_IsDeepPowerDownEnabled>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d004      	beq.n	8003f1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff fed7 	bl	8003ccc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff ff0c 	bl	8003d40 <LL_ADC_IsInternalRegulatorEnabled>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d115      	bne.n	8003f5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff fef0 	bl	8003d18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f38:	4b84      	ldr	r3, [pc, #528]	; (800414c <HAL_ADC_Init+0x284>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	099b      	lsrs	r3, r3, #6
 8003f3e:	4a84      	ldr	r2, [pc, #528]	; (8004150 <HAL_ADC_Init+0x288>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	099b      	lsrs	r3, r3, #6
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f4c:	e002      	b.n	8003f54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f9      	bne.n	8003f4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff feee 	bl	8003d40 <LL_ADC_IsInternalRegulatorEnabled>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10d      	bne.n	8003f86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7ff ff62 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8003f90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f040 80c8 	bne.w	8004130 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 80c4 	bne.w	8004130 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fb0:	f043 0202 	orr.w	r2, r3, #2
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff fefb 	bl	8003db8 <LL_ADC_IsEnabled>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fc8:	4862      	ldr	r0, [pc, #392]	; (8004154 <HAL_ADC_Init+0x28c>)
 8003fca:	f7ff fef5 	bl	8003db8 <LL_ADC_IsEnabled>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	4619      	mov	r1, r3
 8003fda:	485f      	ldr	r0, [pc, #380]	; (8004158 <HAL_ADC_Init+0x290>)
 8003fdc:	f7ff fd5e 	bl	8003a9c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	7e5b      	ldrb	r3, [r3, #25]
 8003fe4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fea:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003ff0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003ff6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ffe:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 3020 	ldrb.w	r3, [r3, #32]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004012:	3b01      	subs	r3, #1
 8004014:	045b      	lsls	r3, r3, #17
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004028:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004032:	69ba      	ldr	r2, [r7, #24]
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68d9      	ldr	r1, [r3, #12]
 8004042:	4b46      	ldr	r3, [pc, #280]	; (800415c <HAL_ADC_Init+0x294>)
 8004044:	400b      	ands	r3, r1
 8004046:	69b9      	ldr	r1, [r7, #24]
 8004048:	430b      	orrs	r3, r1
 800404a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4618      	mov	r0, r3
 8004052:	f7ff feff 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004056:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff20 	bl	8003ea2 <LL_ADC_INJ_IsConversionOngoing>
 8004062:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d140      	bne.n	80040ec <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d13d      	bne.n	80040ec <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	7e1b      	ldrb	r3, [r3, #24]
 8004078:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800407a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004082:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004096:	f023 0306 	bic.w	r3, r3, #6
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	430b      	orrs	r3, r1
 800409e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d118      	bne.n	80040dc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040b8:	f023 0304 	bic.w	r3, r3, #4
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040c4:	4308      	orrs	r0, r1
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80040ca:	4308      	orrs	r0, r1
 80040cc:	6879      	ldr	r1, [r7, #4]
 80040ce:	6c89      	ldr	r1, [r1, #72]	; 0x48
 80040d0:	4301      	orrs	r1, r0
 80040d2:	430b      	orrs	r3, r1
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	6113      	str	r3, [r2, #16]
 80040da:	e007      	b.n	80040ec <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	6912      	ldr	r2, [r2, #16]
 80040e6:	f022 0201 	bic.w	r2, r2, #1
 80040ea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	6812      	ldr	r2, [r2, #0]
 80040fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040fe:	f022 010f 	bic.w	r1, r2, #15
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	69d2      	ldr	r2, [r2, #28]
 8004106:	3a01      	subs	r2, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	631a      	str	r2, [r3, #48]	; 0x30
 800410c:	e007      	b.n	800411e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6812      	ldr	r2, [r2, #0]
 8004116:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004118:	f022 020f 	bic.w	r2, r2, #15
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	f043 0201 	orr.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	659a      	str	r2, [r3, #88]	; 0x58
 800412e:	e007      	b.n	8004140 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004134:	f043 0210 	orr.w	r2, r3, #16
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000004 	.word	0x20000004
 8004150:	053e2d63 	.word	0x053e2d63
 8004154:	50040000 	.word	0x50040000
 8004158:	50040300 	.word	0x50040300
 800415c:	fff0c007 	.word	0xfff0c007

08004160 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff fe71 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d14f      	bne.n	8004218 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_ADC_Start+0x26>
 8004182:	2302      	movs	r3, #2
 8004184:	e04b      	b.n	800421e <HAL_ADC_Start+0xbe>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fd3e 	bl	8004c10 <ADC_Enable>
 8004194:	4603      	mov	r3, r0
 8004196:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d137      	bne.n	800420e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041be:	d106      	bne.n	80041ce <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	f023 0206 	bic.w	r2, r3, #6
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80041cc:	e002      	b.n	80041d4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	221c      	movs	r2, #28
 80041da:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80041fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff fdfc 	bl	8003e04 <LL_ADC_REG_StartConversion>
 800420c:	e006      	b.n	800421c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004216:	e001      	b.n	800421c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004218:	2302      	movs	r3, #2
 800421a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800421c:	7bfb      	ldrb	r3, [r7, #15]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004234:	2b01      	cmp	r3, #1
 8004236:	d101      	bne.n	800423c <HAL_ADC_Stop+0x16>
 8004238:	2302      	movs	r3, #2
 800423a:	e023      	b.n	8004284 <HAL_ADC_Stop+0x5e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004244:	2103      	movs	r1, #3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 fc28 	bl	8004a9c <ADC_ConversionStop>
 800424c:	4603      	mov	r3, r0
 800424e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d111      	bne.n	800427a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fd3c 	bl	8004cd4 <ADC_Disable>
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d109      	bne.n	800427a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800426e:	f023 0301 	bic.w	r3, r3, #1
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004282:	7bfb      	ldrb	r3, [r7, #15]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b0b6      	sub	sp, #216	; 0xd8
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x22>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e3d3      	b.n	8004a72 <HAL_ADC_ConfigChannel+0x7ca>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7ff fdbc 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f040 83b8 	bne.w	8004a54 <HAL_ADC_ConfigChannel+0x7ac>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b05      	cmp	r3, #5
 80042ea:	d824      	bhi.n	8004336 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	3b02      	subs	r3, #2
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d81b      	bhi.n	800432e <HAL_ADC_ConfigChannel+0x86>
 80042f6:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_ADC_ConfigChannel+0x54>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	0800430d 	.word	0x0800430d
 8004300:	08004315 	.word	0x08004315
 8004304:	0800431d 	.word	0x0800431d
 8004308:	08004325 	.word	0x08004325
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	220c      	movs	r2, #12
 8004310:	605a      	str	r2, [r3, #4]
          break;
 8004312:	e010      	b.n	8004336 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2212      	movs	r2, #18
 8004318:	605a      	str	r2, [r3, #4]
          break;
 800431a:	e00c      	b.n	8004336 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	2218      	movs	r2, #24
 8004320:	605a      	str	r2, [r3, #4]
          break;
 8004322:	e008      	b.n	8004336 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800432a:	605a      	str	r2, [r3, #4]
          break;
 800432c:	e003      	b.n	8004336 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2206      	movs	r2, #6
 8004332:	605a      	str	r2, [r3, #4]
          break;
 8004334:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7ff fc46 	bl	8003bd4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff fd81 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004352:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff fda1 	bl	8003ea2 <LL_ADC_INJ_IsConversionOngoing>
 8004360:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004364:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004368:	2b00      	cmp	r3, #0
 800436a:	f040 81c1 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x448>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800436e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 81bc 	bne.w	80046f0 <HAL_ADC_ConfigChannel+0x448>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004380:	d10f      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0xfa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	4619      	mov	r1, r3
 800438e:	f7ff fc4d 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff fc07 	bl	8003bae <LL_ADC_SetSamplingTimeCommonConfig>
 80043a0:	e00e      	b.n	80043c0 <HAL_ADC_ConfigChannel+0x118>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6819      	ldr	r1, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f7ff fc3c 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff fbf7 	bl	8003bae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	08db      	lsrs	r3, r3, #3
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d00a      	beq.n	80043f8 <HAL_ADC_ConfigChannel+0x150>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6919      	ldr	r1, [r3, #16]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043f2:	f7ff fb87 	bl	8003b04 <LL_ADC_SetOffset>
 80043f6:	e17b      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x448>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fba4 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004404:	4603      	mov	r3, r0
 8004406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10a      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x17c>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2100      	movs	r1, #0
 8004414:	4618      	mov	r0, r3
 8004416:	f7ff fb99 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 800441a:	4603      	mov	r3, r0
 800441c:	0e9b      	lsrs	r3, r3, #26
 800441e:	f003 021f 	and.w	r2, r3, #31
 8004422:	e01e      	b.n	8004462 <HAL_ADC_ConfigChannel+0x1ba>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2100      	movs	r1, #0
 800442a:	4618      	mov	r0, r3
 800442c:	f7ff fb8e 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004436:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800443a:	fa93 f3a3 	rbit	r3, r3
 800443e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004446:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800444a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_ADC_ConfigChannel+0x1ae>
  {
    return 32U;
 8004452:	2320      	movs	r3, #32
 8004454:	e004      	b.n	8004460 <HAL_ADC_ConfigChannel+0x1b8>
  }
  return __builtin_clz(value);
 8004456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800445a:	fab3 f383 	clz	r3, r3
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446a:	2b00      	cmp	r3, #0
 800446c:	d105      	bne.n	800447a <HAL_ADC_ConfigChannel+0x1d2>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	0e9b      	lsrs	r3, r3, #26
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	e018      	b.n	80044ac <HAL_ADC_ConfigChannel+0x204>
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004482:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800448e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_ADC_ConfigChannel+0x1fa>
    return 32U;
 800449e:	2320      	movs	r3, #32
 80044a0:	e004      	b.n	80044ac <HAL_ADC_ConfigChannel+0x204>
  return __builtin_clz(value);
 80044a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80044a6:	fab3 f383 	clz	r3, r3
 80044aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d106      	bne.n	80044be <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2200      	movs	r2, #0
 80044b6:	2100      	movs	r1, #0
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fb5d 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2101      	movs	r1, #1
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff fb41 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10a      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x242>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2101      	movs	r1, #1
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff fb36 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80044e0:	4603      	mov	r3, r0
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 021f 	and.w	r2, r3, #31
 80044e8:	e01e      	b.n	8004528 <HAL_ADC_ConfigChannel+0x280>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fb2b 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004500:	fa93 f3a3 	rbit	r3, r3
 8004504:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800450c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004510:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_ADC_ConfigChannel+0x274>
    return 32U;
 8004518:	2320      	movs	r3, #32
 800451a:	e004      	b.n	8004526 <HAL_ADC_ConfigChannel+0x27e>
  return __builtin_clz(value);
 800451c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004530:	2b00      	cmp	r3, #0
 8004532:	d105      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x298>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	e018      	b.n	8004572 <HAL_ADC_ConfigChannel+0x2ca>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800454c:	fa93 f3a3 	rbit	r3, r3
 8004550:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004554:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800455c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x2c0>
    return 32U;
 8004564:	2320      	movs	r3, #32
 8004566:	e004      	b.n	8004572 <HAL_ADC_ConfigChannel+0x2ca>
  return __builtin_clz(value);
 8004568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800456c:	fab3 f383 	clz	r3, r3
 8004570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004572:	429a      	cmp	r2, r3
 8004574:	d106      	bne.n	8004584 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2200      	movs	r2, #0
 800457c:	2101      	movs	r1, #1
 800457e:	4618      	mov	r0, r3
 8004580:	f7ff fafa 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fade 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004590:	4603      	mov	r3, r0
 8004592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x308>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2102      	movs	r1, #2
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fad3 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80045a6:	4603      	mov	r3, r0
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	f003 021f 	and.w	r2, r3, #31
 80045ae:	e01e      	b.n	80045ee <HAL_ADC_ConfigChannel+0x346>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2102      	movs	r1, #2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7ff fac8 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 80045bc:	4603      	mov	r3, r0
 80045be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045c6:	fa93 f3a3 	rbit	r3, r3
 80045ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80045ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80045d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_ADC_ConfigChannel+0x33a>
    return 32U;
 80045de:	2320      	movs	r3, #32
 80045e0:	e004      	b.n	80045ec <HAL_ADC_ConfigChannel+0x344>
  return __builtin_clz(value);
 80045e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e6:	fab3 f383 	clz	r3, r3
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <HAL_ADC_ConfigChannel+0x35e>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	0e9b      	lsrs	r3, r3, #26
 8004600:	f003 031f 	and.w	r3, r3, #31
 8004604:	e016      	b.n	8004634 <HAL_ADC_ConfigChannel+0x38c>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004612:	fa93 f3a3 	rbit	r3, r3
 8004616:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004618:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800461a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800461e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_ADC_ConfigChannel+0x382>
    return 32U;
 8004626:	2320      	movs	r3, #32
 8004628:	e004      	b.n	8004634 <HAL_ADC_ConfigChannel+0x38c>
  return __builtin_clz(value);
 800462a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800462e:	fab3 f383 	clz	r3, r3
 8004632:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004634:	429a      	cmp	r2, r3
 8004636:	d106      	bne.n	8004646 <HAL_ADC_ConfigChannel+0x39e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	2102      	movs	r1, #2
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fa99 	bl	8003b78 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2103      	movs	r1, #3
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fa7d 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004652:	4603      	mov	r3, r0
 8004654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <HAL_ADC_ConfigChannel+0x3ca>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2103      	movs	r1, #3
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff fa72 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 8004668:	4603      	mov	r3, r0
 800466a:	0e9b      	lsrs	r3, r3, #26
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	e017      	b.n	80046a2 <HAL_ADC_ConfigChannel+0x3fa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2103      	movs	r1, #3
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fa67 	bl	8003b4c <LL_ADC_GetOffsetChannel>
 800467e:	4603      	mov	r3, r0
 8004680:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004684:	fa93 f3a3 	rbit	r3, r3
 8004688:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800468a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800468c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800468e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x3f0>
    return 32U;
 8004694:	2320      	movs	r3, #32
 8004696:	e003      	b.n	80046a0 <HAL_ADC_ConfigChannel+0x3f8>
  return __builtin_clz(value);
 8004698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d105      	bne.n	80046ba <HAL_ADC_ConfigChannel+0x412>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0e9b      	lsrs	r3, r3, #26
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	e011      	b.n	80046de <HAL_ADC_ConfigChannel+0x436>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c2:	fa93 f3a3 	rbit	r3, r3
 80046c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80046c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80046cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x42e>
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e003      	b.n	80046de <HAL_ADC_ConfigChannel+0x436>
  return __builtin_clz(value);
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046de:	429a      	cmp	r2, r3
 80046e0:	d106      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x448>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2103      	movs	r1, #3
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff fa44 	bl	8003b78 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff fb5f 	bl	8003db8 <LL_ADC_IsEnabled>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 813f 	bne.w	8004980 <HAL_ADC_ConfigChannel+0x6d8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	6819      	ldr	r1, [r3, #0]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	461a      	mov	r2, r3
 8004710:	f7ff fab8 	bl	8003c84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	4a8e      	ldr	r2, [pc, #568]	; (8004954 <HAL_ADC_ConfigChannel+0x6ac>)
 800471a:	4293      	cmp	r3, r2
 800471c:	f040 8130 	bne.w	8004980 <HAL_ADC_ConfigChannel+0x6d8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x4a0>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0e9b      	lsrs	r3, r3, #26
 8004736:	3301      	adds	r3, #1
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	2b09      	cmp	r3, #9
 800473e:	bf94      	ite	ls
 8004740:	2301      	movls	r3, #1
 8004742:	2300      	movhi	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e019      	b.n	800477c <HAL_ADC_ConfigChannel+0x4d4>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004756:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004758:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800475a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_ADC_ConfigChannel+0x4bc>
    return 32U;
 8004760:	2320      	movs	r3, #32
 8004762:	e003      	b.n	800476c <HAL_ADC_ConfigChannel+0x4c4>
  return __builtin_clz(value);
 8004764:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004766:	fab3 f383 	clz	r3, r3
 800476a:	b2db      	uxtb	r3, r3
 800476c:	3301      	adds	r3, #1
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2b09      	cmp	r3, #9
 8004774:	bf94      	ite	ls
 8004776:	2301      	movls	r3, #1
 8004778:	2300      	movhi	r3, #0
 800477a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800477c:	2b00      	cmp	r3, #0
 800477e:	d079      	beq.n	8004874 <HAL_ADC_ConfigChannel+0x5cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004788:	2b00      	cmp	r3, #0
 800478a:	d107      	bne.n	800479c <HAL_ADC_ConfigChannel+0x4f4>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	0e9b      	lsrs	r3, r3, #26
 8004792:	3301      	adds	r3, #1
 8004794:	069b      	lsls	r3, r3, #26
 8004796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800479a:	e015      	b.n	80047c8 <HAL_ADC_ConfigChannel+0x520>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80047ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x510>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x518>
  return __builtin_clz(value);
 80047b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	069b      	lsls	r3, r3, #26
 80047c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d109      	bne.n	80047e8 <HAL_ADC_ConfigChannel+0x540>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	0e9b      	lsrs	r3, r3, #26
 80047da:	3301      	adds	r3, #1
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2101      	movs	r1, #1
 80047e2:	fa01 f303 	lsl.w	r3, r1, r3
 80047e6:	e017      	b.n	8004818 <HAL_ADC_ConfigChannel+0x570>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80047f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80047fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x55c>
    return 32U;
 8004800:	2320      	movs	r3, #32
 8004802:	e003      	b.n	800480c <HAL_ADC_ConfigChannel+0x564>
  return __builtin_clz(value);
 8004804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004806:	fab3 f383 	clz	r3, r3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	3301      	adds	r3, #1
 800480e:	f003 031f 	and.w	r3, r3, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f303 	lsl.w	r3, r1, r3
 8004818:	ea42 0103 	orr.w	r1, r2, r3
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10a      	bne.n	800483e <HAL_ADC_ConfigChannel+0x596>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	3301      	adds	r3, #1
 8004830:	f003 021f 	and.w	r2, r3, #31
 8004834:	4613      	mov	r3, r2
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	4413      	add	r3, r2
 800483a:	051b      	lsls	r3, r3, #20
 800483c:	e018      	b.n	8004870 <HAL_ADC_ConfigChannel+0x5c8>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	fa93 f3a3 	rbit	r3, r3
 800484a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800484c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8004856:	2320      	movs	r3, #32
 8004858:	e003      	b.n	8004862 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800485a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800485c:	fab3 f383 	clz	r3, r3
 8004860:	b2db      	uxtb	r3, r3
 8004862:	3301      	adds	r3, #1
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004870:	430b      	orrs	r3, r1
 8004872:	e080      	b.n	8004976 <HAL_ADC_ConfigChannel+0x6ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487c:	2b00      	cmp	r3, #0
 800487e:	d107      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x5e8>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	0e9b      	lsrs	r3, r3, #26
 8004886:	3301      	adds	r3, #1
 8004888:	069b      	lsls	r3, r3, #26
 800488a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800488e:	e015      	b.n	80048bc <HAL_ADC_ConfigChannel+0x614>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004898:	fa93 f3a3 	rbit	r3, r3
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <HAL_ADC_ConfigChannel+0x604>
    return 32U;
 80048a8:	2320      	movs	r3, #32
 80048aa:	e003      	b.n	80048b4 <HAL_ADC_ConfigChannel+0x60c>
  return __builtin_clz(value);
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	fab3 f383 	clz	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	3301      	adds	r3, #1
 80048b6:	069b      	lsls	r3, r3, #26
 80048b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x634>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	0e9b      	lsrs	r3, r3, #26
 80048ce:	3301      	adds	r3, #1
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2101      	movs	r1, #1
 80048d6:	fa01 f303 	lsl.w	r3, r1, r3
 80048da:	e017      	b.n	800490c <HAL_ADC_ConfigChannel+0x664>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	fa93 f3a3 	rbit	r3, r3
 80048e8:	61fb      	str	r3, [r7, #28]
  return result;
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80048ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x650>
    return 32U;
 80048f4:	2320      	movs	r3, #32
 80048f6:	e003      	b.n	8004900 <HAL_ADC_ConfigChannel+0x658>
  return __builtin_clz(value);
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	fab3 f383 	clz	r3, r3
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	3301      	adds	r3, #1
 8004902:	f003 031f 	and.w	r3, r3, #31
 8004906:	2101      	movs	r1, #1
 8004908:	fa01 f303 	lsl.w	r3, r1, r3
 800490c:	ea42 0103 	orr.w	r1, r2, r3
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10d      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x690>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0e9b      	lsrs	r3, r3, #26
 8004922:	3301      	adds	r3, #1
 8004924:	f003 021f 	and.w	r2, r3, #31
 8004928:	4613      	mov	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4413      	add	r3, r2
 800492e:	3b1e      	subs	r3, #30
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004936:	e01d      	b.n	8004974 <HAL_ADC_ConfigChannel+0x6cc>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	fa93 f3a3 	rbit	r3, r3
 8004944:	613b      	str	r3, [r7, #16]
  return result;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d103      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x6b0>
    return 32U;
 8004950:	2320      	movs	r3, #32
 8004952:	e005      	b.n	8004960 <HAL_ADC_ConfigChannel+0x6b8>
 8004954:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	3301      	adds	r3, #1
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	4613      	mov	r3, r2
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4413      	add	r3, r2
 800496c:	3b1e      	subs	r3, #30
 800496e:	051b      	lsls	r3, r3, #20
 8004970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004974:	430b      	orrs	r3, r1
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	6892      	ldr	r2, [r2, #8]
 800497a:	4619      	mov	r1, r3
 800497c:	f7ff f956 	bl	8003c2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	4b3d      	ldr	r3, [pc, #244]	; (8004a7c <HAL_ADC_ConfigChannel+0x7d4>)
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d06c      	beq.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800498c:	483c      	ldr	r0, [pc, #240]	; (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 800498e:	f7ff f8ab 	bl	8003ae8 <LL_ADC_GetCommonPathInternalCh>
 8004992:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <HAL_ADC_ConfigChannel+0x7dc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d127      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x748>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80049a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d121      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x748>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a35      	ldr	r2, [pc, #212]	; (8004a88 <HAL_ADC_ConfigChannel+0x7e0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d157      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049be:	4619      	mov	r1, r3
 80049c0:	482f      	ldr	r0, [pc, #188]	; (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 80049c2:	f7ff f87e 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80049c6:	4b31      	ldr	r3, [pc, #196]	; (8004a8c <HAL_ADC_ConfigChannel+0x7e4>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	4a30      	ldr	r2, [pc, #192]	; (8004a90 <HAL_ADC_ConfigChannel+0x7e8>)
 80049ce:	fba2 2303 	umull	r2, r3, r2, r3
 80049d2:	099b      	lsrs	r3, r3, #6
 80049d4:	1c5a      	adds	r2, r3, #1
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049e0:	e002      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x740>
          {
            wait_loop_index--;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3b01      	subs	r3, #1
 80049e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f9      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x73a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049ee:	e03a      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a27      	ldr	r2, [pc, #156]	; (8004a94 <HAL_ADC_ConfigChannel+0x7ec>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d113      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x77a>
 80049fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10d      	bne.n	8004a22 <HAL_ADC_ConfigChannel+0x77a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <HAL_ADC_ConfigChannel+0x7e0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d12a      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4819      	ldr	r0, [pc, #100]	; (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a1c:	f7ff f851 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a20:	e021      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1c      	ldr	r2, [pc, #112]	; (8004a98 <HAL_ADC_ConfigChannel+0x7f0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d11c      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004a2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d116      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <HAL_ADC_ConfigChannel+0x7e0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d111      	bne.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	480c      	ldr	r0, [pc, #48]	; (8004a80 <HAL_ADC_ConfigChannel+0x7d8>)
 8004a4e:	f7ff f838 	bl	8003ac2 <LL_ADC_SetCommonPathInternalCh>
 8004a52:	e008      	b.n	8004a66 <HAL_ADC_ConfigChannel+0x7be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	f043 0220 	orr.w	r2, r3, #32
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8004a6e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	37d8      	adds	r7, #216	; 0xd8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	80080000 	.word	0x80080000
 8004a80:	50040300 	.word	0x50040300
 8004a84:	c7520000 	.word	0xc7520000
 8004a88:	50040000 	.word	0x50040000
 8004a8c:	20000004 	.word	0x20000004
 8004a90:	053e2d63 	.word	0x053e2d63
 8004a94:	cb840000 	.word	0xcb840000
 8004a98:	80000001 	.word	0x80000001

08004a9c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b088      	sub	sp, #32
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff f9ce 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004ab8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff f9ef 	bl	8003ea2 <LL_ADC_INJ_IsConversionOngoing>
 8004ac4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d103      	bne.n	8004ad4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8097 	beq.w	8004c02 <ADC_ConversionStop+0x166>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02a      	beq.n	8004b38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7e5b      	ldrb	r3, [r3, #25]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d126      	bne.n	8004b38 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7e1b      	ldrb	r3, [r3, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d122      	bne.n	8004b38 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004af2:	2301      	movs	r3, #1
 8004af4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004af6:	e014      	b.n	8004b22 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4a44      	ldr	r2, [pc, #272]	; (8004c0c <ADC_ConversionStop+0x170>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d90d      	bls.n	8004b1c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b04:	f043 0210 	orr.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b10:	f043 0201 	orr.w	r2, r3, #1
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e073      	b.n	8004c04 <ADC_ConversionStop+0x168>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	d1e3      	bne.n	8004af8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2240      	movs	r2, #64	; 0x40
 8004b36:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d014      	beq.n	8004b68 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff f986 	bl	8003e54 <LL_ADC_REG_IsConversionOngoing>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f943 	bl	8003dde <LL_ADC_IsDisableOngoing>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff f962 	bl	8003e2c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d014      	beq.n	8004b98 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f995 	bl	8003ea2 <LL_ADC_INJ_IsConversionOngoing>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00c      	beq.n	8004b98 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff f92b 	bl	8003dde <LL_ADC_IsDisableOngoing>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff f971 	bl	8003e7a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d004      	beq.n	8004ba8 <ADC_ConversionStop+0x10c>
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d105      	bne.n	8004bae <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004ba2:	230c      	movs	r3, #12
 8004ba4:	617b      	str	r3, [r7, #20]
        break;
 8004ba6:	e005      	b.n	8004bb4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004ba8:	2308      	movs	r3, #8
 8004baa:	617b      	str	r3, [r7, #20]
        break;
 8004bac:	e002      	b.n	8004bb4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	617b      	str	r3, [r7, #20]
        break;
 8004bb2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004bb4:	f7fe ff44 	bl	8003a40 <HAL_GetTick>
 8004bb8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bba:	e01b      	b.n	8004bf4 <ADC_ConversionStop+0x158>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004bbc:	f7fe ff40 	bl	8003a40 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	2b05      	cmp	r3, #5
 8004bc8:	d914      	bls.n	8004bf4 <ADC_ConversionStop+0x158>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00d      	beq.n	8004bf4 <ADC_ConversionStop+0x158>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f043 0210 	orr.w	r2, r3, #16
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e007      	b.n	8004c04 <ADC_ConversionStop+0x168>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1dc      	bne.n	8004bbc <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	a33fffff 	.word	0xa33fffff

08004c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff f8cb 	bl	8003db8 <LL_ADC_IsEnabled>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d14d      	bne.n	8004cc4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689a      	ldr	r2, [r3, #8]
 8004c2e:	4b28      	ldr	r3, [pc, #160]	; (8004cd0 <ADC_Enable+0xc0>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3a:	f043 0210 	orr.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c46:	f043 0201 	orr.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e039      	b.n	8004cc6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff f886 	bl	8003d68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004c5c:	f7fe fef0 	bl	8003a40 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c62:	e028      	b.n	8004cb6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff f8a5 	bl	8003db8 <LL_ADC_IsEnabled>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff f875 	bl	8003d68 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c7e:	f7fe fedf 	bl	8003a40 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d914      	bls.n	8004cb6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d00d      	beq.n	8004cb6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f043 0210 	orr.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e007      	b.n	8004cc6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d1cf      	bne.n	8004c64 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	8000003f 	.word	0x8000003f

08004cd4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f87c 	bl	8003dde <LL_ADC_IsDisableOngoing>
 8004ce6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff f863 	bl	8003db8 <LL_ADC_IsEnabled>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d047      	beq.n	8004d88 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d144      	bne.n	8004d88 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f003 030d 	and.w	r3, r3, #13
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d10c      	bne.n	8004d26 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7ff f83d 	bl	8003d90 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d1e:	f7fe fe8f 	bl	8003a40 <HAL_GetTick>
 8004d22:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d24:	e029      	b.n	8004d7a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2a:	f043 0210 	orr.w	r2, r3, #16
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	f043 0201 	orr.w	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e023      	b.n	8004d8a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d42:	f7fe fe7d 	bl	8003a40 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d914      	bls.n	8004d7a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00d      	beq.n	8004d7a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	f043 0210 	orr.w	r2, r3, #16
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e007      	b.n	8004d8a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0301 	and.w	r3, r3, #1
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1dc      	bne.n	8004d42 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f003 0307 	and.w	r3, r3, #7
 8004da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004db0:	4013      	ands	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dc6:	4a04      	ldr	r2, [pc, #16]	; (8004dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	60d3      	str	r3, [r2, #12]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <__NVIC_GetPriorityGrouping+0x18>)
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	0a1b      	lsrs	r3, r3, #8
 8004de6:	f003 0307 	and.w	r3, r3, #7
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr
 8004df4:	e000ed00 	.word	0xe000ed00

08004df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	db0b      	blt.n	8004e22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e0a:	4909      	ldr	r1, [pc, #36]	; (8004e30 <__NVIC_EnableIRQ+0x38>)
 8004e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	79fa      	ldrb	r2, [r7, #7]
 8004e14:	f002 021f 	and.w	r2, r2, #31
 8004e18:	2001      	movs	r0, #1
 8004e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	e000e100 	.word	0xe000e100

08004e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db0a      	blt.n	8004e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e48:	490d      	ldr	r1, [pc, #52]	; (8004e80 <__NVIC_SetPriority+0x4c>)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	683a      	ldr	r2, [r7, #0]
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	440b      	add	r3, r1
 8004e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e5c:	e00a      	b.n	8004e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5e:	4909      	ldr	r1, [pc, #36]	; (8004e84 <__NVIC_SetPriority+0x50>)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	3b04      	subs	r3, #4
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	440b      	add	r3, r1
 8004e72:	761a      	strb	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000e100 	.word	0xe000e100
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b089      	sub	sp, #36	; 0x24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	bf28      	it	cs
 8004ea6:	2304      	movcs	r3, #4
 8004ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3304      	adds	r3, #4
 8004eae:	2b06      	cmp	r3, #6
 8004eb0:	d902      	bls.n	8004eb8 <NVIC_EncodePriority+0x30>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	3b03      	subs	r3, #3
 8004eb6:	e000      	b.n	8004eba <NVIC_EncodePriority+0x32>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	1e5a      	subs	r2, r3, #1
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	401a      	ands	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ece:	2101      	movs	r1, #1
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	1e59      	subs	r1, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	4313      	orrs	r3, r2
         );
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004efc:	d301      	bcc.n	8004f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00f      	b.n	8004f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f02:	4a0a      	ldr	r2, [pc, #40]	; (8004f2c <SysTick_Config+0x40>)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f0a:	210f      	movs	r1, #15
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	f7ff ff90 	bl	8004e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <SysTick_Config+0x40>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f1a:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <SysTick_Config+0x40>)
 8004f1c:	2207      	movs	r2, #7
 8004f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	e000e010 	.word	0xe000e010

08004f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff ff2b 	bl	8004d94 <__NVIC_SetPriorityGrouping>
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
 8004f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f58:	f7ff ff40 	bl	8004ddc <__NVIC_GetPriorityGrouping>
 8004f5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	6978      	ldr	r0, [r7, #20]
 8004f64:	f7ff ff90 	bl	8004e88 <NVIC_EncodePriority>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7ff ff5f 	bl	8004e34 <__NVIC_SetPriority>
}
 8004f76:	bf00      	nop
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b082      	sub	sp, #8
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	4603      	mov	r3, r0
 8004f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff ff33 	bl	8004df8 <__NVIC_EnableIRQ>
}
 8004f92:	bf00      	nop
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f9a:	b580      	push	{r7, lr}
 8004f9c:	b082      	sub	sp, #8
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7ff ffa2 	bl	8004eec <SysTick_Config>
 8004fa8:	4603      	mov	r3, r0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b085      	sub	sp, #20
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d008      	beq.n	8004fdc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e022      	b.n	8005022 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	6812      	ldr	r2, [r2, #0]
 8004fe6:	f022 020e 	bic.w	r2, r2, #14
 8004fea:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005004:	f002 021c 	and.w	r2, r2, #28
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f202 	lsl.w	r2, r1, r2
 800500e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005020:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d005      	beq.n	8005052 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2204      	movs	r2, #4
 800504a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	73fb      	strb	r3, [r7, #15]
 8005050:	e029      	b.n	80050a6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	6812      	ldr	r2, [r2, #0]
 800505c:	f022 020e 	bic.w	r2, r2, #14
 8005060:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800507a:	f002 021c 	and.w	r2, r2, #28
 800507e:	2101      	movs	r1, #1
 8005080:	fa01 f202 	lsl.w	r2, r1, r2
 8005084:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
    }
  }
  return status;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050be:	e154      	b.n	800536a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	2101      	movs	r1, #1
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8146 	beq.w	8005364 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d00b      	beq.n	80050f8 <HAL_GPIO_Init+0x48>
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d007      	beq.n	80050f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80050ec:	2b11      	cmp	r3, #17
 80050ee:	d003      	beq.n	80050f8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b12      	cmp	r3, #18
 80050f6:	d130      	bne.n	800515a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	2203      	movs	r2, #3
 8005104:	fa02 f303 	lsl.w	r3, r2, r3
 8005108:	43db      	mvns	r3, r3
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4013      	ands	r3, r2
 800510e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68da      	ldr	r2, [r3, #12]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	005b      	lsls	r3, r3, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800512e:	2201      	movs	r2, #1
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43db      	mvns	r3, r3
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	4013      	ands	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0201 	and.w	r2, r3, #1
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fa02 f303 	lsl.w	r3, r2, r3
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	4313      	orrs	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	2203      	movs	r2, #3
 8005166:	fa02 f303 	lsl.w	r3, r2, r3
 800516a:	43db      	mvns	r3, r3
 800516c:	693a      	ldr	r2, [r7, #16]
 800516e:	4013      	ands	r3, r2
 8005170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	fa02 f303 	lsl.w	r3, r2, r3
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2b02      	cmp	r3, #2
 8005190:	d003      	beq.n	800519a <HAL_GPIO_Init+0xea>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b12      	cmp	r3, #18
 8005198:	d123      	bne.n	80051e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	08da      	lsrs	r2, r3, #3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3208      	adds	r2, #8
 80051a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	220f      	movs	r2, #15
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	43db      	mvns	r3, r3
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4013      	ands	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	fa02 f303 	lsl.w	r3, r2, r3
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	08da      	lsrs	r2, r3, #3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3208      	adds	r2, #8
 80051dc:	6939      	ldr	r1, [r7, #16]
 80051de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	005b      	lsls	r3, r3, #1
 80051ec:	2203      	movs	r2, #3
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43db      	mvns	r3, r3
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	4013      	ands	r3, r2
 80051f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f003 0203 	and.w	r2, r3, #3
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 80a0 	beq.w	8005364 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005224:	4a58      	ldr	r2, [pc, #352]	; (8005388 <HAL_GPIO_Init+0x2d8>)
 8005226:	4b58      	ldr	r3, [pc, #352]	; (8005388 <HAL_GPIO_Init+0x2d8>)
 8005228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800522a:	f043 0301 	orr.w	r3, r3, #1
 800522e:	6613      	str	r3, [r2, #96]	; 0x60
 8005230:	4b55      	ldr	r3, [pc, #340]	; (8005388 <HAL_GPIO_Init+0x2d8>)
 8005232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800523c:	4a53      	ldr	r2, [pc, #332]	; (800538c <HAL_GPIO_Init+0x2dc>)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	089b      	lsrs	r3, r3, #2
 8005242:	3302      	adds	r3, #2
 8005244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005248:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0303 	and.w	r3, r3, #3
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	220f      	movs	r2, #15
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	43db      	mvns	r3, r3
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4013      	ands	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005266:	d019      	beq.n	800529c <HAL_GPIO_Init+0x1ec>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a49      	ldr	r2, [pc, #292]	; (8005390 <HAL_GPIO_Init+0x2e0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d013      	beq.n	8005298 <HAL_GPIO_Init+0x1e8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a48      	ldr	r2, [pc, #288]	; (8005394 <HAL_GPIO_Init+0x2e4>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00d      	beq.n	8005294 <HAL_GPIO_Init+0x1e4>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a47      	ldr	r2, [pc, #284]	; (8005398 <HAL_GPIO_Init+0x2e8>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <HAL_GPIO_Init+0x1e0>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a46      	ldr	r2, [pc, #280]	; (800539c <HAL_GPIO_Init+0x2ec>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_GPIO_Init+0x1dc>
 8005288:	2304      	movs	r3, #4
 800528a:	e008      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 800528c:	2307      	movs	r3, #7
 800528e:	e006      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005290:	2303      	movs	r3, #3
 8005292:	e004      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005294:	2302      	movs	r3, #2
 8005296:	e002      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <HAL_GPIO_Init+0x1ee>
 800529c:	2300      	movs	r3, #0
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	f002 0203 	and.w	r2, r2, #3
 80052a4:	0092      	lsls	r2, r2, #2
 80052a6:	4093      	lsls	r3, r2
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80052ae:	4937      	ldr	r1, [pc, #220]	; (800538c <HAL_GPIO_Init+0x2dc>)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	3302      	adds	r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80052bc:	4b38      	ldr	r3, [pc, #224]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	43db      	mvns	r3, r3
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4013      	ands	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80052e0:	4a2f      	ldr	r2, [pc, #188]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80052e6:	4b2e      	ldr	r3, [pc, #184]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	43db      	mvns	r3, r3
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005310:	4b23      	ldr	r3, [pc, #140]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	43db      	mvns	r3, r3
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005334:	4a1a      	ldr	r2, [pc, #104]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800533a:	4b19      	ldr	r3, [pc, #100]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	43db      	mvns	r3, r3
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4013      	ands	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <HAL_GPIO_Init+0x2f0>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	3301      	adds	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
 8005374:	2b00      	cmp	r3, #0
 8005376:	f47f aea3 	bne.w	80050c0 <HAL_GPIO_Init+0x10>
  }
}
 800537a:	bf00      	nop
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40021000 	.word	0x40021000
 800538c:	40010000 	.word	0x40010000
 8005390:	48000400 	.word	0x48000400
 8005394:	48000800 	.word	0x48000800
 8005398:	48000c00 	.word	0x48000c00
 800539c:	48001000 	.word	0x48001000
 80053a0:	40010400 	.word	0x40010400

080053a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	460b      	mov	r3, r1
 80053ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	887b      	ldrh	r3, [r7, #2]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e001      	b.n	80053c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b083      	sub	sp, #12
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	807b      	strh	r3, [r7, #2]
 80053e0:	4613      	mov	r3, r2
 80053e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80053e4:	787b      	ldrb	r3, [r7, #1]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053ea:	887a      	ldrh	r2, [r7, #2]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053f0:	e002      	b.n	80053f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e080      	b.n	8005518 <HAL_I2C_Init+0x114>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fe f884 	bl	8003538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	; 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6852      	ldr	r2, [r2, #4]
 8005450:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005454:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6812      	ldr	r2, [r2, #0]
 800545e:	6892      	ldr	r2, [r2, #8]
 8005460:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d107      	bne.n	800547e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	6892      	ldr	r2, [r2, #8]
 8005476:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e006      	b.n	800548c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800548a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b02      	cmp	r3, #2
 8005492:	d104      	bne.n	800549e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800549c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	68d2      	ldr	r2, [r2, #12]
 80054bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6911      	ldr	r1, [r2, #16]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6952      	ldr	r2, [r2, #20]
 80054ce:	4311      	orrs	r1, r2
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	6992      	ldr	r2, [r2, #24]
 80054d4:	0212      	lsls	r2, r2, #8
 80054d6:	430a      	orrs	r2, r1
 80054d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	69d1      	ldr	r1, [r2, #28]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6a12      	ldr	r2, [r2, #32]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6812      	ldr	r2, [r2, #0]
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	461a      	mov	r2, r3
 800552c:	460b      	mov	r3, r1
 800552e:	817b      	strh	r3, [r7, #10]
 8005530:	4613      	mov	r3, r2
 8005532:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b20      	cmp	r3, #32
 800553e:	f040 80da 	bne.w	80056f6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_I2C_Master_Transmit+0x30>
 800554c:	2302      	movs	r3, #2
 800554e:	e0d3      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005558:	f7fe fa72 	bl	8003a40 <HAL_GetTick>
 800555c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	2319      	movs	r3, #25
 8005564:	2201      	movs	r2, #1
 8005566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 fcbc 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e0be      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	; 0x21
 800557e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2210      	movs	r2, #16
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	893a      	ldrh	r2, [r7, #8]
 800559a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2bff      	cmp	r3, #255	; 0xff
 80055aa:	d90e      	bls.n	80055ca <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	22ff      	movs	r2, #255	; 0xff
 80055b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	8979      	ldrh	r1, [r7, #10]
 80055ba:	4b51      	ldr	r3, [pc, #324]	; (8005700 <HAL_I2C_Master_Transmit+0x1e0>)
 80055bc:	9300      	str	r3, [sp, #0]
 80055be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f000 fe1e 	bl	8006204 <I2C_TransferConfig>
 80055c8:	e06c      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	8979      	ldrh	r1, [r7, #10]
 80055dc:	4b48      	ldr	r3, [pc, #288]	; (8005700 <HAL_I2C_Master_Transmit+0x1e0>)
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fe0d 	bl	8006204 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80055ea:	e05b      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	6a39      	ldr	r1, [r7, #32]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fcb9 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e07b      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005608:	7812      	ldrb	r2, [r2, #0]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d034      	beq.n	80056a4 <HAL_I2C_Master_Transmit+0x184>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800563e:	2b00      	cmp	r3, #0
 8005640:	d130      	bne.n	80056a4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	6a3b      	ldr	r3, [r7, #32]
 8005648:	2200      	movs	r2, #0
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 fc4b 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d001      	beq.n	800565c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e04d      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005660:	b29b      	uxth	r3, r3
 8005662:	2bff      	cmp	r3, #255	; 0xff
 8005664:	d90e      	bls.n	8005684 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	22ff      	movs	r2, #255	; 0xff
 800566a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005670:	b2da      	uxtb	r2, r3
 8005672:	8979      	ldrh	r1, [r7, #10]
 8005674:	2300      	movs	r3, #0
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fdc1 	bl	8006204 <I2C_TransferConfig>
 8005682:	e00f      	b.n	80056a4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005692:	b2da      	uxtb	r2, r3
 8005694:	8979      	ldrh	r1, [r7, #10]
 8005696:	2300      	movs	r3, #0
 8005698:	9300      	str	r3, [sp, #0]
 800569a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fdb0 	bl	8006204 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d19e      	bne.n	80055ec <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	6a39      	ldr	r1, [r7, #32]
 80056b2:	68f8      	ldr	r0, [r7, #12]
 80056b4:	f000 fc98 	bl	8005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01a      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2220      	movs	r2, #32
 80056c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_I2C_Master_Transmit+0x1e4>)
 80056d6:	400b      	ands	r3, r1
 80056d8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	80002000 	.word	0x80002000
 8005704:	fe00e800 	.word	0xfe00e800

08005708 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	607a      	str	r2, [r7, #4]
 8005712:	461a      	mov	r2, r3
 8005714:	460b      	mov	r3, r1
 8005716:	817b      	strh	r3, [r7, #10]
 8005718:	4613      	mov	r3, r2
 800571a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b20      	cmp	r3, #32
 8005726:	f040 80db 	bne.w	80058e0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005730:	2b01      	cmp	r3, #1
 8005732:	d101      	bne.n	8005738 <HAL_I2C_Master_Receive+0x30>
 8005734:	2302      	movs	r3, #2
 8005736:	e0d4      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005740:	f7fe f97e 	bl	8003a40 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	9300      	str	r3, [sp, #0]
 800574a:	2319      	movs	r3, #25
 800574c:	2201      	movs	r2, #1
 800574e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fbc8 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0bf      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2222      	movs	r2, #34	; 0x22
 8005766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2210      	movs	r2, #16
 800576e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	893a      	ldrh	r2, [r7, #8]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2200      	movs	r2, #0
 8005788:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578e:	b29b      	uxth	r3, r3
 8005790:	2bff      	cmp	r3, #255	; 0xff
 8005792:	d90e      	bls.n	80057b2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	22ff      	movs	r2, #255	; 0xff
 8005798:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	8979      	ldrh	r1, [r7, #10]
 80057a2:	4b52      	ldr	r3, [pc, #328]	; (80058ec <HAL_I2C_Master_Receive+0x1e4>)
 80057a4:	9300      	str	r3, [sp, #0]
 80057a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 fd2a 	bl	8006204 <I2C_TransferConfig>
 80057b0:	e06d      	b.n	800588e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	4b49      	ldr	r3, [pc, #292]	; (80058ec <HAL_I2C_Master_Receive+0x1e4>)
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fd19 	bl	8006204 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80057d2:	e05c      	b.n	800588e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	6a39      	ldr	r1, [r7, #32]
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 fc41 	bl	8006060 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e07c      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057f2:	b2d2      	uxtb	r2, r2
 80057f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fa:	1c5a      	adds	r2, r3, #1
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	d034      	beq.n	800588e <HAL_I2C_Master_Receive+0x186>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d130      	bne.n	800588e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	9300      	str	r3, [sp, #0]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2200      	movs	r2, #0
 8005834:	2180      	movs	r1, #128	; 0x80
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 fb56 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e04d      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800584a:	b29b      	uxth	r3, r3
 800584c:	2bff      	cmp	r3, #255	; 0xff
 800584e:	d90e      	bls.n	800586e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	22ff      	movs	r2, #255	; 0xff
 8005854:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800585a:	b2da      	uxtb	r2, r3
 800585c:	8979      	ldrh	r1, [r7, #10]
 800585e:	2300      	movs	r3, #0
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 fccc 	bl	8006204 <I2C_TransferConfig>
 800586c:	e00f      	b.n	800588e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800587c:	b2da      	uxtb	r2, r3
 800587e:	8979      	ldrh	r1, [r7, #10]
 8005880:	2300      	movs	r3, #0
 8005882:	9300      	str	r3, [sp, #0]
 8005884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fcbb 	bl	8006204 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d19d      	bne.n	80057d4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	6a39      	ldr	r1, [r7, #32]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fba3 	bl	8005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d001      	beq.n	80058ac <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e01a      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2220      	movs	r2, #32
 80058b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6859      	ldr	r1, [r3, #4]
 80058be:	4b0c      	ldr	r3, [pc, #48]	; (80058f0 <HAL_I2C_Master_Receive+0x1e8>)
 80058c0:	400b      	ands	r3, r1
 80058c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	e000      	b.n	80058e2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80058e0:	2302      	movs	r3, #2
  }
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	80002400 	.word	0x80002400
 80058f0:	fe00e800 	.word	0xfe00e800

080058f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4603      	mov	r3, r0
 8005904:	817b      	strh	r3, [r7, #10]
 8005906:	460b      	mov	r3, r1
 8005908:	813b      	strh	r3, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	f040 80f9 	bne.w	8005b0e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	6a3b      	ldr	r3, [r7, #32]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_I2C_Mem_Write+0x34>
 8005922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d105      	bne.n	8005934 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800592e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e0ed      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_I2C_Mem_Write+0x4e>
 800593e:	2302      	movs	r3, #2
 8005940:	e0e6      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800594a:	f7fe f879 	bl	8003a40 <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2319      	movs	r3, #25
 8005956:	2201      	movs	r2, #1
 8005958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fac3 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0d1      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2221      	movs	r2, #33	; 0x21
 8005970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2240      	movs	r2, #64	; 0x40
 8005978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800598c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005994:	88f8      	ldrh	r0, [r7, #6]
 8005996:	893a      	ldrh	r2, [r7, #8]
 8005998:	8979      	ldrh	r1, [r7, #10]
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	9301      	str	r3, [sp, #4]
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	4603      	mov	r3, r0
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f9d3 	bl	8005d50 <I2C_RequestMemoryWrite>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d005      	beq.n	80059bc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e0a9      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2bff      	cmp	r3, #255	; 0xff
 80059c4:	d90e      	bls.n	80059e4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	22ff      	movs	r2, #255	; 0xff
 80059ca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d0:	b2da      	uxtb	r2, r3
 80059d2:	8979      	ldrh	r1, [r7, #10]
 80059d4:	2300      	movs	r3, #0
 80059d6:	9300      	str	r3, [sp, #0]
 80059d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 fc11 	bl	8006204 <I2C_TransferConfig>
 80059e2:	e00f      	b.n	8005a04 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	8979      	ldrh	r1, [r7, #10]
 80059f6:	2300      	movs	r3, #0
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f000 fc00 	bl	8006204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 faad 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e07b      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a20:	7812      	ldrb	r2, [r2, #0]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d034      	beq.n	8005abc <HAL_I2C_Mem_Write+0x1c8>
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d130      	bne.n	8005abc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	2200      	movs	r2, #0
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 fa3f 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e04d      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2bff      	cmp	r3, #255	; 0xff
 8005a7c:	d90e      	bls.n	8005a9c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	22ff      	movs	r2, #255	; 0xff
 8005a82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	8979      	ldrh	r1, [r7, #10]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fbb5 	bl	8006204 <I2C_TransferConfig>
 8005a9a:	e00f      	b.n	8005abc <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	b2da      	uxtb	r2, r3
 8005aac:	8979      	ldrh	r1, [r7, #10]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9300      	str	r3, [sp, #0]
 8005ab2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fba4 	bl	8006204 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d19e      	bne.n	8005a04 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 fa8c 	bl	8005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e01a      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6859      	ldr	r1, [r3, #4]
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <HAL_I2C_Mem_Write+0x224>)
 8005aee:	400b      	ands	r3, r1
 8005af0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	e000      	b.n	8005b10 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
  }
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	fe00e800 	.word	0xfe00e800

08005b1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b088      	sub	sp, #32
 8005b20:	af02      	add	r7, sp, #8
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	4608      	mov	r0, r1
 8005b26:	4611      	mov	r1, r2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	817b      	strh	r3, [r7, #10]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	813b      	strh	r3, [r7, #8]
 8005b32:	4613      	mov	r3, r2
 8005b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b20      	cmp	r3, #32
 8005b40:	f040 80fd 	bne.w	8005d3e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_I2C_Mem_Read+0x34>
 8005b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d105      	bne.n	8005b5c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e0f1      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d101      	bne.n	8005b6a <HAL_I2C_Mem_Read+0x4e>
 8005b66:	2302      	movs	r3, #2
 8005b68:	e0ea      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b72:	f7fd ff65 	bl	8003a40 <HAL_GetTick>
 8005b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2319      	movs	r3, #25
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f000 f9af 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d001      	beq.n	8005b94 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e0d5      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2222      	movs	r2, #34	; 0x22
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2240      	movs	r2, #64	; 0x40
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a3a      	ldr	r2, [r7, #32]
 8005bae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005bbc:	88f8      	ldrh	r0, [r7, #6]
 8005bbe:	893a      	ldrh	r2, [r7, #8]
 8005bc0:	8979      	ldrh	r1, [r7, #10]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	9301      	str	r3, [sp, #4]
 8005bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4603      	mov	r3, r0
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f913 	bl	8005df8 <I2C_RequestMemoryRead>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0ad      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	2bff      	cmp	r3, #255	; 0xff
 8005bec:	d90e      	bls.n	8005c0c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	22ff      	movs	r2, #255	; 0xff
 8005bf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	8979      	ldrh	r1, [r7, #10]
 8005bfc:	4b52      	ldr	r3, [pc, #328]	; (8005d48 <HAL_I2C_Mem_Read+0x22c>)
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 fafd 	bl	8006204 <I2C_TransferConfig>
 8005c0a:	e00f      	b.n	8005c2c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	8979      	ldrh	r1, [r7, #10]
 8005c1e:	4b4a      	ldr	r3, [pc, #296]	; (8005d48 <HAL_I2C_Mem_Read+0x22c>)
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 faec 	bl	8006204 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c32:	2200      	movs	r2, #0
 8005c34:	2104      	movs	r1, #4
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 f956 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e07c      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	6812      	ldr	r2, [r2, #0]
 8005c4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c50:	b2d2      	uxtb	r2, r2
 8005c52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d034      	beq.n	8005cec <HAL_I2C_Mem_Read+0x1d0>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d130      	bne.n	8005cec <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	9300      	str	r3, [sp, #0]
 8005c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c90:	2200      	movs	r2, #0
 8005c92:	2180      	movs	r1, #128	; 0x80
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f927 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d001      	beq.n	8005ca4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e04d      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2bff      	cmp	r3, #255	; 0xff
 8005cac:	d90e      	bls.n	8005ccc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	22ff      	movs	r2, #255	; 0xff
 8005cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	8979      	ldrh	r1, [r7, #10]
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f000 fa9d 	bl	8006204 <I2C_TransferConfig>
 8005cca:	e00f      	b.n	8005cec <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd0:	b29a      	uxth	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	8979      	ldrh	r1, [r7, #10]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa8c 	bl	8006204 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d19a      	bne.n	8005c2c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 f974 	bl	8005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e01a      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	4b0b      	ldr	r3, [pc, #44]	; (8005d4c <HAL_I2C_Mem_Read+0x230>)
 8005d1e:	400b      	ands	r3, r1
 8005d20:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	e000      	b.n	8005d40 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005d3e:	2302      	movs	r3, #2
  }
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	80002400 	.word	0x80002400
 8005d4c:	fe00e800 	.word	0xfe00e800

08005d50 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af02      	add	r7, sp, #8
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	4608      	mov	r0, r1
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4603      	mov	r3, r0
 8005d60:	817b      	strh	r3, [r7, #10]
 8005d62:	460b      	mov	r3, r1
 8005d64:	813b      	strh	r3, [r7, #8]
 8005d66:	4613      	mov	r3, r2
 8005d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	4b20      	ldr	r3, [pc, #128]	; (8005df4 <I2C_RequestMemoryWrite+0xa4>)
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 fa43 	bl	8006204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	69b9      	ldr	r1, [r7, #24]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f8f0 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e02c      	b.n	8005dec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	893a      	ldrh	r2, [r7, #8]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	629a      	str	r2, [r3, #40]	; 0x28
 8005da2:	e015      	b.n	8005dd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	893a      	ldrh	r2, [r7, #8]
 8005daa:	0a12      	lsrs	r2, r2, #8
 8005dac:	b292      	uxth	r2, r2
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	69b9      	ldr	r1, [r7, #24]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8d6 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e012      	b.n	8005dec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	893a      	ldrh	r2, [r7, #8]
 8005dcc:	b2d2      	uxtb	r2, r2
 8005dce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f000 f884 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d001      	beq.n	8005dea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	80002000 	.word	0x80002000

08005df8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af02      	add	r7, sp, #8
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	4608      	mov	r0, r1
 8005e02:	4611      	mov	r1, r2
 8005e04:	461a      	mov	r2, r3
 8005e06:	4603      	mov	r3, r0
 8005e08:	817b      	strh	r3, [r7, #10]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	813b      	strh	r3, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005e12:	88fb      	ldrh	r3, [r7, #6]
 8005e14:	b2da      	uxtb	r2, r3
 8005e16:	8979      	ldrh	r1, [r7, #10]
 8005e18:	4b20      	ldr	r3, [pc, #128]	; (8005e9c <I2C_RequestMemoryRead+0xa4>)
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f000 f9f0 	bl	8006204 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e24:	69fa      	ldr	r2, [r7, #28]
 8005e26:	69b9      	ldr	r1, [r7, #24]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f89d 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e02c      	b.n	8005e92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e38:	88fb      	ldrh	r3, [r7, #6]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d105      	bne.n	8005e4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	893a      	ldrh	r2, [r7, #8]
 8005e44:	b2d2      	uxtb	r2, r2
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
 8005e48:	e015      	b.n	8005e76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	893a      	ldrh	r2, [r7, #8]
 8005e50:	0a12      	lsrs	r2, r2, #8
 8005e52:	b292      	uxth	r2, r2
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	69b9      	ldr	r1, [r7, #24]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f883 	bl	8005f68 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e012      	b.n	8005e92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	893a      	ldrh	r2, [r7, #8]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	2140      	movs	r1, #64	; 0x40
 8005e80:	68f8      	ldr	r0, [r7, #12]
 8005e82:	f000 f831 	bl	8005ee8 <I2C_WaitOnFlagUntilTimeout>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	80002000 	.word	0x80002000

08005ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d103      	bne.n	8005ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d007      	beq.n	8005edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	6992      	ldr	r2, [r2, #24]
 8005ed6:	f042 0201 	orr.w	r2, r2, #1
 8005eda:	619a      	str	r2, [r3, #24]
  }
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef8:	e022      	b.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f00:	d01e      	beq.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f02:	f7fd fd9d 	bl	8003a40 <HAL_GetTick>
 8005f06:	4602      	mov	r2, r0
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	1ad2      	subs	r2, r2, r3
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d802      	bhi.n	8005f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d113      	bne.n	8005f40 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1c:	f043 0220 	orr.w	r2, r3, #32
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2220      	movs	r2, #32
 8005f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e00f      	b.n	8005f60 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699a      	ldr	r2, [r3, #24]
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	401a      	ands	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	bf0c      	ite	eq
 8005f50:	2301      	moveq	r3, #1
 8005f52:	2300      	movne	r3, #0
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	79fb      	ldrb	r3, [r7, #7]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d0cd      	beq.n	8005efa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f74:	e02c      	b.n	8005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	68b9      	ldr	r1, [r7, #8]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 f8dc 	bl	8006138 <I2C_IsAcknowledgeFailed>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e02a      	b.n	8005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d01e      	beq.n	8005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fd fd55 	bl	8003a40 <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	1ad2      	subs	r2, r2, r3
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d802      	bhi.n	8005fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d113      	bne.n	8005fd0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fac:	f043 0220 	orr.w	r2, r3, #32
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e007      	b.n	8005fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d1cb      	bne.n	8005f76 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff4:	e028      	b.n	8006048 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f89c 	bl	8006138 <I2C_IsAcknowledgeFailed>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e026      	b.n	8006058 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800600a:	f7fd fd19 	bl	8003a40 <HAL_GetTick>
 800600e:	4602      	mov	r2, r0
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	1ad2      	subs	r2, r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	d802      	bhi.n	8006020 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d113      	bne.n	8006048 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006024:	f043 0220 	orr.w	r2, r3, #32
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e007      	b.n	8006058 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b20      	cmp	r3, #32
 8006054:	d1cf      	bne.n	8005ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3710      	adds	r7, #16
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800606c:	e055      	b.n	800611a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f860 	bl	8006138 <I2C_IsAcknowledgeFailed>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e053      	b.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	699b      	ldr	r3, [r3, #24]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b20      	cmp	r3, #32
 800608e:	d129      	bne.n	80060e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	f003 0304 	and.w	r3, r3, #4
 800609a:	2b04      	cmp	r3, #4
 800609c:	d105      	bne.n	80060aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80060a6:	2300      	movs	r3, #0
 80060a8:	e03f      	b.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2220      	movs	r2, #32
 80060b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6859      	ldr	r1, [r3, #4]
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80060be:	400b      	ands	r3, r1
 80060c0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e022      	b.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e4:	f7fd fcac 	bl	8003a40 <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d802      	bhi.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10f      	bne.n	800611a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e007      	b.n	800612a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d1a2      	bne.n	800606e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	fe00e800 	.word	0xfe00e800

08006138 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b10      	cmp	r3, #16
 8006150:	d151      	bne.n	80061f6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006152:	e022      	b.n	800619a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615a:	d01e      	beq.n	800619a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800615c:	f7fd fc70 	bl	8003a40 <HAL_GetTick>
 8006160:	4602      	mov	r2, r0
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	429a      	cmp	r2, r3
 800616a:	d802      	bhi.n	8006172 <I2C_IsAcknowledgeFailed+0x3a>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d113      	bne.n	800619a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006176:	f043 0220 	orr.w	r2, r3, #32
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2220      	movs	r2, #32
 8006182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e02e      	b.n	80061f8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b20      	cmp	r3, #32
 80061a6:	d1d5      	bne.n	8006154 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2210      	movs	r2, #16
 80061ae:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2220      	movs	r2, #32
 80061b6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff fe71 	bl	8005ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6859      	ldr	r1, [r3, #4]
 80061c8:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <I2C_IsAcknowledgeFailed+0xc8>)
 80061ca:	400b      	ands	r3, r1
 80061cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	f043 0204 	orr.w	r2, r3, #4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	fe00e800 	.word	0xfe00e800

08006204 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	460b      	mov	r3, r1
 8006210:	817b      	strh	r3, [r7, #10]
 8006212:	4613      	mov	r3, r2
 8006214:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6859      	ldr	r1, [r3, #4]
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	0d5b      	lsrs	r3, r3, #21
 8006224:	f403 6080 	and.w	r0, r3, #1024	; 0x400
 8006228:	4b0b      	ldr	r3, [pc, #44]	; (8006258 <I2C_TransferConfig+0x54>)
 800622a:	4303      	orrs	r3, r0
 800622c:	43db      	mvns	r3, r3
 800622e:	4019      	ands	r1, r3
 8006230:	897b      	ldrh	r3, [r7, #10]
 8006232:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8006236:	7a7b      	ldrb	r3, [r7, #9]
 8006238:	041b      	lsls	r3, r3, #16
 800623a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800623e:	4318      	orrs	r0, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4318      	orrs	r0, r3
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	4303      	orrs	r3, r0
 8006248:	430b      	orrs	r3, r1
 800624a:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	03ff63ff 	.word	0x03ff63ff

0800625c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b20      	cmp	r3, #32
 8006270:	d138      	bne.n	80062e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800627c:	2302      	movs	r3, #2
 800627e:	e032      	b.n	80062e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2224      	movs	r2, #36	; 0x24
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6812      	ldr	r2, [r2, #0]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	6812      	ldr	r2, [r2, #0]
 80062aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	6812      	ldr	r2, [r2, #0]
 80062ca:	f042 0201 	orr.w	r2, r2, #1
 80062ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062e0:	2300      	movs	r3, #0
 80062e2:	e000      	b.n	80062e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80062e4:	2302      	movs	r3, #2
  }
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	370c      	adds	r7, #12
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b20      	cmp	r3, #32
 8006306:	d139      	bne.n	800637c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800630e:	2b01      	cmp	r3, #1
 8006310:	d101      	bne.n	8006316 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006312:	2302      	movs	r3, #2
 8006314:	e033      	b.n	800637e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2224      	movs	r2, #36	; 0x24
 8006322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	6812      	ldr	r2, [r2, #0]
 8006330:	f022 0201 	bic.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006344:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68fa      	ldr	r2, [r7, #12]
 8006356:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e000      	b.n	800637e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006390:	4b04      	ldr	r3, [pc, #16]	; (80063a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	40007000 	.word	0x40007000

080063a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b6:	d130      	bne.n	800641a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c4:	d038      	beq.n	8006438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063c6:	4a20      	ldr	r2, [pc, #128]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063c8:	4b1f      	ldr	r3, [pc, #124]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063d6:	4b1d      	ldr	r3, [pc, #116]	; (800644c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2232      	movs	r2, #50	; 0x32
 80063dc:	fb02 f303 	mul.w	r3, r2, r3
 80063e0:	4a1b      	ldr	r2, [pc, #108]	; (8006450 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	0c9b      	lsrs	r3, r3, #18
 80063e8:	3301      	adds	r3, #1
 80063ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ec:	e002      	b.n	80063f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3b01      	subs	r3, #1
 80063f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063f4:	4b14      	ldr	r3, [pc, #80]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006400:	d102      	bne.n	8006408 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1f2      	bne.n	80063ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006408:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006414:	d110      	bne.n	8006438 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006416:	2303      	movs	r3, #3
 8006418:	e00f      	b.n	800643a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800641a:	4b0b      	ldr	r3, [pc, #44]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006426:	d007      	beq.n	8006438 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006428:	4a07      	ldr	r2, [pc, #28]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006432:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006436:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40007000 	.word	0x40007000
 800644c:	20000004 	.word	0x20000004
 8006450:	431bde83 	.word	0x431bde83

08006454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f000 bc11 	b.w	8006c8a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006468:	4ba0      	ldr	r3, [pc, #640]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006472:	4b9e      	ldr	r3, [pc, #632]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80e4 	beq.w	8006652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_RCC_OscConfig+0x4c>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b0c      	cmp	r3, #12
 8006494:	f040 808b 	bne.w	80065ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	f040 8087 	bne.w	80065ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064a0:	4b92      	ldr	r3, [pc, #584]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_OscConfig+0x64>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e3e8      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	4b8b      	ldr	r3, [pc, #556]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_RCC_OscConfig+0x7e>
 80064c8:	4b88      	ldr	r3, [pc, #544]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d0:	e005      	b.n	80064de <HAL_RCC_OscConfig+0x8a>
 80064d2:	4b86      	ldr	r3, [pc, #536]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064de:	429a      	cmp	r2, r3
 80064e0:	d923      	bls.n	800652a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fd78 	bl	8006fdc <RCC_SetFlashLatencyFromMSIRange>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e3c9      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f6:	4a7d      	ldr	r2, [pc, #500]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064f8:	4b7c      	ldr	r3, [pc, #496]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f043 0308 	orr.w	r3, r3, #8
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	497a      	ldr	r1, [pc, #488]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006504:	4b79      	ldr	r3, [pc, #484]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006514:	4975      	ldr	r1, [pc, #468]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006516:	4b75      	ldr	r3, [pc, #468]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	021b      	lsls	r3, r3, #8
 8006524:	4313      	orrs	r3, r2
 8006526:	604b      	str	r3, [r1, #4]
 8006528:	e025      	b.n	8006576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800652a:	4a70      	ldr	r2, [pc, #448]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800652c:	4b6f      	ldr	r3, [pc, #444]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f043 0308 	orr.w	r3, r3, #8
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	496d      	ldr	r1, [pc, #436]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006538:	4b6c      	ldr	r3, [pc, #432]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a1b      	ldr	r3, [r3, #32]
 8006544:	4313      	orrs	r3, r2
 8006546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006548:	4968      	ldr	r1, [pc, #416]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800654a:	4b68      	ldr	r3, [pc, #416]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	021b      	lsls	r3, r3, #8
 8006558:	4313      	orrs	r3, r2
 800655a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fd38 	bl	8006fdc <RCC_SetFlashLatencyFromMSIRange>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e389      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006576:	f000 fc6f 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 800657a:	4601      	mov	r1, r0
 800657c:	4b5b      	ldr	r3, [pc, #364]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	4a5a      	ldr	r2, [pc, #360]	; (80066f0 <HAL_RCC_OscConfig+0x29c>)
 8006588:	5cd3      	ldrb	r3, [r2, r3]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	fa21 f303 	lsr.w	r3, r1, r3
 8006592:	4a58      	ldr	r2, [pc, #352]	; (80066f4 <HAL_RCC_OscConfig+0x2a0>)
 8006594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006596:	4b58      	ldr	r3, [pc, #352]	; (80066f8 <HAL_RCC_OscConfig+0x2a4>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fa00 	bl	80039a0 <HAL_InitTick>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d052      	beq.n	8006650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	e36d      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d032      	beq.n	800661c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065b6:	4a4d      	ldr	r2, [pc, #308]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065b8:	4b4c      	ldr	r3, [pc, #304]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065c2:	f7fd fa3d 	bl	8003a40 <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ca:	f7fd fa39 	bl	8003a40 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e356      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065dc:	4b43      	ldr	r3, [pc, #268]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e8:	4a40      	ldr	r2, [pc, #256]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065ea:	4b40      	ldr	r3, [pc, #256]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f043 0308 	orr.w	r3, r3, #8
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	493d      	ldr	r1, [pc, #244]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065f6:	4b3d      	ldr	r3, [pc, #244]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006606:	4939      	ldr	r1, [pc, #228]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006608:	4b38      	ldr	r3, [pc, #224]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
 800661a:	e01a      	b.n	8006652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800661c:	4a33      	ldr	r2, [pc, #204]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 800661e:	4b33      	ldr	r3, [pc, #204]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006628:	f7fd fa0a 	bl	8003a40 <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006630:	f7fd fa06 	bl	8003a40 <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e323      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006642:	4b2a      	ldr	r3, [pc, #168]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x1dc>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d073      	beq.n	8006746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d005      	beq.n	8006670 <HAL_RCC_OscConfig+0x21c>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d10e      	bne.n	8006688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d10b      	bne.n	8006688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	4b1e      	ldr	r3, [pc, #120]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d063      	beq.n	8006744 <HAL_RCC_OscConfig+0x2f0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d15f      	bne.n	8006744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e300      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d106      	bne.n	80066a0 <HAL_RCC_OscConfig+0x24c>
 8006692:	4a16      	ldr	r2, [pc, #88]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006694:	4b15      	ldr	r3, [pc, #84]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e01d      	b.n	80066dc <HAL_RCC_OscConfig+0x288>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x270>
 80066aa:	4a10      	ldr	r2, [pc, #64]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e00b      	b.n	80066dc <HAL_RCC_OscConfig+0x288>
 80066c4:	4a09      	ldr	r2, [pc, #36]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066c6:	4b09      	ldr	r3, [pc, #36]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ce:	6013      	str	r3, [r2, #0]
 80066d0:	4a06      	ldr	r2, [pc, #24]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <HAL_RCC_OscConfig+0x298>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01b      	beq.n	800671c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e4:	f7fd f9ac 	bl	8003a40 <HAL_GetTick>
 80066e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066ea:	e010      	b.n	800670e <HAL_RCC_OscConfig+0x2ba>
 80066ec:	40021000 	.word	0x40021000
 80066f0:	0800ae5c 	.word	0x0800ae5c
 80066f4:	20000004 	.word	0x20000004
 80066f8:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fd f9a0 	bl	8003a40 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	; 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e2bd      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800670e:	4baf      	ldr	r3, [pc, #700]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x2a8>
 800671a:	e014      	b.n	8006746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fd f990 	bl	8003a40 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006724:	f7fd f98c 	bl	8003a40 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b64      	cmp	r3, #100	; 0x64
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e2a9      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006736:	4ba5      	ldr	r3, [pc, #660]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x2d0>
 8006742:	e000      	b.n	8006746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d060      	beq.n	8006814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d005      	beq.n	8006764 <HAL_RCC_OscConfig+0x310>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b0c      	cmp	r3, #12
 800675c:	d119      	bne.n	8006792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d116      	bne.n	8006792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006764:	4b99      	ldr	r3, [pc, #612]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_OscConfig+0x328>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e286      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	4993      	ldr	r1, [pc, #588]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800677e:	4b93      	ldr	r3, [pc, #588]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	061b      	lsls	r3, r3, #24
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006790:	e040      	b.n	8006814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d023      	beq.n	80067e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800679a:	4a8c      	ldr	r2, [pc, #560]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800679c:	4b8b      	ldr	r3, [pc, #556]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fd f94b 	bl	8003a40 <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ae:	f7fd f947 	bl	8003a40 <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e264      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067c0:	4b82      	ldr	r3, [pc, #520]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067cc:	497f      	ldr	r1, [pc, #508]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80067ce:	4b7f      	ldr	r3, [pc, #508]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	061b      	lsls	r3, r3, #24
 80067dc:	4313      	orrs	r3, r2
 80067de:	604b      	str	r3, [r1, #4]
 80067e0:	e018      	b.n	8006814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e2:	4a7a      	ldr	r2, [pc, #488]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80067e4:	4b79      	ldr	r3, [pc, #484]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fd f927 	bl	8003a40 <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f6:	f7fd f923 	bl	8003a40 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e240      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006808:	4b70      	ldr	r3, [pc, #448]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d03c      	beq.n	800689a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006828:	4a68      	ldr	r2, [pc, #416]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800682a:	4b68      	ldr	r3, [pc, #416]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800682c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd f902 	bl	8003a40 <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006840:	f7fd f8fe 	bl	8003a40 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e21b      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006852:	4b5e      	ldr	r3, [pc, #376]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <HAL_RCC_OscConfig+0x3ec>
 8006860:	e01b      	b.n	800689a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006862:	4a5a      	ldr	r2, [pc, #360]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006864:	4b59      	ldr	r3, [pc, #356]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006872:	f7fd f8e5 	bl	8003a40 <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687a:	f7fd f8e1 	bl	8003a40 <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e1fe      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800688c:	4b4f      	ldr	r3, [pc, #316]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ef      	bne.n	800687a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80a6 	beq.w	80069f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a8:	2300      	movs	r3, #0
 80068aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068ac:	4b47      	ldr	r3, [pc, #284]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b8:	4a44      	ldr	r2, [pc, #272]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80068ba:	4b44      	ldr	r3, [pc, #272]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c2:	6593      	str	r3, [r2, #88]	; 0x58
 80068c4:	4b41      	ldr	r3, [pc, #260]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d4:	4b3e      	ldr	r3, [pc, #248]	; (80069d0 <HAL_RCC_OscConfig+0x57c>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d118      	bne.n	8006912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e0:	4a3b      	ldr	r2, [pc, #236]	; (80069d0 <HAL_RCC_OscConfig+0x57c>)
 80068e2:	4b3b      	ldr	r3, [pc, #236]	; (80069d0 <HAL_RCC_OscConfig+0x57c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ec:	f7fd f8a8 	bl	8003a40 <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f4:	f7fd f8a4 	bl	8003a40 <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e1c1      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006906:	4b32      	ldr	r3, [pc, #200]	; (80069d0 <HAL_RCC_OscConfig+0x57c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d108      	bne.n	800692c <HAL_RCC_OscConfig+0x4d8>
 800691a:	4a2c      	ldr	r2, [pc, #176]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800691c:	4b2b      	ldr	r3, [pc, #172]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800692a:	e024      	b.n	8006976 <HAL_RCC_OscConfig+0x522>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b05      	cmp	r3, #5
 8006932:	d110      	bne.n	8006956 <HAL_RCC_OscConfig+0x502>
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006936:	4b25      	ldr	r3, [pc, #148]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693c:	f043 0304 	orr.w	r3, r3, #4
 8006940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006944:	4a21      	ldr	r2, [pc, #132]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006954:	e00f      	b.n	8006976 <HAL_RCC_OscConfig+0x522>
 8006956:	4a1d      	ldr	r2, [pc, #116]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006958:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800695a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800695e:	f023 0301 	bic.w	r3, r3, #1
 8006962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006966:	4a19      	ldr	r2, [pc, #100]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 8006968:	4b18      	ldr	r3, [pc, #96]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800696a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696e:	f023 0304 	bic.w	r3, r3, #4
 8006972:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697e:	f7fd f85f 	bl	8003a40 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fd f85b 	bl	8003a40 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e176      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800699c:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <HAL_RCC_OscConfig+0x578>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ed      	beq.n	8006986 <HAL_RCC_OscConfig+0x532>
 80069aa:	e01a      	b.n	80069e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ac:	f7fd f848 	bl	8003a40 <HAL_GetTick>
 80069b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069b2:	e00f      	b.n	80069d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069b4:	f7fd f844 	bl	8003a40 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	f241 3288 	movw	r2, #5000	; 0x1388
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d906      	bls.n	80069d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e15f      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
 80069ca:	bf00      	nop
 80069cc:	40021000 	.word	0x40021000
 80069d0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069d4:	4baa      	ldr	r3, [pc, #680]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e8      	bne.n	80069b4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e2:	7ffb      	ldrb	r3, [r7, #31]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d105      	bne.n	80069f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e8:	4aa5      	ldr	r2, [pc, #660]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 80069ea:	4ba5      	ldr	r3, [pc, #660]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d03c      	beq.n	8006a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a08:	4a9d      	ldr	r2, [pc, #628]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a0a:	4b9d      	ldr	r3, [pc, #628]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fd f812 	bl	8003a40 <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a20:	f7fd f80e 	bl	8003a40 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e12b      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a32:	4b93      	ldr	r3, [pc, #588]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ef      	beq.n	8006a20 <HAL_RCC_OscConfig+0x5cc>
 8006a40:	e01b      	b.n	8006a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a42:	4a8f      	ldr	r2, [pc, #572]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a44:	4b8e      	ldr	r3, [pc, #568]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a52:	f7fc fff5 	bl	8003a40 <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a5a:	f7fc fff1 	bl	8003a40 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e10e      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a6c:	4b84      	ldr	r3, [pc, #528]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1ef      	bne.n	8006a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8102 	beq.w	8006c88 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	f040 80c5 	bne.w	8006c18 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a8e:	4b7c      	ldr	r3, [pc, #496]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d12c      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	3b01      	subs	r3, #1
 8006aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d123      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d11b      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d113      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d109      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d067      	beq.n	8006bcc <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d062      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b02:	4b5f      	ldr	r3, [pc, #380]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0bb      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b12:	4a5b      	ldr	r2, [pc, #364]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b14:	4b5a      	ldr	r3, [pc, #360]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b1e:	f7fc ff8f 	bl	8003a40 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fc ff8b 	bl	8003a40 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e0a8      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b44:	484e      	ldr	r0, [pc, #312]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b46:	4b4e      	ldr	r3, [pc, #312]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	4b4e      	ldr	r3, [pc, #312]	; (8006c84 <HAL_RCC_OscConfig+0x830>)
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b56:	3a01      	subs	r2, #1
 8006b58:	0112      	lsls	r2, r2, #4
 8006b5a:	4311      	orrs	r1, r2
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b60:	0212      	lsls	r2, r2, #8
 8006b62:	4311      	orrs	r1, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b68:	0852      	lsrs	r2, r2, #1
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	0552      	lsls	r2, r2, #21
 8006b6e:	4311      	orrs	r1, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b74:	0852      	lsrs	r2, r2, #1
 8006b76:	3a01      	subs	r2, #1
 8006b78:	0652      	lsls	r2, r2, #25
 8006b7a:	4311      	orrs	r1, r2
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b80:	06d2      	lsls	r2, r2, #27
 8006b82:	430a      	orrs	r2, r1
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b88:	4a3d      	ldr	r2, [pc, #244]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b8a:	4b3d      	ldr	r3, [pc, #244]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b94:	4a3a      	ldr	r2, [pc, #232]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b96:	4b3a      	ldr	r3, [pc, #232]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ba0:	f7fc ff4e 	bl	8003a40 <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fc ff4a 	bl	8003a40 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e067      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bba:	4b31      	ldr	r3, [pc, #196]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bc6:	e05f      	b.n	8006c88 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e05e      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bcc:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d157      	bne.n	8006c88 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006bda:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006be4:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bf0:	f7fc ff26 	bl	8003a40 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf6:	e008      	b.n	8006c0a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fc ff22 	bl	8003a40 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d901      	bls.n	8006c0a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e03f      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0a:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0f0      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x7a4>
 8006c16:	e037      	b.n	8006c88 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b0c      	cmp	r3, #12
 8006c1c:	d02d      	beq.n	8006c7a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4a18      	ldr	r2, [pc, #96]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c20:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c28:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006c2a:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d105      	bne.n	8006c42 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006c36:	4a12      	ldr	r2, [pc, #72]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f023 0303 	bic.w	r3, r3, #3
 8006c40:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c42:	4a0f      	ldr	r2, [pc, #60]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c50:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c52:	f7fc fef5 	bl	8003a40 <HAL_GetTick>
 8006c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c58:	e008      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c5a:	f7fc fef1 	bl	8003a40 <HAL_GetTick>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	1ad3      	subs	r3, r2, r3
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d901      	bls.n	8006c6c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	e00e      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <HAL_RCC_OscConfig+0x82c>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1f0      	bne.n	8006c5a <HAL_RCC_OscConfig+0x806>
 8006c78:	e006      	b.n	8006c88 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e005      	b.n	8006c8a <HAL_RCC_OscConfig+0x836>
 8006c7e:	bf00      	nop
 8006c80:	40021000 	.word	0x40021000
 8006c84:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop

08006c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e0c8      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ca8:	4b66      	ldr	r3, [pc, #408]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0207 	and.w	r2, r3, #7
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d210      	bcs.n	8006cd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cb6:	4963      	ldr	r1, [pc, #396]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006cb8:	4b62      	ldr	r3, [pc, #392]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 0207 	bic.w	r2, r3, #7
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cc6:	4b5f      	ldr	r3, [pc, #380]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0207 	and.w	r2, r3, #7
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d001      	beq.n	8006cd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0b0      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d04c      	beq.n	8006d7e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d107      	bne.n	8006cfc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cec:	4b56      	ldr	r3, [pc, #344]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d121      	bne.n	8006d3c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e09e      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d107      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d04:	4b50      	ldr	r3, [pc, #320]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d115      	bne.n	8006d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e092      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d1c:	4b4a      	ldr	r3, [pc, #296]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d109      	bne.n	8006d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e086      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d2c:	4b46      	ldr	r3, [pc, #280]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e07e      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d3c:	4942      	ldr	r1, [pc, #264]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d3e:	4b42      	ldr	r3, [pc, #264]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f023 0203 	bic.w	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d4e:	f7fc fe77 	bl	8003a40 <HAL_GetTick>
 8006d52:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d54:	e00a      	b.n	8006d6c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d56:	f7fc fe73 	bl	8003a40 <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d901      	bls.n	8006d6c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e066      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6c:	4b36      	ldr	r3, [pc, #216]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 020c 	and.w	r2, r3, #12
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d1eb      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d8a:	492f      	ldr	r1, [pc, #188]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d8c:	4b2e      	ldr	r3, [pc, #184]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0207 	and.w	r2, r3, #7
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d910      	bls.n	8006dcc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4926      	ldr	r1, [pc, #152]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006dac:	4b25      	ldr	r3, [pc, #148]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f023 0207 	bic.w	r2, r3, #7
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dba:	4b22      	ldr	r3, [pc, #136]	; (8006e44 <HAL_RCC_ClockConfig+0x1b0>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0207 	and.w	r2, r3, #7
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d001      	beq.n	8006dcc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e036      	b.n	8006e3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0304 	and.w	r3, r3, #4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d008      	beq.n	8006dea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd8:	491b      	ldr	r1, [pc, #108]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006dda:	4b1b      	ldr	r3, [pc, #108]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d009      	beq.n	8006e0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006df6:	4914      	ldr	r1, [pc, #80]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006df8:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4313      	orrs	r3, r2
 8006e08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e0a:	f000 f825 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8006e0e:	4601      	mov	r1, r0
 8006e10:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <HAL_RCC_ClockConfig+0x1b4>)
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	4a0c      	ldr	r2, [pc, #48]	; (8006e4c <HAL_RCC_ClockConfig+0x1b8>)
 8006e1c:	5cd3      	ldrb	r3, [r2, r3]
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	fa21 f303 	lsr.w	r3, r1, r3
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <HAL_RCC_ClockConfig+0x1bc>)
 8006e28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e2a:	4b0a      	ldr	r3, [pc, #40]	; (8006e54 <HAL_RCC_ClockConfig+0x1c0>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fc fdb6 	bl	80039a0 <HAL_InitTick>
 8006e34:	4603      	mov	r3, r0
 8006e36:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	40022000 	.word	0x40022000
 8006e48:	40021000 	.word	0x40021000
 8006e4c:	0800ae5c 	.word	0x0800ae5c
 8006e50:	20000004 	.word	0x20000004
 8006e54:	20000008 	.word	0x20000008

08006e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b089      	sub	sp, #36	; 0x24
 8006e5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	2300      	movs	r3, #0
 8006e64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e66:	4b3d      	ldr	r3, [pc, #244]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 030c 	and.w	r3, r3, #12
 8006e6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e70:	4b3a      	ldr	r3, [pc, #232]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f003 0303 	and.w	r3, r3, #3
 8006e78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d005      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0x34>
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	2b0c      	cmp	r3, #12
 8006e84:	d121      	bne.n	8006eca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d11e      	bne.n	8006eca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e8c:	4b33      	ldr	r3, [pc, #204]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d107      	bne.n	8006ea8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e98:	4b30      	ldr	r3, [pc, #192]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	61fb      	str	r3, [r7, #28]
 8006ea6:	e005      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ea8:	4b2c      	ldr	r3, [pc, #176]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	091b      	lsrs	r3, r3, #4
 8006eae:	f003 030f 	and.w	r3, r3, #15
 8006eb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006eb4:	4a2a      	ldr	r2, [pc, #168]	; (8006f60 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10d      	bne.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b04      	cmp	r3, #4
 8006ece:	d102      	bne.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ed0:	4b24      	ldr	r3, [pc, #144]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006ed2:	61bb      	str	r3, [r7, #24]
 8006ed4:	e004      	b.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b08      	cmp	r3, #8
 8006eda:	d101      	bne.n	8006ee0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006edc:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8006ede:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b0c      	cmp	r3, #12
 8006ee4:	d133      	bne.n	8006f4e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ee6:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0303 	and.w	r3, r3, #3
 8006eee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d002      	beq.n	8006efc <HAL_RCC_GetSysClockFreq+0xa4>
 8006ef6:	2b03      	cmp	r3, #3
 8006ef8:	d003      	beq.n	8006f02 <HAL_RCC_GetSysClockFreq+0xaa>
 8006efa:	e005      	b.n	8006f08 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006efc:	4b19      	ldr	r3, [pc, #100]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006efe:	617b      	str	r3, [r7, #20]
      break;
 8006f00:	e005      	b.n	8006f0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f02:	4b19      	ldr	r3, [pc, #100]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f04:	617b      	str	r3, [r7, #20]
      break;
 8006f06:	e002      	b.n	8006f0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	617b      	str	r3, [r7, #20]
      break;
 8006f0c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	091b      	lsrs	r3, r3, #4
 8006f14:	f003 0307 	and.w	r3, r3, #7
 8006f18:	3301      	adds	r3, #1
 8006f1a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f1c:	4b0f      	ldr	r3, [pc, #60]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	0a1b      	lsrs	r3, r3, #8
 8006f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	fb02 f203 	mul.w	r2, r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f32:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <HAL_RCC_GetSysClockFreq+0x104>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	0e5b      	lsrs	r3, r3, #25
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	3301      	adds	r3, #1
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3724      	adds	r7, #36	; 0x24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	0800ae74 	.word	0x0800ae74
 8006f64:	00f42400 	.word	0x00f42400
 8006f68:	007a1200 	.word	0x007a1200

08006f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f70:	4b03      	ldr	r3, [pc, #12]	; (8006f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f72:	681b      	ldr	r3, [r3, #0]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	20000004 	.word	0x20000004

08006f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006f88:	f7ff fff0 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006f8c:	4601      	mov	r1, r0
 8006f8e:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	f003 0307 	and.w	r3, r3, #7
 8006f98:	4a04      	ldr	r2, [pc, #16]	; (8006fac <HAL_RCC_GetPCLK1Freq+0x28>)
 8006f9a:	5cd3      	ldrb	r3, [r2, r3]
 8006f9c:	f003 031f 	and.w	r3, r3, #31
 8006fa0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	0800ae6c 	.word	0x0800ae6c

08006fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006fb4:	f7ff ffda 	bl	8006f6c <HAL_RCC_GetHCLKFreq>
 8006fb8:	4601      	mov	r1, r0
 8006fba:	4b06      	ldr	r3, [pc, #24]	; (8006fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0adb      	lsrs	r3, r3, #11
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4a04      	ldr	r2, [pc, #16]	; (8006fd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006fc6:	5cd3      	ldrb	r3, [r2, r3]
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	40021000 	.word	0x40021000
 8006fd8:	0800ae6c 	.word	0x0800ae6c

08006fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fe8:	4b2a      	ldr	r3, [pc, #168]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ff4:	f7ff f9ca 	bl	800638c <HAL_PWREx_GetVoltageRange>
 8006ff8:	6178      	str	r0, [r7, #20]
 8006ffa:	e014      	b.n	8007026 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ffc:	4a25      	ldr	r2, [pc, #148]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffe:	4b25      	ldr	r3, [pc, #148]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	6593      	str	r3, [r2, #88]	; 0x58
 8007008:	4b22      	ldr	r3, [pc, #136]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007014:	f7ff f9ba 	bl	800638c <HAL_PWREx_GetVoltageRange>
 8007018:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800701a:	4a1e      	ldr	r2, [pc, #120]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800701c:	4b1d      	ldr	r3, [pc, #116]	; (8007094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800701e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007024:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702c:	d10b      	bne.n	8007046 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2b80      	cmp	r3, #128	; 0x80
 8007032:	d919      	bls.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2ba0      	cmp	r3, #160	; 0xa0
 8007038:	d902      	bls.n	8007040 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800703a:	2302      	movs	r3, #2
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e013      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007040:	2301      	movs	r3, #1
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	e010      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b80      	cmp	r3, #128	; 0x80
 800704a:	d902      	bls.n	8007052 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800704c:	2303      	movs	r3, #3
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e00a      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b80      	cmp	r3, #128	; 0x80
 8007056:	d102      	bne.n	800705e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007058:	2302      	movs	r3, #2
 800705a:	613b      	str	r3, [r7, #16]
 800705c:	e004      	b.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b70      	cmp	r3, #112	; 0x70
 8007062:	d101      	bne.n	8007068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007064:	2301      	movs	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007068:	490b      	ldr	r1, [pc, #44]	; (8007098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f023 0207 	bic.w	r2, r3, #7
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007078:	4b07      	ldr	r3, [pc, #28]	; (8007098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0207 	and.w	r2, r3, #7
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	429a      	cmp	r2, r3
 8007084:	d001      	beq.n	800708a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000
 8007098:	40022000 	.word	0x40022000

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070a4:	2300      	movs	r3, #0
 80070a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070a8:	2300      	movs	r3, #0
 80070aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d02f      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070c0:	d005      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80070c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070c6:	d015      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x58>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d007      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x40>
 80070cc:	e00f      	b.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80070ce:	4a5d      	ldr	r2, [pc, #372]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070d0:	4b5c      	ldr	r3, [pc, #368]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070d8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070da:	e00c      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	3304      	adds	r3, #4
 80070e0:	2100      	movs	r1, #0
 80070e2:	4618      	mov	r0, r3
 80070e4:	f000 fa44 	bl	8007570 <RCCEx_PLLSAI1_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	74fb      	strb	r3, [r7, #19]
      break;
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 80070f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070f6:	7cfb      	ldrb	r3, [r7, #19]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10b      	bne.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070fc:	4951      	ldr	r1, [pc, #324]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80070fe:	4b51      	ldr	r3, [pc, #324]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007104:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007112:	e001      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007114:	7cfb      	ldrb	r3, [r7, #19]
 8007116:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 809e 	beq.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007126:	2300      	movs	r3, #0
 8007128:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800712a:	4b46      	ldr	r3, [pc, #280]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007136:	2301      	movs	r3, #1
 8007138:	e000      	b.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800713a:	2300      	movs	r3, #0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00d      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007140:	4a40      	ldr	r2, [pc, #256]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007142:	4b40      	ldr	r3, [pc, #256]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800714a:	6593      	str	r3, [r2, #88]	; 0x58
 800714c:	4b3d      	ldr	r3, [pc, #244]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800714e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007154:	60bb      	str	r3, [r7, #8]
 8007156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007158:	2301      	movs	r3, #1
 800715a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800715c:	4a3a      	ldr	r2, [pc, #232]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800715e:	4b3a      	ldr	r3, [pc, #232]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007166:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007168:	f7fc fc6a 	bl	8003a40 <HAL_GetTick>
 800716c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800716e:	e009      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007170:	f7fc fc66 	bl	8003a40 <HAL_GetTick>
 8007174:	4602      	mov	r2, r0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d902      	bls.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	74fb      	strb	r3, [r7, #19]
        break;
 8007182:	e005      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007184:	4b30      	ldr	r3, [pc, #192]	; (8007248 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ef      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 8007190:	7cfb      	ldrb	r3, [r7, #19]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d15a      	bne.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007196:	4b2b      	ldr	r3, [pc, #172]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800719c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d01e      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d019      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071b2:	4b24      	ldr	r3, [pc, #144]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071be:	4a21      	ldr	r2, [pc, #132]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071c0:	4b20      	ldr	r3, [pc, #128]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071ce:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071d0:	4b1c      	ldr	r3, [pc, #112]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071de:	4a19      	ldr	r2, [pc, #100]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d016      	beq.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f0:	f7fc fc26 	bl	8003a40 <HAL_GetTick>
 80071f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f6:	e00b      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071f8:	f7fc fc22 	bl	8003a40 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	f241 3288 	movw	r2, #5000	; 0x1388
 8007206:	4293      	cmp	r3, r2
 8007208:	d902      	bls.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	74fb      	strb	r3, [r7, #19]
            break;
 800720e:	e006      	b.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007210:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007216:	f003 0302 	and.w	r3, r3, #2
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0ec      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 800721e:	7cfb      	ldrb	r3, [r7, #19]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d10b      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007224:	4907      	ldr	r1, [pc, #28]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007226:	4b07      	ldr	r3, [pc, #28]	; (8007244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8007228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007234:	4313      	orrs	r3, r2
 8007236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800723a:	e009      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800723c:	7cfb      	ldrb	r3, [r7, #19]
 800723e:	74bb      	strb	r3, [r7, #18]
 8007240:	e006      	b.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8007242:	bf00      	nop
 8007244:	40021000 	.word	0x40021000
 8007248:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724c:	7cfb      	ldrb	r3, [r7, #19]
 800724e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007250:	7c7b      	ldrb	r3, [r7, #17]
 8007252:	2b01      	cmp	r3, #1
 8007254:	d105      	bne.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007256:	4a9e      	ldr	r2, [pc, #632]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007258:	4b9d      	ldr	r3, [pc, #628]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800725a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007260:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800726e:	4998      	ldr	r1, [pc, #608]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007270:	4b97      	ldr	r3, [pc, #604]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007276:	f023 0203 	bic.w	r2, r3, #3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0302 	and.w	r3, r3, #2
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007290:	498f      	ldr	r1, [pc, #572]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007292:	4b8f      	ldr	r3, [pc, #572]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007298:	f023 020c 	bic.w	r2, r3, #12
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f003 0304 	and.w	r3, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072b2:	4987      	ldr	r1, [pc, #540]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072b4:	4b86      	ldr	r3, [pc, #536]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0308 	and.w	r3, r3, #8
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80072d4:	497e      	ldr	r1, [pc, #504]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072d6:	4b7e      	ldr	r3, [pc, #504]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x270>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072f6:	4976      	ldr	r1, [pc, #472]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072f8:	4b75      	ldr	r3, [pc, #468]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80072fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007318:	496d      	ldr	r1, [pc, #436]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800731a:	4b6d      	ldr	r3, [pc, #436]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800731c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800733a:	4965      	ldr	r1, [pc, #404]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800733c:	4b64      	ldr	r3, [pc, #400]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800733e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734a:	4313      	orrs	r3, r2
 800734c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800735c:	495c      	ldr	r1, [pc, #368]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800735e:	4b5c      	ldr	r3, [pc, #368]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007364:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	4313      	orrs	r3, r2
 800736e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800737e:	4954      	ldr	r1, [pc, #336]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007380:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007386:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073a0:	494b      	ldr	r1, [pc, #300]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073a2:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	4313      	orrs	r3, r2
 80073b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80073c2:	4943      	ldr	r1, [pc, #268]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073c4:	4b42      	ldr	r3, [pc, #264]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ca:	f023 0203 	bic.w	r2, r3, #3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d2:	4313      	orrs	r3, r2
 80073d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d028      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073e4:	493a      	ldr	r1, [pc, #232]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073e6:	4b3a      	ldr	r3, [pc, #232]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80073e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	4313      	orrs	r3, r2
 80073f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007402:	d106      	bne.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007404:	4a32      	ldr	r2, [pc, #200]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007406:	4b32      	ldr	r3, [pc, #200]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800740e:	60d3      	str	r3, [r2, #12]
 8007410:	e011      	b.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x39a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800741a:	d10c      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	3304      	adds	r3, #4
 8007420:	2101      	movs	r1, #1
 8007422:	4618      	mov	r0, r3
 8007424:	f000 f8a4 	bl	8007570 <RCCEx_PLLSAI1_Config>
 8007428:	4603      	mov	r3, r0
 800742a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800742c:	7cfb      	ldrb	r3, [r7, #19]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x39a>
        {
          /* set overall return value */
          status = ret;
 8007432:	7cfb      	ldrb	r3, [r7, #19]
 8007434:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d028      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007442:	4923      	ldr	r1, [pc, #140]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007444:	4b22      	ldr	r3, [pc, #136]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007452:	4313      	orrs	r3, r2
 8007454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007460:	d106      	bne.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007464:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800746c:	60d3      	str	r3, [r2, #12]
 800746e:	e011      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007478:	d10c      	bne.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3304      	adds	r3, #4
 800747e:	2101      	movs	r1, #1
 8007480:	4618      	mov	r0, r3
 8007482:	f000 f875 	bl	8007570 <RCCEx_PLLSAI1_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800748a:	7cfb      	ldrb	r3, [r7, #19]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
      {
        /* set overall return value */
        status = ret;
 8007490:	7cfb      	ldrb	r3, [r7, #19]
 8007492:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d02b      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80074a0:	490b      	ldr	r1, [pc, #44]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80074a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b0:	4313      	orrs	r3, r2
 80074b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80074be:	d109      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074c0:	4a03      	ldr	r2, [pc, #12]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ca:	60d3      	str	r3, [r2, #12]
 80074cc:	e014      	b.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
 80074ce:	bf00      	nop
 80074d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80074dc:	d10c      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3304      	adds	r3, #4
 80074e2:	2101      	movs	r1, #1
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 f843 	bl	8007570 <RCCEx_PLLSAI1_Config>
 80074ea:	4603      	mov	r3, r0
 80074ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074ee:	7cfb      	ldrb	r3, [r7, #19]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 80074f4:	7cfb      	ldrb	r3, [r7, #19]
 80074f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d01c      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007504:	4919      	ldr	r1, [pc, #100]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8007506:	4b19      	ldr	r3, [pc, #100]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 8007508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800751e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007522:	d10c      	bne.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	2102      	movs	r1, #2
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f820 	bl	8007570 <RCCEx_PLLSAI1_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007534:	7cfb      	ldrb	r3, [r7, #19]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      {
        /* set overall return value */
        status = ret;
 800753a:	7cfb      	ldrb	r3, [r7, #19]
 800753c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800754a:	4908      	ldr	r1, [pc, #32]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755a:	4313      	orrs	r3, r2
 800755c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007560:	7cbb      	ldrb	r3, [r7, #18]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3718      	adds	r7, #24
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40021000 	.word	0x40021000

08007570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800757e:	4b73      	ldr	r3, [pc, #460]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0303 	and.w	r3, r3, #3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d018      	beq.n	80075bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800758a:	4b70      	ldr	r3, [pc, #448]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	f003 0203 	and.w	r2, r3, #3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	429a      	cmp	r2, r3
 8007598:	d10d      	bne.n	80075b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
       ||
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80075a2:	4b6a      	ldr	r3, [pc, #424]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	091b      	lsrs	r3, r3, #4
 80075a8:	f003 0307 	and.w	r3, r3, #7
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
       ||
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d044      	beq.n	8007640 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
 80075ba:	e041      	b.n	8007640 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d00c      	beq.n	80075de <RCCEx_PLLSAI1_Config+0x6e>
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d013      	beq.n	80075f0 <RCCEx_PLLSAI1_Config+0x80>
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d120      	bne.n	800760e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075cc:	4b5f      	ldr	r3, [pc, #380]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0302 	and.w	r3, r3, #2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d11d      	bne.n	8007614 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075dc:	e01a      	b.n	8007614 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075de:	4b5b      	ldr	r3, [pc, #364]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d116      	bne.n	8007618 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ee:	e013      	b.n	8007618 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075f0:	4b56      	ldr	r3, [pc, #344]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10f      	bne.n	800761c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075fc:	4b53      	ldr	r3, [pc, #332]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d109      	bne.n	800761c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800760c:	e006      	b.n	800761c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	73fb      	strb	r3, [r7, #15]
      break;
 8007612:	e004      	b.n	800761e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007614:	bf00      	nop
 8007616:	e002      	b.n	800761e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8007618:	bf00      	nop
 800761a:	e000      	b.n	800761e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800761c:	bf00      	nop
    }

    if(status == HAL_OK)
 800761e:	7bfb      	ldrb	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d10d      	bne.n	8007640 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007624:	4849      	ldr	r0, [pc, #292]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007626:	4b49      	ldr	r3, [pc, #292]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	3b01      	subs	r3, #1
 8007638:	011b      	lsls	r3, r3, #4
 800763a:	430b      	orrs	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d17c      	bne.n	8007740 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007646:	4a41      	ldr	r2, [pc, #260]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007648:	4b40      	ldr	r3, [pc, #256]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007652:	f7fc f9f5 	bl	8003a40 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007658:	e009      	b.n	800766e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765a:	f7fc f9f1 	bl	8003a40 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d902      	bls.n	800766e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	73fb      	strb	r3, [r7, #15]
        break;
 800766c:	e005      	b.n	800767a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800766e:	4b37      	ldr	r3, [pc, #220]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1ef      	bne.n	800765a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d15f      	bne.n	8007740 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d110      	bne.n	80076a8 <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007686:	4831      	ldr	r0, [pc, #196]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007688:	4b30      	ldr	r3, [pc, #192]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007690:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	6892      	ldr	r2, [r2, #8]
 8007698:	0211      	lsls	r1, r2, #8
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	68d2      	ldr	r2, [r2, #12]
 800769e:	06d2      	lsls	r2, r2, #27
 80076a0:	430a      	orrs	r2, r1
 80076a2:	4313      	orrs	r3, r2
 80076a4:	6103      	str	r3, [r0, #16]
 80076a6:	e027      	b.n	80076f8 <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d112      	bne.n	80076d4 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076ae:	4827      	ldr	r0, [pc, #156]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076b0:	4b26      	ldr	r3, [pc, #152]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80076b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	0211      	lsls	r1, r2, #8
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6912      	ldr	r2, [r2, #16]
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	3a01      	subs	r2, #1
 80076ca:	0552      	lsls	r2, r2, #21
 80076cc:	430a      	orrs	r2, r1
 80076ce:	4313      	orrs	r3, r2
 80076d0:	6103      	str	r3, [r0, #16]
 80076d2:	e011      	b.n	80076f8 <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076d4:	481d      	ldr	r0, [pc, #116]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076d6:	4b1d      	ldr	r3, [pc, #116]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	6892      	ldr	r2, [r2, #8]
 80076e6:	0211      	lsls	r1, r2, #8
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	6952      	ldr	r2, [r2, #20]
 80076ec:	0852      	lsrs	r2, r2, #1
 80076ee:	3a01      	subs	r2, #1
 80076f0:	0652      	lsls	r2, r2, #25
 80076f2:	430a      	orrs	r2, r1
 80076f4:	4313      	orrs	r3, r2
 80076f6:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076f8:	4a14      	ldr	r2, [pc, #80]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076fa:	4b14      	ldr	r3, [pc, #80]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007702:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007704:	f7fc f99c 	bl	8003a40 <HAL_GetTick>
 8007708:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800770a:	e009      	b.n	8007720 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800770c:	f7fc f998 	bl	8003a40 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d902      	bls.n	8007720 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	73fb      	strb	r3, [r7, #15]
          break;
 800771e:	e005      	b.n	800772c <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0ef      	beq.n	800770c <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 800772c:	7bfb      	ldrb	r3, [r7, #15]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007732:	4906      	ldr	r1, [pc, #24]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007734:	4b05      	ldr	r3, [pc, #20]	; (800774c <RCCEx_PLLSAI1_Config+0x1dc>)
 8007736:	691a      	ldr	r2, [r3, #16]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	4313      	orrs	r3, r2
 800773e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000

08007750 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d06c      	beq.n	800783c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d106      	bne.n	800777c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f7fb ff22 	bl	80035c0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	22ca      	movs	r2, #202	; 0xca
 800778a:	625a      	str	r2, [r3, #36]	; 0x24
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2253      	movs	r2, #83	; 0x53
 8007792:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f925 	bl	80079e4 <RTC_EnterInitMode>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d14b      	bne.n	800783c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80077b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077b6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	6891      	ldr	r1, [r2, #8]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	6850      	ldr	r0, [r2, #4]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	6912      	ldr	r2, [r2, #16]
 80077ca:	4310      	orrs	r0, r2
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	6992      	ldr	r2, [r2, #24]
 80077d0:	4302      	orrs	r2, r0
 80077d2:	430a      	orrs	r2, r1
 80077d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	68d2      	ldr	r2, [r2, #12]
 80077de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	6812      	ldr	r2, [r2, #0]
 80077e8:	6911      	ldr	r1, [r2, #16]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	6892      	ldr	r2, [r2, #8]
 80077ee:	0412      	lsls	r2, r2, #16
 80077f0:	430a      	orrs	r2, r1
 80077f2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f929 	bl	8007a4c <RTC_ExitInitMode>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11b      	bne.n	800783c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6812      	ldr	r2, [r2, #0]
 800780c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800780e:	f022 0203 	bic.w	r2, r2, #3
 8007812:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	6812      	ldr	r2, [r2, #0]
 800781c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	69d0      	ldr	r0, [r2, #28]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	6952      	ldr	r2, [r2, #20]
 8007826:	4302      	orrs	r2, r0
 8007828:	430a      	orrs	r2, r1
 800782a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	22ff      	movs	r2, #255	; 0xff
 8007832:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800783c:	7bfb      	ldrb	r3, [r7, #15]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}

08007846 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007846:	b580      	push	{r7, lr}
 8007848:	b086      	sub	sp, #24
 800784a:	af00      	add	r7, sp, #0
 800784c:	60f8      	str	r0, [r7, #12]
 800784e:	60b9      	str	r1, [r7, #8]
 8007850:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007874:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007878:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007884:	b2da      	uxtb	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	0a1b      	lsrs	r3, r3, #8
 800788e:	b2db      	uxtb	r3, r3
 8007890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007894:	b2da      	uxtb	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	0d9b      	lsrs	r3, r3, #22
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d11a      	bne.n	80078f4 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f900 	bl	8007ac8 <RTC_Bcd2ToByte>
 80078c8:	4603      	mov	r3, r0
 80078ca:	461a      	mov	r2, r3
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	785b      	ldrb	r3, [r3, #1]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 f8f7 	bl	8007ac8 <RTC_Bcd2ToByte>
 80078da:	4603      	mov	r3, r0
 80078dc:	461a      	mov	r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f000 f8ee 	bl	8007ac8 <RTC_Bcd2ToByte>
 80078ec:	4603      	mov	r3, r0
 80078ee:	461a      	mov	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3718      	adds	r7, #24
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b086      	sub	sp, #24
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
 8007906:	60b9      	str	r1, [r7, #8]
 8007908:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007914:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007918:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	0c1b      	lsrs	r3, r3, #16
 800791e:	b2da      	uxtb	r2, r3
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	b2db      	uxtb	r3, r3
 800792a:	f003 031f 	and.w	r3, r3, #31
 800792e:	b2da      	uxtb	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800793c:	b2da      	uxtb	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	0b5b      	lsrs	r3, r3, #13
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0307 	and.w	r3, r3, #7
 800794c:	b2da      	uxtb	r2, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11a      	bne.n	800798e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	78db      	ldrb	r3, [r3, #3]
 800795c:	4618      	mov	r0, r3
 800795e:	f000 f8b3 	bl	8007ac8 <RTC_Bcd2ToByte>
 8007962:	4603      	mov	r3, r0
 8007964:	461a      	mov	r2, r3
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 f8aa 	bl	8007ac8 <RTC_Bcd2ToByte>
 8007974:	4603      	mov	r3, r0
 8007976:	461a      	mov	r2, r3
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	789b      	ldrb	r3, [r3, #2]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 f8a1 	bl	8007ac8 <RTC_Bcd2ToByte>
 8007986:	4603      	mov	r3, r0
 8007988:	461a      	mov	r2, r3
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6812      	ldr	r2, [r2, #0]
 80079a8:	68d2      	ldr	r2, [r2, #12]
 80079aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80079ae:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80079b0:	f7fc f846 	bl	8003a40 <HAL_GetTick>
 80079b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079b6:	e009      	b.n	80079cc <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079b8:	f7fc f842 	bl	8003a40 <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c6:	d901      	bls.n	80079cc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e007      	b.n	80079dc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f003 0320 	and.w	r3, r3, #32
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0ee      	beq.n	80079b8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3710      	adds	r7, #16
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d120      	bne.n	8007a40 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007a08:	f7fc f81a 	bl	8003a40 <HAL_GetTick>
 8007a0c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a0e:	e00d      	b.n	8007a2c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007a10:	f7fc f816 	bl	8003a40 <HAL_GetTick>
 8007a14:	4602      	mov	r2, r0
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a1e:	d905      	bls.n	8007a2c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007a20:	2303      	movs	r3, #3
 8007a22:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2203      	movs	r2, #3
 8007a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <RTC_EnterInitMode+0x5c>
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d1e7      	bne.n	8007a10 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
	...

08007a4c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007a58:	4a1a      	ldr	r2, [pc, #104]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007a5a:	4b1a      	ldr	r3, [pc, #104]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a62:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a64:	4b17      	ldr	r3, [pc, #92]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 0320 	and.w	r3, r3, #32
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10c      	bne.n	8007a8a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f7ff ff91 	bl	8007998 <HAL_RTC_WaitForSynchro>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d01e      	beq.n	8007aba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2203      	movs	r2, #3
 8007a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007a84:	2303      	movs	r3, #3
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	e017      	b.n	8007aba <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 0320 	bic.w	r3, r3, #32
 8007a94:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff ff7e 	bl	8007998 <HAL_RTC_WaitForSynchro>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2203      	movs	r2, #3
 8007aa6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007aae:	4a05      	ldr	r2, [pc, #20]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007ab0:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <RTC_ExitInitMode+0x78>)
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	f043 0320 	orr.w	r3, r3, #32
 8007ab8:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40002800 	.word	0x40002800

08007ac8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b085      	sub	sp, #20
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	091b      	lsrs	r3, r3, #4
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	461a      	mov	r2, r3
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	005b      	lsls	r3, r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	f003 030f 	and.w	r3, r3, #15
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	7bfb      	ldrb	r3, [r7, #15]
 8007aec:	4413      	add	r3, r2
 8007aee:	b2db      	uxtb	r3, r3
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr

08007afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e049      	b.n	8007ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d106      	bne.n	8007b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7fb fdb4 	bl	8003690 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	3304      	adds	r3, #4
 8007b38:	4619      	mov	r1, r3
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	f000 fc56 	bl	80083ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2201      	movs	r2, #1
 8007b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2201      	movs	r2, #1
 8007b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
	...

08007bac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d001      	beq.n	8007bc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e038      	b.n	8007c36 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1c      	ldr	r2, [pc, #112]	; (8007c44 <HAL_TIM_Base_Start+0x98>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00e      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x48>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bde:	d009      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x48>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a18      	ldr	r2, [pc, #96]	; (8007c48 <HAL_TIM_Base_Start+0x9c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d004      	beq.n	8007bf4 <HAL_TIM_Base_Start+0x48>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a17      	ldr	r2, [pc, #92]	; (8007c4c <HAL_TIM_Base_Start+0xa0>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d115      	bne.n	8007c20 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	4b15      	ldr	r3, [pc, #84]	; (8007c50 <HAL_TIM_Base_Start+0xa4>)
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b06      	cmp	r3, #6
 8007c04:	d015      	beq.n	8007c32 <HAL_TIM_Base_Start+0x86>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c0c:	d011      	beq.n	8007c32 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	6812      	ldr	r2, [r2, #0]
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	f042 0201 	orr.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1e:	e008      	b.n	8007c32 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	6812      	ldr	r2, [r2, #0]
 8007c28:	6812      	ldr	r2, [r2, #0]
 8007c2a:	f042 0201 	orr.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e000      	b.n	8007c34 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c34:	2300      	movs	r3, #0
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	3714      	adds	r7, #20
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	40000400 	.word	0x40000400
 8007c4c:	40014000 	.word	0x40014000
 8007c50:	00010007 	.word	0x00010007

08007c54 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6a1a      	ldr	r2, [r3, #32]
 8007c62:	f241 1311 	movw	r3, #4369	; 0x1111
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d10f      	bne.n	8007c8c <HAL_TIM_Base_Stop+0x38>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6a1a      	ldr	r2, [r3, #32]
 8007c72:	f240 4344 	movw	r3, #1092	; 0x444
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d107      	bne.n	8007c8c <HAL_TIM_Base_Stop+0x38>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	6812      	ldr	r2, [r2, #0]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	370c      	adds	r7, #12
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr

08007ca2 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d101      	bne.n	8007cb4 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e049      	b.n	8007d48 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d106      	bne.n	8007cce <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fb fc95 	bl	80035f8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f000 fb83 	bl	80083ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <HAL_TIM_IC_Start_IT+0x1a>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	e023      	b.n	8007db2 <HAL_TIM_IC_Start_IT+0x62>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	2b04      	cmp	r3, #4
 8007d6e:	d104      	bne.n	8007d7a <HAL_TIM_IC_Start_IT+0x2a>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	e01b      	b.n	8007db2 <HAL_TIM_IC_Start_IT+0x62>
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	2b08      	cmp	r3, #8
 8007d7e:	d104      	bne.n	8007d8a <HAL_TIM_IC_Start_IT+0x3a>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	e013      	b.n	8007db2 <HAL_TIM_IC_Start_IT+0x62>
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b0c      	cmp	r3, #12
 8007d8e:	d104      	bne.n	8007d9a <HAL_TIM_IC_Start_IT+0x4a>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	e00b      	b.n	8007db2 <HAL_TIM_IC_Start_IT+0x62>
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b10      	cmp	r3, #16
 8007d9e:	d104      	bne.n	8007daa <HAL_TIM_IC_Start_IT+0x5a>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	e003      	b.n	8007db2 <HAL_TIM_IC_Start_IT+0x62>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d104      	bne.n	8007dc4 <HAL_TIM_IC_Start_IT+0x74>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	e013      	b.n	8007dec <HAL_TIM_IC_Start_IT+0x9c>
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	2b04      	cmp	r3, #4
 8007dc8:	d104      	bne.n	8007dd4 <HAL_TIM_IC_Start_IT+0x84>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	e00b      	b.n	8007dec <HAL_TIM_IC_Start_IT+0x9c>
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d104      	bne.n	8007de4 <HAL_TIM_IC_Start_IT+0x94>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	e003      	b.n	8007dec <HAL_TIM_IC_Start_IT+0x9c>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d102      	bne.n	8007dfa <HAL_TIM_IC_Start_IT+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007df4:	7bbb      	ldrb	r3, [r7, #14]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d001      	beq.n	8007dfe <HAL_TIM_IC_Start_IT+0xae>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e0c9      	b.n	8007f92 <HAL_TIM_IC_Start_IT+0x242>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d104      	bne.n	8007e0e <HAL_TIM_IC_Start_IT+0xbe>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2202      	movs	r2, #2
 8007e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e0c:	e023      	b.n	8007e56 <HAL_TIM_IC_Start_IT+0x106>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d104      	bne.n	8007e1e <HAL_TIM_IC_Start_IT+0xce>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2202      	movs	r2, #2
 8007e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e1c:	e01b      	b.n	8007e56 <HAL_TIM_IC_Start_IT+0x106>
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b08      	cmp	r3, #8
 8007e22:	d104      	bne.n	8007e2e <HAL_TIM_IC_Start_IT+0xde>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e2c:	e013      	b.n	8007e56 <HAL_TIM_IC_Start_IT+0x106>
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	2b0c      	cmp	r3, #12
 8007e32:	d104      	bne.n	8007e3e <HAL_TIM_IC_Start_IT+0xee>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e3c:	e00b      	b.n	8007e56 <HAL_TIM_IC_Start_IT+0x106>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d104      	bne.n	8007e4e <HAL_TIM_IC_Start_IT+0xfe>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e4c:	e003      	b.n	8007e56 <HAL_TIM_IC_Start_IT+0x106>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d104      	bne.n	8007e66 <HAL_TIM_IC_Start_IT+0x116>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2202      	movs	r2, #2
 8007e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e64:	e013      	b.n	8007e8e <HAL_TIM_IC_Start_IT+0x13e>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d104      	bne.n	8007e76 <HAL_TIM_IC_Start_IT+0x126>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2202      	movs	r2, #2
 8007e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e74:	e00b      	b.n	8007e8e <HAL_TIM_IC_Start_IT+0x13e>
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d104      	bne.n	8007e86 <HAL_TIM_IC_Start_IT+0x136>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e84:	e003      	b.n	8007e8e <HAL_TIM_IC_Start_IT+0x13e>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d841      	bhi.n	8007f18 <HAL_TIM_IC_Start_IT+0x1c8>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_TIM_IC_Start_IT+0x14c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007f19 	.word	0x08007f19
 8007ea4:	08007f19 	.word	0x08007f19
 8007ea8:	08007f19 	.word	0x08007f19
 8007eac:	08007ee3 	.word	0x08007ee3
 8007eb0:	08007f19 	.word	0x08007f19
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007f19 	.word	0x08007f19
 8007ebc:	08007ef5 	.word	0x08007ef5
 8007ec0:	08007f19 	.word	0x08007f19
 8007ec4:	08007f19 	.word	0x08007f19
 8007ec8:	08007f19 	.word	0x08007f19
 8007ecc:	08007f07 	.word	0x08007f07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	68d2      	ldr	r2, [r2, #12]
 8007eda:	f042 0202 	orr.w	r2, r2, #2
 8007ede:	60da      	str	r2, [r3, #12]
      break;
 8007ee0:	e01b      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	68d2      	ldr	r2, [r2, #12]
 8007eec:	f042 0204 	orr.w	r2, r2, #4
 8007ef0:	60da      	str	r2, [r3, #12]
      break;
 8007ef2:	e012      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	687a      	ldr	r2, [r7, #4]
 8007efa:	6812      	ldr	r2, [r2, #0]
 8007efc:	68d2      	ldr	r2, [r2, #12]
 8007efe:	f042 0208 	orr.w	r2, r2, #8
 8007f02:	60da      	str	r2, [r3, #12]
      break;
 8007f04:	e009      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	68d2      	ldr	r2, [r2, #12]
 8007f10:	f042 0210 	orr.w	r2, r2, #16
 8007f14:	60da      	str	r2, [r3, #12]
      break;
 8007f16:	e000      	b.n	8007f1a <HAL_TIM_IC_Start_IT+0x1ca>
    }

    default:
      break;
 8007f18:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	6839      	ldr	r1, [r7, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fbe2 	bl	80086ec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <HAL_TIM_IC_Start_IT+0x24c>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d00e      	beq.n	8007f50 <HAL_TIM_IC_Start_IT+0x200>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3a:	d009      	beq.n	8007f50 <HAL_TIM_IC_Start_IT+0x200>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a17      	ldr	r2, [pc, #92]	; (8007fa0 <HAL_TIM_IC_Start_IT+0x250>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d004      	beq.n	8007f50 <HAL_TIM_IC_Start_IT+0x200>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <HAL_TIM_IC_Start_IT+0x254>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d115      	bne.n	8007f7c <HAL_TIM_IC_Start_IT+0x22c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	4b14      	ldr	r3, [pc, #80]	; (8007fa8 <HAL_TIM_IC_Start_IT+0x258>)
 8007f58:	4013      	ands	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b06      	cmp	r3, #6
 8007f60:	d015      	beq.n	8007f8e <HAL_TIM_IC_Start_IT+0x23e>
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f68:	d011      	beq.n	8007f8e <HAL_TIM_IC_Start_IT+0x23e>
    {
      __HAL_TIM_ENABLE(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	f042 0201 	orr.w	r2, r2, #1
 8007f78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7a:	e008      	b.n	8007f8e <HAL_TIM_IC_Start_IT+0x23e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	f042 0201 	orr.w	r2, r2, #1
 8007f8a:	601a      	str	r2, [r3, #0]
 8007f8c:	e000      	b.n	8007f90 <HAL_TIM_IC_Start_IT+0x240>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	40012c00 	.word	0x40012c00
 8007fa0:	40000400 	.word	0x40000400
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	00010007 	.word	0x00010007

08007fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0202 	mvn.w	r2, #2
 8007fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f7fa ffb6 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f9da 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f9e1 	bl	80083c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b04      	cmp	r3, #4
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b04      	cmp	r3, #4
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0204 	mvn.w	r2, #4
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7fa ff8c 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f9b0 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f9b7 	bl	80083c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b08      	cmp	r3, #8
 8008068:	d122      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b08      	cmp	r3, #8
 8008076:	d11b      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0208 	mvn.w	r2, #8
 8008080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2204      	movs	r2, #4
 8008086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f7fa ff62 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 800809c:	e005      	b.n	80080aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f986 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f98d 	bl	80083c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d122      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d11b      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0210 	mvn.w	r2, #16
 80080d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2208      	movs	r2, #8
 80080da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7fa ff38 	bl	8002f60 <HAL_TIM_IC_CaptureCallback>
 80080f0:	e005      	b.n	80080fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f95c 	bl	80083b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f963 	bl	80083c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0201 	mvn.w	r2, #1
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f936 	bl	800839c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 fb66 	bl	8008828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816a:	d10e      	bne.n	800818a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d107      	bne.n	800818a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fb59 	bl	800883c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d10e      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d107      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f911 	bl	80083d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d10e      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d107      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f06f 0220 	mvn.w	r2, #32
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb19 	bl	8008814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d101      	bne.n	8008204 <HAL_TIM_IC_ConfigChannel+0x1a>
 8008200:	2302      	movs	r3, #2
 8008202:	e082      	b.n	800830a <HAL_TIM_IC_ConfigChannel+0x120>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d11b      	bne.n	800824a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6818      	ldr	r0, [r3, #0]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f000 f951 	bl	80084c8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	6812      	ldr	r2, [r2, #0]
 800822e:	6992      	ldr	r2, [r2, #24]
 8008230:	f022 020c 	bic.w	r2, r2, #12
 8008234:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	6991      	ldr	r1, [r2, #24]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	6892      	ldr	r2, [r2, #8]
 8008244:	430a      	orrs	r2, r1
 8008246:	619a      	str	r2, [r3, #24]
 8008248:	e05a      	b.n	8008300 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d11c      	bne.n	800828a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	6819      	ldr	r1, [r3, #0]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f000 f98e 	bl	8008580 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	6812      	ldr	r2, [r2, #0]
 800826c:	6992      	ldr	r2, [r2, #24]
 800826e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008272:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	6812      	ldr	r2, [r2, #0]
 800827c:	6991      	ldr	r1, [r2, #24]
 800827e:	68ba      	ldr	r2, [r7, #8]
 8008280:	6892      	ldr	r2, [r2, #8]
 8008282:	0212      	lsls	r2, r2, #8
 8008284:	430a      	orrs	r2, r1
 8008286:	619a      	str	r2, [r3, #24]
 8008288:	e03a      	b.n	8008300 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b08      	cmp	r3, #8
 800828e:	d11b      	bne.n	80082c8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6818      	ldr	r0, [r3, #0]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	6819      	ldr	r1, [r3, #0]
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	f000 f9ab 	bl	80085fa <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	6812      	ldr	r2, [r2, #0]
 80082ac:	69d2      	ldr	r2, [r2, #28]
 80082ae:	f022 020c 	bic.w	r2, r2, #12
 80082b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	69d1      	ldr	r1, [r2, #28]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	6892      	ldr	r2, [r2, #8]
 80082c2:	430a      	orrs	r2, r1
 80082c4:	61da      	str	r2, [r3, #28]
 80082c6:	e01b      	b.n	8008300 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6818      	ldr	r0, [r3, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6819      	ldr	r1, [r3, #0]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f000 f9cb 	bl	8008672 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	6812      	ldr	r2, [r2, #0]
 80082e4:	69d2      	ldr	r2, [r2, #28]
 80082e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	69d1      	ldr	r1, [r2, #28]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	6892      	ldr	r2, [r2, #8]
 80082fa:	0212      	lsls	r2, r2, #8
 80082fc:	430a      	orrs	r2, r1
 80082fe:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2200      	movs	r2, #0
 8008304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b0c      	cmp	r3, #12
 8008326:	d831      	bhi.n	800838c <HAL_TIM_ReadCapturedValue+0x78>
 8008328:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <HAL_TIM_ReadCapturedValue+0x1c>)
 800832a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832e:	bf00      	nop
 8008330:	08008365 	.word	0x08008365
 8008334:	0800838d 	.word	0x0800838d
 8008338:	0800838d 	.word	0x0800838d
 800833c:	0800838d 	.word	0x0800838d
 8008340:	0800836f 	.word	0x0800836f
 8008344:	0800838d 	.word	0x0800838d
 8008348:	0800838d 	.word	0x0800838d
 800834c:	0800838d 	.word	0x0800838d
 8008350:	08008379 	.word	0x08008379
 8008354:	0800838d 	.word	0x0800838d
 8008358:	0800838d 	.word	0x0800838d
 800835c:	0800838d 	.word	0x0800838d
 8008360:	08008383 	.word	0x08008383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800836a:	60fb      	str	r3, [r7, #12]

      break;
 800836c:	e00f      	b.n	800838e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008374:	60fb      	str	r3, [r7, #12]

      break;
 8008376:	e00a      	b.n	800838e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800837e:	60fb      	str	r3, [r7, #12]

      break;
 8008380:	e005      	b.n	800838e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008388:	60fb      	str	r3, [r7, #12]

      break;
 800838a:	e000      	b.n	800838e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800838c:	bf00      	nop
  }

  return tmpreg;
 800838e:	68fb      	ldr	r3, [r7, #12]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a2e      	ldr	r2, [pc, #184]	; (80084b8 <TIM_Base_SetConfig+0xcc>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d007      	beq.n	8008414 <TIM_Base_SetConfig+0x28>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840a:	d003      	beq.n	8008414 <TIM_Base_SetConfig+0x28>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a2b      	ldr	r2, [pc, #172]	; (80084bc <TIM_Base_SetConfig+0xd0>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d108      	bne.n	8008426 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800841a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4313      	orrs	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a23      	ldr	r2, [pc, #140]	; (80084b8 <TIM_Base_SetConfig+0xcc>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d00f      	beq.n	800844e <TIM_Base_SetConfig+0x62>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008434:	d00b      	beq.n	800844e <TIM_Base_SetConfig+0x62>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a20      	ldr	r2, [pc, #128]	; (80084bc <TIM_Base_SetConfig+0xd0>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d007      	beq.n	800844e <TIM_Base_SetConfig+0x62>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <TIM_Base_SetConfig+0xd4>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d003      	beq.n	800844e <TIM_Base_SetConfig+0x62>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <TIM_Base_SetConfig+0xd8>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d108      	bne.n	8008460 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4313      	orrs	r3, r2
 800845e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	689a      	ldr	r2, [r3, #8]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <TIM_Base_SetConfig+0xcc>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <TIM_Base_SetConfig+0xb0>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0c      	ldr	r2, [pc, #48]	; (80084c0 <TIM_Base_SetConfig+0xd4>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_Base_SetConfig+0xb0>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0b      	ldr	r2, [pc, #44]	; (80084c4 <TIM_Base_SetConfig+0xd8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d103      	bne.n	80084a4 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	615a      	str	r2, [r3, #20]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40012c00 	.word	0x40012c00
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40014000 	.word	0x40014000
 80084c4:	40014400 	.word	0x40014400

080084c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b087      	sub	sp, #28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	607a      	str	r2, [r7, #4]
 80084d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6a1b      	ldr	r3, [r3, #32]
 80084da:	f023 0201 	bic.w	r2, r3, #1
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4a20      	ldr	r2, [pc, #128]	; (8008574 <TIM_TI1_SetConfig+0xac>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d00b      	beq.n	800850e <TIM_TI1_SetConfig+0x46>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fc:	d007      	beq.n	800850e <TIM_TI1_SetConfig+0x46>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <TIM_TI1_SetConfig+0xb0>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d003      	beq.n	800850e <TIM_TI1_SetConfig+0x46>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	4a1c      	ldr	r2, [pc, #112]	; (800857c <TIM_TI1_SetConfig+0xb4>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d101      	bne.n	8008512 <TIM_TI1_SetConfig+0x4a>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <TIM_TI1_SetConfig+0x4c>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d008      	beq.n	800852a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	f023 0303 	bic.w	r3, r3, #3
 800851e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4313      	orrs	r3, r2
 8008526:	617b      	str	r3, [r7, #20]
 8008528:	e003      	b.n	8008532 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	f043 0301 	orr.w	r3, r3, #1
 8008530:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	b2db      	uxtb	r3, r3
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f023 030a 	bic.w	r3, r3, #10
 800854c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f003 030a 	and.w	r3, r3, #10
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	621a      	str	r2, [r3, #32]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	40012c00 	.word	0x40012c00
 8008578:	40000400 	.word	0x40000400
 800857c:	40014000 	.word	0x40014000

08008580 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008580:	b480      	push	{r7}
 8008582:	b087      	sub	sp, #28
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6a1b      	ldr	r3, [r3, #32]
 8008592:	f023 0210 	bic.w	r2, r3, #16
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	699b      	ldr	r3, [r3, #24]
 800859e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	021b      	lsls	r3, r3, #8
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	031b      	lsls	r3, r3, #12
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80085dc:	693a      	ldr	r2, [r7, #16]
 80085de:	4313      	orrs	r3, r2
 80085e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	621a      	str	r2, [r3, #32]
}
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b087      	sub	sp, #28
 80085fe:	af00      	add	r7, sp, #0
 8008600:	60f8      	str	r0, [r7, #12]
 8008602:	60b9      	str	r1, [r7, #8]
 8008604:	607a      	str	r2, [r7, #4]
 8008606:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4313      	orrs	r3, r2
 800862e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008636:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	b2db      	uxtb	r3, r3
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800864a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	021b      	lsls	r3, r3, #8
 8008650:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	621a      	str	r2, [r3, #32]
}
 8008666:	bf00      	nop
 8008668:	371c      	adds	r7, #28
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008672:	b480      	push	{r7}
 8008674:	b087      	sub	sp, #28
 8008676:	af00      	add	r7, sp, #0
 8008678:	60f8      	str	r0, [r7, #12]
 800867a:	60b9      	str	r1, [r7, #8]
 800867c:	607a      	str	r2, [r7, #4]
 800867e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a1b      	ldr	r3, [r3, #32]
 8008696:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800869e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	021b      	lsls	r3, r3, #8
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	4313      	orrs	r3, r2
 80086a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	031b      	lsls	r3, r3, #12
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80086c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	031b      	lsls	r3, r3, #12
 80086ca:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	621a      	str	r2, [r3, #32]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2201      	movs	r2, #1
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a1a      	ldr	r2, [r3, #32]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	43db      	mvns	r3, r3
 800870e:	401a      	ands	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 031f 	and.w	r3, r3, #31
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e054      	b.n	80087fa <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a24      	ldr	r2, [pc, #144]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d108      	bne.n	800878c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a17      	ldr	r2, [pc, #92]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00e      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b8:	d009      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a13      	ldr	r2, [pc, #76]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d004      	beq.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a11      	ldr	r2, [pc, #68]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d10c      	bne.n	80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40000400 	.word	0x40000400
 8008810:	40014000 	.word	0x40014000

08008814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d101      	bne.n	8008862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e040      	b.n	80088e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fa ff2c 	bl	80036d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	; 0x24
 800887c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	6812      	ldr	r2, [r2, #0]
 8008886:	6812      	ldr	r2, [r2, #0]
 8008888:	f022 0201 	bic.w	r2, r2, #1
 800888c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fb26 	bl	8008ee0 <UART_SetConfig>
 8008894:	4603      	mov	r3, r0
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e022      	b.n	80088e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d002      	beq.n	80088ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f000 fd72 	bl	8009390 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	6852      	ldr	r2, [r2, #4]
 80088b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	6812      	ldr	r2, [r2, #0]
 80088c4:	6892      	ldr	r2, [r2, #8]
 80088c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80088ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	f042 0201 	orr.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fdf9 	bl	80094d4 <UART_CheckIdleState>
 80088e2:	4603      	mov	r3, r0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b08a      	sub	sp, #40	; 0x28
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	4613      	mov	r3, r2
 80088fa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008900:	2b20      	cmp	r3, #32
 8008902:	f040 8082 	bne.w	8008a0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_UART_Transmit+0x26>
 800890c:	88fb      	ldrh	r3, [r7, #6]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e07a      	b.n	8008a0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800891c:	2b01      	cmp	r3, #1
 800891e:	d101      	bne.n	8008924 <HAL_UART_Transmit+0x38>
 8008920:	2302      	movs	r3, #2
 8008922:	e073      	b.n	8008a0c <HAL_UART_Transmit+0x120>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2200      	movs	r2, #0
 8008930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2221      	movs	r2, #33	; 0x21
 8008938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800893a:	f7fb f881 	bl	8003a40 <HAL_GetTick>
 800893e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	88fa      	ldrh	r2, [r7, #6]
 800894c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008958:	d108      	bne.n	800896c <HAL_UART_Transmit+0x80>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	61bb      	str	r3, [r7, #24]
 800896a:	e003      	b.n	8008974 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008970:	2300      	movs	r3, #0
 8008972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800897c:	e02d      	b.n	80089da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	9300      	str	r3, [sp, #0]
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	2200      	movs	r2, #0
 8008986:	2180      	movs	r1, #128	; 0x80
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fdec 	bl	8009566 <UART_WaitOnFlagUntilTimeout>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008994:	2303      	movs	r3, #3
 8008996:	e039      	b.n	8008a0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	8812      	ldrh	r2, [r2, #0]
 80089a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089aa:	b292      	uxth	r2, r2
 80089ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	3302      	adds	r3, #2
 80089b2:	61bb      	str	r3, [r7, #24]
 80089b4:	e008      	b.n	80089c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69fa      	ldr	r2, [r7, #28]
 80089bc:	7812      	ldrb	r2, [r2, #0]
 80089be:	b292      	uxth	r2, r2
 80089c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	3301      	adds	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	3b01      	subs	r3, #1
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1cb      	bne.n	800897e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2200      	movs	r2, #0
 80089ee:	2140      	movs	r1, #64	; 0x40
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fdb8 	bl	8009566 <UART_WaitOnFlagUntilTimeout>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e005      	b.n	8008a0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2220      	movs	r2, #32
 8008a04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	e000      	b.n	8008a0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008a0a:	2302      	movs	r3, #2
  }
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	4613      	mov	r3, r2
 8008a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d131      	bne.n	8008a8e <HAL_UART_Receive_IT+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <HAL_UART_Receive_IT+0x22>
 8008a30:	88fb      	ldrh	r3, [r7, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e02a      	b.n	8008a90 <HAL_UART_Receive_IT+0x7c>
    }

    __HAL_LOCK(huart);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d101      	bne.n	8008a48 <HAL_UART_Receive_IT+0x34>
 8008a44:	2302      	movs	r3, #2
 8008a46:	e023      	b.n	8008a90 <HAL_UART_Receive_IT+0x7c>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2200      	movs	r2, #0
 8008a54:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a0f      	ldr	r2, [pc, #60]	; (8008a98 <HAL_UART_Receive_IT+0x84>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d00e      	beq.n	8008a7e <HAL_UART_Receive_IT+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d007      	beq.n	8008a7e <HAL_UART_Receive_IT+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	6812      	ldr	r2, [r2, #0]
 8008a78:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008a7c:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008a7e:	88fb      	ldrh	r3, [r7, #6]
 8008a80:	461a      	mov	r2, r3
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f000 fdeb 	bl	8009660 <UART_Start_Receive_IT>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	e000      	b.n	8008a90 <HAL_UART_Receive_IT+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8008a8e:	2302      	movs	r3, #2
  }
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	40008000 	.word	0x40008000

08008a9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	69db      	ldr	r3, [r3, #28]
 8008aaa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008abc:	69fa      	ldr	r2, [r7, #28]
 8008abe:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ac2:	4013      	ands	r3, r2
 8008ac4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d113      	bne.n	8008af4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	f003 0320 	and.w	r3, r3, #32
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00e      	beq.n	8008af4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0320 	and.w	r3, r3, #32
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d009      	beq.n	8008af4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 81cf 	beq.w	8008e88 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
      }
      return;
 8008af2:	e1c9      	b.n	8008e88 <HAL_UART_IRQHandler+0x3ec>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f000 80e3 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d105      	bne.n	8008b12 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	4ba6      	ldr	r3, [pc, #664]	; (8008da4 <HAL_UART_IRQHandler+0x308>)
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80d8 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d010      	beq.n	8008b3e <HAL_UART_IRQHandler+0xa2>
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b34:	f043 0201 	orr.w	r2, r3, #1
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	f003 0302 	and.w	r3, r3, #2
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d010      	beq.n	8008b6a <HAL_UART_IRQHandler+0xce>
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d00b      	beq.n	8008b6a <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	2202      	movs	r2, #2
 8008b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b60:	f043 0204 	orr.w	r2, r3, #4
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d010      	beq.n	8008b96 <HAL_UART_IRQHandler+0xfa>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00b      	beq.n	8008b96 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2204      	movs	r2, #4
 8008b84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b8c:	f043 0202 	orr.w	r2, r3, #2
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d015      	beq.n	8008bcc <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ba0:	69bb      	ldr	r3, [r7, #24]
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d104      	bne.n	8008bb4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2208      	movs	r2, #8
 8008bba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bc2:	f043 0208 	orr.w	r2, r3, #8
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d011      	beq.n	8008bfa <HAL_UART_IRQHandler+0x15e>
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00c      	beq.n	8008bfa <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bf0:	f043 0220 	orr.w	r2, r3, #32
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 8143 	beq.w	8008e8c <HAL_UART_IRQHandler+0x3f0>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	f003 0320 	and.w	r3, r3, #32
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00c      	beq.n	8008c2a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d007      	beq.n	8008c2a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c3c:	2b40      	cmp	r3, #64	; 0x40
 8008c3e:	d004      	beq.n	8008c4a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d031      	beq.n	8008cae <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fd90 	bl	8009770 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689b      	ldr	r3, [r3, #8]
 8008c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5a:	2b40      	cmp	r3, #64	; 0x40
 8008c5c:	d123      	bne.n	8008ca6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	6812      	ldr	r2, [r2, #0]
 8008c66:	6892      	ldr	r2, [r2, #8]
 8008c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d013      	beq.n	8008c9e <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	4a4b      	ldr	r2, [pc, #300]	; (8008da8 <HAL_UART_IRQHandler+0x30c>)
 8008c7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fc f9d3 	bl	800502e <HAL_DMA_Abort_IT>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d017      	beq.n	8008cbe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008c98:	4610      	mov	r0, r2
 8008c9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c9c:	e00f      	b.n	8008cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 f908 	bl	8008eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ca4:	e00b      	b.n	8008cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f904 	bl	8008eb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cac:	e007      	b.n	8008cbe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 f900 	bl	8008eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008cbc:	e0e6      	b.n	8008e8c <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cbe:	bf00      	nop
    return;
 8008cc0:	e0e4      	b.n	8008e8c <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	f040 80a9 	bne.w	8008e1e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	f003 0310 	and.w	r3, r3, #16
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	f000 80a3 	beq.w	8008e1e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 809d 	beq.w	8008e1e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	2210      	movs	r2, #16
 8008cea:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cf6:	2b40      	cmp	r3, #64	; 0x40
 8008cf8:	d158      	bne.n	8008dac <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	817b      	strh	r3, [r7, #10]
      if (  (nb_remaining_rx_data > 0U)
 8008d04:	897b      	ldrh	r3, [r7, #10]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80c2 	beq.w	8008e90 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d12:	897a      	ldrh	r2, [r7, #10]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	f080 80bb 	bcs.w	8008e90 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	897a      	ldrh	r2, [r7, #10]
 8008d1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d12a      	bne.n	8008d88 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6812      	ldr	r2, [r2, #0]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	6892      	ldr	r2, [r2, #8]
 8008d4c:	f022 0201 	bic.w	r2, r2, #1
 8008d50:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	6812      	ldr	r2, [r2, #0]
 8008d5a:	6892      	ldr	r2, [r2, #8]
 8008d5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d60:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6812      	ldr	r2, [r2, #0]
 8008d76:	6812      	ldr	r2, [r2, #0]
 8008d78:	f022 0210 	bic.w	r2, r2, #16
 8008d7c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d82:	4618      	mov	r0, r3
 8008d84:	f7fc f915 	bl	8004fb2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f893 	bl	8008ec8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008da2:	e075      	b.n	8008e90 <HAL_UART_IRQHandler+0x3f4>
 8008da4:	04000120 	.word	0x04000120
 8008da8:	080097cf 	.word	0x080097cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	813b      	strh	r3, [r7, #8]
      if (  (huart->RxXferCount > 0U)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d064      	beq.n	8008e94 <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 8008dca:	893b      	ldrh	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d061      	beq.n	8008e94 <HAL_UART_IRQHandler+0x3f8>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	687a      	ldr	r2, [r7, #4]
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	6812      	ldr	r2, [r2, #0]
 8008dda:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dde:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	6812      	ldr	r2, [r2, #0]
 8008de8:	6892      	ldr	r2, [r2, #8]
 8008dea:	f022 0201 	bic.w	r2, r2, #1
 8008dee:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2220      	movs	r2, #32
 8008df4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	687a      	ldr	r2, [r7, #4]
 8008e08:	6812      	ldr	r2, [r2, #0]
 8008e0a:	6812      	ldr	r2, [r2, #0]
 8008e0c:	f022 0210 	bic.w	r2, r2, #16
 8008e10:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e12:	893b      	ldrh	r3, [r7, #8]
 8008e14:	4619      	mov	r1, r3
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f856 	bl	8008ec8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008e1c:	e03a      	b.n	8008e94 <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00d      	beq.n	8008e44 <HAL_UART_IRQHandler+0x3a8>
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008e3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fdcd 	bl	80099dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008e42:	e02a      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d008      	beq.n	8008e6a <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01b      	beq.n	8008e98 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
    }
    return;
 8008e68:	e016      	b.n	8008e98 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d012      	beq.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00d      	beq.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fcbb 	bl	80097fa <UART_EndTransmit_IT>
    return;
 8008e84:	bf00      	nop
 8008e86:	e008      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8008e88:	bf00      	nop
 8008e8a:	e006      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
    return;
 8008e8c:	bf00      	nop
 8008e8e:	e004      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8008e90:	bf00      	nop
 8008e92:	e002      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
      return;
 8008e94:	bf00      	nop
 8008e96:	e000      	b.n	8008e9a <HAL_UART_IRQHandler+0x3fe>
    return;
 8008e98:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008e9a:	3720      	adds	r7, #32
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ea8:	bf00      	nop
 8008eaa:	370c      	adds	r7, #12
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008ebc:	bf00      	nop
 8008ebe:	370c      	adds	r7, #12
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b083      	sub	sp, #12
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008ed4:	bf00      	nop
 8008ed6:	370c      	adds	r7, #12
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ede:	4770      	bx	lr

08008ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ee0:	b5b0      	push	{r4, r5, r7, lr}
 8008ee2:	b088      	sub	sp, #32
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	431a      	orrs	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	6819      	ldr	r1, [r3, #0]
 8008f0e:	4ba4      	ldr	r3, [pc, #656]	; (80091a0 <UART_SetConfig+0x2c0>)
 8008f10:	400b      	ands	r3, r1
 8008f12:	69f9      	ldr	r1, [r7, #28]
 8008f14:	430b      	orrs	r3, r1
 8008f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6812      	ldr	r2, [r2, #0]
 8008f20:	6852      	ldr	r2, [r2, #4]
 8008f22:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	68d2      	ldr	r2, [r2, #12]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a9a      	ldr	r2, [pc, #616]	; (80091a4 <UART_SetConfig+0x2c4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	69fa      	ldr	r2, [r7, #28]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	6812      	ldr	r2, [r2, #0]
 8008f50:	6892      	ldr	r2, [r2, #8]
 8008f52:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 8008f56:	69fa      	ldr	r2, [r7, #28]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a91      	ldr	r2, [pc, #580]	; (80091a8 <UART_SetConfig+0x2c8>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d122      	bne.n	8008fac <UART_SetConfig+0xcc>
 8008f66:	4b91      	ldr	r3, [pc, #580]	; (80091ac <UART_SetConfig+0x2cc>)
 8008f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6c:	f003 0303 	and.w	r3, r3, #3
 8008f70:	2b03      	cmp	r3, #3
 8008f72:	d817      	bhi.n	8008fa4 <UART_SetConfig+0xc4>
 8008f74:	a201      	add	r2, pc, #4	; (adr r2, 8008f7c <UART_SetConfig+0x9c>)
 8008f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7a:	bf00      	nop
 8008f7c:	08008f8d 	.word	0x08008f8d
 8008f80:	08008f99 	.word	0x08008f99
 8008f84:	08008f93 	.word	0x08008f93
 8008f88:	08008f9f 	.word	0x08008f9f
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	76fb      	strb	r3, [r7, #27]
 8008f90:	e0be      	b.n	8009110 <UART_SetConfig+0x230>
 8008f92:	2302      	movs	r3, #2
 8008f94:	76fb      	strb	r3, [r7, #27]
 8008f96:	e0bb      	b.n	8009110 <UART_SetConfig+0x230>
 8008f98:	2304      	movs	r3, #4
 8008f9a:	76fb      	strb	r3, [r7, #27]
 8008f9c:	e0b8      	b.n	8009110 <UART_SetConfig+0x230>
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	76fb      	strb	r3, [r7, #27]
 8008fa2:	e0b5      	b.n	8009110 <UART_SetConfig+0x230>
 8008fa4:	2310      	movs	r3, #16
 8008fa6:	76fb      	strb	r3, [r7, #27]
 8008fa8:	bf00      	nop
 8008faa:	e0b1      	b.n	8009110 <UART_SetConfig+0x230>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a7f      	ldr	r2, [pc, #508]	; (80091b0 <UART_SetConfig+0x2d0>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d134      	bne.n	8009020 <UART_SetConfig+0x140>
 8008fb6:	4b7d      	ldr	r3, [pc, #500]	; (80091ac <UART_SetConfig+0x2cc>)
 8008fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fbc:	f003 030c 	and.w	r3, r3, #12
 8008fc0:	2b0c      	cmp	r3, #12
 8008fc2:	d829      	bhi.n	8009018 <UART_SetConfig+0x138>
 8008fc4:	a201      	add	r2, pc, #4	; (adr r2, 8008fcc <UART_SetConfig+0xec>)
 8008fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fca:	bf00      	nop
 8008fcc:	08009001 	.word	0x08009001
 8008fd0:	08009019 	.word	0x08009019
 8008fd4:	08009019 	.word	0x08009019
 8008fd8:	08009019 	.word	0x08009019
 8008fdc:	0800900d 	.word	0x0800900d
 8008fe0:	08009019 	.word	0x08009019
 8008fe4:	08009019 	.word	0x08009019
 8008fe8:	08009019 	.word	0x08009019
 8008fec:	08009007 	.word	0x08009007
 8008ff0:	08009019 	.word	0x08009019
 8008ff4:	08009019 	.word	0x08009019
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009013 	.word	0x08009013
 8009000:	2300      	movs	r3, #0
 8009002:	76fb      	strb	r3, [r7, #27]
 8009004:	e084      	b.n	8009110 <UART_SetConfig+0x230>
 8009006:	2302      	movs	r3, #2
 8009008:	76fb      	strb	r3, [r7, #27]
 800900a:	e081      	b.n	8009110 <UART_SetConfig+0x230>
 800900c:	2304      	movs	r3, #4
 800900e:	76fb      	strb	r3, [r7, #27]
 8009010:	e07e      	b.n	8009110 <UART_SetConfig+0x230>
 8009012:	2308      	movs	r3, #8
 8009014:	76fb      	strb	r3, [r7, #27]
 8009016:	e07b      	b.n	8009110 <UART_SetConfig+0x230>
 8009018:	2310      	movs	r3, #16
 800901a:	76fb      	strb	r3, [r7, #27]
 800901c:	bf00      	nop
 800901e:	e077      	b.n	8009110 <UART_SetConfig+0x230>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a63      	ldr	r2, [pc, #396]	; (80091b4 <UART_SetConfig+0x2d4>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d120      	bne.n	800906c <UART_SetConfig+0x18c>
 800902a:	4b60      	ldr	r3, [pc, #384]	; (80091ac <UART_SetConfig+0x2cc>)
 800902c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009030:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009034:	2b10      	cmp	r3, #16
 8009036:	d00f      	beq.n	8009058 <UART_SetConfig+0x178>
 8009038:	2b10      	cmp	r3, #16
 800903a:	d802      	bhi.n	8009042 <UART_SetConfig+0x162>
 800903c:	2b00      	cmp	r3, #0
 800903e:	d005      	beq.n	800904c <UART_SetConfig+0x16c>
 8009040:	e010      	b.n	8009064 <UART_SetConfig+0x184>
 8009042:	2b20      	cmp	r3, #32
 8009044:	d005      	beq.n	8009052 <UART_SetConfig+0x172>
 8009046:	2b30      	cmp	r3, #48	; 0x30
 8009048:	d009      	beq.n	800905e <UART_SetConfig+0x17e>
 800904a:	e00b      	b.n	8009064 <UART_SetConfig+0x184>
 800904c:	2300      	movs	r3, #0
 800904e:	76fb      	strb	r3, [r7, #27]
 8009050:	e05e      	b.n	8009110 <UART_SetConfig+0x230>
 8009052:	2302      	movs	r3, #2
 8009054:	76fb      	strb	r3, [r7, #27]
 8009056:	e05b      	b.n	8009110 <UART_SetConfig+0x230>
 8009058:	2304      	movs	r3, #4
 800905a:	76fb      	strb	r3, [r7, #27]
 800905c:	e058      	b.n	8009110 <UART_SetConfig+0x230>
 800905e:	2308      	movs	r3, #8
 8009060:	76fb      	strb	r3, [r7, #27]
 8009062:	e055      	b.n	8009110 <UART_SetConfig+0x230>
 8009064:	2310      	movs	r3, #16
 8009066:	76fb      	strb	r3, [r7, #27]
 8009068:	bf00      	nop
 800906a:	e051      	b.n	8009110 <UART_SetConfig+0x230>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a51      	ldr	r2, [pc, #324]	; (80091b8 <UART_SetConfig+0x2d8>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d120      	bne.n	80090b8 <UART_SetConfig+0x1d8>
 8009076:	4b4d      	ldr	r3, [pc, #308]	; (80091ac <UART_SetConfig+0x2cc>)
 8009078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800907c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009080:	2b40      	cmp	r3, #64	; 0x40
 8009082:	d00f      	beq.n	80090a4 <UART_SetConfig+0x1c4>
 8009084:	2b40      	cmp	r3, #64	; 0x40
 8009086:	d802      	bhi.n	800908e <UART_SetConfig+0x1ae>
 8009088:	2b00      	cmp	r3, #0
 800908a:	d005      	beq.n	8009098 <UART_SetConfig+0x1b8>
 800908c:	e010      	b.n	80090b0 <UART_SetConfig+0x1d0>
 800908e:	2b80      	cmp	r3, #128	; 0x80
 8009090:	d005      	beq.n	800909e <UART_SetConfig+0x1be>
 8009092:	2bc0      	cmp	r3, #192	; 0xc0
 8009094:	d009      	beq.n	80090aa <UART_SetConfig+0x1ca>
 8009096:	e00b      	b.n	80090b0 <UART_SetConfig+0x1d0>
 8009098:	2300      	movs	r3, #0
 800909a:	76fb      	strb	r3, [r7, #27]
 800909c:	e038      	b.n	8009110 <UART_SetConfig+0x230>
 800909e:	2302      	movs	r3, #2
 80090a0:	76fb      	strb	r3, [r7, #27]
 80090a2:	e035      	b.n	8009110 <UART_SetConfig+0x230>
 80090a4:	2304      	movs	r3, #4
 80090a6:	76fb      	strb	r3, [r7, #27]
 80090a8:	e032      	b.n	8009110 <UART_SetConfig+0x230>
 80090aa:	2308      	movs	r3, #8
 80090ac:	76fb      	strb	r3, [r7, #27]
 80090ae:	e02f      	b.n	8009110 <UART_SetConfig+0x230>
 80090b0:	2310      	movs	r3, #16
 80090b2:	76fb      	strb	r3, [r7, #27]
 80090b4:	bf00      	nop
 80090b6:	e02b      	b.n	8009110 <UART_SetConfig+0x230>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a39      	ldr	r2, [pc, #228]	; (80091a4 <UART_SetConfig+0x2c4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d124      	bne.n	800910c <UART_SetConfig+0x22c>
 80090c2:	4b3a      	ldr	r3, [pc, #232]	; (80091ac <UART_SetConfig+0x2cc>)
 80090c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d0:	d012      	beq.n	80090f8 <UART_SetConfig+0x218>
 80090d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090d6:	d802      	bhi.n	80090de <UART_SetConfig+0x1fe>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <UART_SetConfig+0x20c>
 80090dc:	e012      	b.n	8009104 <UART_SetConfig+0x224>
 80090de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090e2:	d006      	beq.n	80090f2 <UART_SetConfig+0x212>
 80090e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e8:	d009      	beq.n	80090fe <UART_SetConfig+0x21e>
 80090ea:	e00b      	b.n	8009104 <UART_SetConfig+0x224>
 80090ec:	2300      	movs	r3, #0
 80090ee:	76fb      	strb	r3, [r7, #27]
 80090f0:	e00e      	b.n	8009110 <UART_SetConfig+0x230>
 80090f2:	2302      	movs	r3, #2
 80090f4:	76fb      	strb	r3, [r7, #27]
 80090f6:	e00b      	b.n	8009110 <UART_SetConfig+0x230>
 80090f8:	2304      	movs	r3, #4
 80090fa:	76fb      	strb	r3, [r7, #27]
 80090fc:	e008      	b.n	8009110 <UART_SetConfig+0x230>
 80090fe:	2308      	movs	r3, #8
 8009100:	76fb      	strb	r3, [r7, #27]
 8009102:	e005      	b.n	8009110 <UART_SetConfig+0x230>
 8009104:	2310      	movs	r3, #16
 8009106:	76fb      	strb	r3, [r7, #27]
 8009108:	bf00      	nop
 800910a:	e001      	b.n	8009110 <UART_SetConfig+0x230>
 800910c:	2310      	movs	r3, #16
 800910e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a23      	ldr	r2, [pc, #140]	; (80091a4 <UART_SetConfig+0x2c4>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d17e      	bne.n	8009218 <UART_SetConfig+0x338>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800911a:	7efb      	ldrb	r3, [r7, #27]
 800911c:	2b08      	cmp	r3, #8
 800911e:	d824      	bhi.n	800916a <UART_SetConfig+0x28a>
 8009120:	a201      	add	r2, pc, #4	; (adr r2, 8009128 <UART_SetConfig+0x248>)
 8009122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009126:	bf00      	nop
 8009128:	0800914d 	.word	0x0800914d
 800912c:	0800916b 	.word	0x0800916b
 8009130:	08009155 	.word	0x08009155
 8009134:	0800916b 	.word	0x0800916b
 8009138:	0800915b 	.word	0x0800915b
 800913c:	0800916b 	.word	0x0800916b
 8009140:	0800916b 	.word	0x0800916b
 8009144:	0800916b 	.word	0x0800916b
 8009148:	08009163 	.word	0x08009163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800914c:	f7fd ff1a 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8009150:	6178      	str	r0, [r7, #20]
        break;
 8009152:	e00f      	b.n	8009174 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009154:	4b19      	ldr	r3, [pc, #100]	; (80091bc <UART_SetConfig+0x2dc>)
 8009156:	617b      	str	r3, [r7, #20]
        break;
 8009158:	e00c      	b.n	8009174 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800915a:	f7fd fe7d 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 800915e:	6178      	str	r0, [r7, #20]
        break;
 8009160:	e008      	b.n	8009174 <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009166:	617b      	str	r3, [r7, #20]
        break;
 8009168:	e004      	b.n	8009174 <UART_SetConfig+0x294>
      default:
        pclk = 0U;
 800916a:	2300      	movs	r3, #0
 800916c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	76bb      	strb	r3, [r7, #26]
        break;
 8009172:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80fc 	beq.w	8009374 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	4613      	mov	r3, r2
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	441a      	add	r2, r3
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	429a      	cmp	r2, r3
 800918a:	d805      	bhi.n	8009198 <UART_SetConfig+0x2b8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	429a      	cmp	r2, r3
 8009196:	d213      	bcs.n	80091c0 <UART_SetConfig+0x2e0>
      {
        ret = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	76bb      	strb	r3, [r7, #26]
 800919c:	e0ea      	b.n	8009374 <UART_SetConfig+0x494>
 800919e:	bf00      	nop
 80091a0:	efff69f3 	.word	0xefff69f3
 80091a4:	40008000 	.word	0x40008000
 80091a8:	40013800 	.word	0x40013800
 80091ac:	40021000 	.word	0x40021000
 80091b0:	40004400 	.word	0x40004400
 80091b4:	40004800 	.word	0x40004800
 80091b8:	40004c00 	.word	0x40004c00
 80091bc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f04f 0300 	mov.w	r3, #0
 80091c8:	021d      	lsls	r5, r3, #8
 80091ca:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 80091ce:	0214      	lsls	r4, r2, #8
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	085b      	lsrs	r3, r3, #1
 80091d6:	461a      	mov	r2, r3
 80091d8:	f04f 0300 	mov.w	r3, #0
 80091dc:	18a0      	adds	r0, r4, r2
 80091de:	eb45 0103 	adc.w	r1, r5, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	f04f 0400 	mov.w	r4, #0
 80091ea:	461a      	mov	r2, r3
 80091ec:	4623      	mov	r3, r4
 80091ee:	f7f7 fcc1 	bl	8000b74 <__aeabi_uldivmod>
 80091f2:	4603      	mov	r3, r0
 80091f4:	460c      	mov	r4, r1
 80091f6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80091fe:	d308      	bcc.n	8009212 <UART_SetConfig+0x332>
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009206:	d204      	bcs.n	8009212 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	60da      	str	r2, [r3, #12]
 8009210:	e0b0      	b.n	8009374 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	76bb      	strb	r3, [r7, #26]
 8009216:	e0ad      	b.n	8009374 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	69db      	ldr	r3, [r3, #28]
 800921c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009220:	d15c      	bne.n	80092dc <UART_SetConfig+0x3fc>
  {
    switch (clocksource)
 8009222:	7efb      	ldrb	r3, [r7, #27]
 8009224:	2b08      	cmp	r3, #8
 8009226:	d828      	bhi.n	800927a <UART_SetConfig+0x39a>
 8009228:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <UART_SetConfig+0x350>)
 800922a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922e:	bf00      	nop
 8009230:	08009255 	.word	0x08009255
 8009234:	0800925d 	.word	0x0800925d
 8009238:	08009265 	.word	0x08009265
 800923c:	0800927b 	.word	0x0800927b
 8009240:	0800926b 	.word	0x0800926b
 8009244:	0800927b 	.word	0x0800927b
 8009248:	0800927b 	.word	0x0800927b
 800924c:	0800927b 	.word	0x0800927b
 8009250:	08009273 	.word	0x08009273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009254:	f7fd fe96 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8009258:	6178      	str	r0, [r7, #20]
        break;
 800925a:	e013      	b.n	8009284 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800925c:	f7fd fea8 	bl	8006fb0 <HAL_RCC_GetPCLK2Freq>
 8009260:	6178      	str	r0, [r7, #20]
        break;
 8009262:	e00f      	b.n	8009284 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009264:	4b49      	ldr	r3, [pc, #292]	; (800938c <UART_SetConfig+0x4ac>)
 8009266:	617b      	str	r3, [r7, #20]
        break;
 8009268:	e00c      	b.n	8009284 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926a:	f7fd fdf5 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 800926e:	6178      	str	r0, [r7, #20]
        break;
 8009270:	e008      	b.n	8009284 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009276:	617b      	str	r3, [r7, #20]
        break;
 8009278:	e004      	b.n	8009284 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	76bb      	strb	r3, [r7, #26]
        break;
 8009282:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d074      	beq.n	8009374 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	005a      	lsls	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	441a      	add	r2, r3
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	fbb2 f3f3 	udiv	r3, r2, r3
 800929e:	b29b      	uxth	r3, r3
 80092a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b0f      	cmp	r3, #15
 80092a6:	d916      	bls.n	80092d6 <UART_SetConfig+0x3f6>
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092ae:	d212      	bcs.n	80092d6 <UART_SetConfig+0x3f6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	f023 030f 	bic.w	r3, r3, #15
 80092b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	b29b      	uxth	r3, r3
 80092c0:	f003 0307 	and.w	r3, r3, #7
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	89fb      	ldrh	r3, [r7, #14]
 80092c8:	4313      	orrs	r3, r2
 80092ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	89fa      	ldrh	r2, [r7, #14]
 80092d2:	60da      	str	r2, [r3, #12]
 80092d4:	e04e      	b.n	8009374 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	76bb      	strb	r3, [r7, #26]
 80092da:	e04b      	b.n	8009374 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80092dc:	7efb      	ldrb	r3, [r7, #27]
 80092de:	2b08      	cmp	r3, #8
 80092e0:	d827      	bhi.n	8009332 <UART_SetConfig+0x452>
 80092e2:	a201      	add	r2, pc, #4	; (adr r2, 80092e8 <UART_SetConfig+0x408>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	0800930d 	.word	0x0800930d
 80092ec:	08009315 	.word	0x08009315
 80092f0:	0800931d 	.word	0x0800931d
 80092f4:	08009333 	.word	0x08009333
 80092f8:	08009323 	.word	0x08009323
 80092fc:	08009333 	.word	0x08009333
 8009300:	08009333 	.word	0x08009333
 8009304:	08009333 	.word	0x08009333
 8009308:	0800932b 	.word	0x0800932b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800930c:	f7fd fe3a 	bl	8006f84 <HAL_RCC_GetPCLK1Freq>
 8009310:	6178      	str	r0, [r7, #20]
        break;
 8009312:	e013      	b.n	800933c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009314:	f7fd fe4c 	bl	8006fb0 <HAL_RCC_GetPCLK2Freq>
 8009318:	6178      	str	r0, [r7, #20]
        break;
 800931a:	e00f      	b.n	800933c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800931c:	4b1b      	ldr	r3, [pc, #108]	; (800938c <UART_SetConfig+0x4ac>)
 800931e:	617b      	str	r3, [r7, #20]
        break;
 8009320:	e00c      	b.n	800933c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009322:	f7fd fd99 	bl	8006e58 <HAL_RCC_GetSysClockFreq>
 8009326:	6178      	str	r0, [r7, #20]
        break;
 8009328:	e008      	b.n	800933c <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800932a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800932e:	617b      	str	r3, [r7, #20]
        break;
 8009330:	e004      	b.n	800933c <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8009332:	2300      	movs	r3, #0
 8009334:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	76bb      	strb	r3, [r7, #26]
        break;
 800933a:	bf00      	nop
    }

    if (pclk != 0U)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d018      	beq.n	8009374 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	085a      	lsrs	r2, r3, #1
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	441a      	add	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	fbb2 f3f3 	udiv	r3, r2, r3
 8009354:	b29b      	uxth	r3, r3
 8009356:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b0f      	cmp	r3, #15
 800935c:	d908      	bls.n	8009370 <UART_SetConfig+0x490>
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009364:	d204      	bcs.n	8009370 <UART_SetConfig+0x490>
      {
        huart->Instance->BRR = usartdiv;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	60da      	str	r2, [r3, #12]
 800936e:	e001      	b.n	8009374 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009370:	2301      	movs	r3, #1
 8009372:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2200      	movs	r2, #0
 8009378:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009380:	7ebb      	ldrb	r3, [r7, #26]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3720      	adds	r7, #32
 8009386:	46bd      	mov	sp, r7
 8009388:	bdb0      	pop	{r4, r5, r7, pc}
 800938a:	bf00      	nop
 800938c:	00f42400 	.word	0x00f42400

08009390 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	f003 0301 	and.w	r3, r3, #1
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00a      	beq.n	80093ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6812      	ldr	r2, [r2, #0]
 80093ac:	6852      	ldr	r2, [r2, #4]
 80093ae:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00a      	beq.n	80093dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	687a      	ldr	r2, [r7, #4]
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	6852      	ldr	r2, [r2, #4]
 80093d0:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093d8:	430a      	orrs	r2, r1
 80093da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00a      	beq.n	80093fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	6852      	ldr	r2, [r2, #4]
 80093f2:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80093fa:	430a      	orrs	r2, r1
 80093fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009402:	f003 0308 	and.w	r3, r3, #8
 8009406:	2b00      	cmp	r3, #0
 8009408:	d00a      	beq.n	8009420 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	6812      	ldr	r2, [r2, #0]
 8009412:	6852      	ldr	r2, [r2, #4]
 8009414:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800941c:	430a      	orrs	r2, r1
 800941e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009424:	f003 0310 	and.w	r3, r3, #16
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00a      	beq.n	8009442 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6812      	ldr	r2, [r2, #0]
 8009434:	6892      	ldr	r2, [r2, #8]
 8009436:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800943e:	430a      	orrs	r2, r1
 8009440:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	f003 0320 	and.w	r3, r3, #32
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	6812      	ldr	r2, [r2, #0]
 8009456:	6892      	ldr	r2, [r2, #8]
 8009458:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009460:	430a      	orrs	r2, r1
 8009462:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800946c:	2b00      	cmp	r3, #0
 800946e:	d01a      	beq.n	80094a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	6812      	ldr	r2, [r2, #0]
 8009478:	6852      	ldr	r2, [r2, #4]
 800947a:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800948e:	d10a      	bne.n	80094a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	6812      	ldr	r2, [r2, #0]
 8009498:	6852      	ldr	r2, [r2, #4]
 800949a:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 800949e:	687a      	ldr	r2, [r7, #4]
 80094a0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80094a2:	430a      	orrs	r2, r1
 80094a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6812      	ldr	r2, [r2, #0]
 80094ba:	6852      	ldr	r2, [r2, #4]
 80094bc:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094c4:	430a      	orrs	r2, r1
 80094c6:	605a      	str	r2, [r3, #4]
  }
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af02      	add	r7, sp, #8
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094e4:	f7fa faac 	bl	8003a40 <HAL_GetTick>
 80094e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b08      	cmp	r3, #8
 80094f6:	d10e      	bne.n	8009516 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f82d 	bl	8009566 <UART_WaitOnFlagUntilTimeout>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e023      	b.n	800955e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0304 	and.w	r3, r3, #4
 8009520:	2b04      	cmp	r3, #4
 8009522:	d10e      	bne.n	8009542 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009524:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f817 	bl	8009566 <UART_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e00d      	b.n	800955e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2220      	movs	r2, #32
 8009546:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2220      	movs	r2, #32
 800954c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2200      	movs	r2, #0
 8009558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	603b      	str	r3, [r7, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009576:	e05e      	b.n	8009636 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d05a      	beq.n	8009636 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009580:	f7fa fa5e 	bl	8003a40 <HAL_GetTick>
 8009584:	4602      	mov	r2, r0
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	1ad2      	subs	r2, r2, r3
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	429a      	cmp	r2, r3
 800958e:	d802      	bhi.n	8009596 <UART_WaitOnFlagUntilTimeout+0x30>
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d11b      	bne.n	80095ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	6812      	ldr	r2, [r2, #0]
 800959e:	6812      	ldr	r2, [r2, #0]
 80095a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	6812      	ldr	r2, [r2, #0]
 80095ae:	6892      	ldr	r2, [r2, #8]
 80095b0:	f022 0201 	bic.w	r2, r2, #1
 80095b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2220      	movs	r2, #32
 80095ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2220      	movs	r2, #32
 80095c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e043      	b.n	8009656 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d02c      	beq.n	8009636 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	69db      	ldr	r3, [r3, #28]
 80095e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095ea:	d124      	bne.n	8009636 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009604:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	6892      	ldr	r2, [r2, #8]
 8009610:	f022 0201 	bic.w	r2, r2, #1
 8009614:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2220      	movs	r2, #32
 800961a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2220      	movs	r2, #32
 8009620:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009632:	2303      	movs	r3, #3
 8009634:	e00f      	b.n	8009656 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	69da      	ldr	r2, [r3, #28]
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	401a      	ands	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	429a      	cmp	r2, r3
 8009644:	bf0c      	ite	eq
 8009646:	2301      	moveq	r3, #1
 8009648:	2300      	movne	r3, #0
 800964a:	b2db      	uxtb	r3, r3
 800964c:	461a      	mov	r2, r3
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	429a      	cmp	r2, r3
 8009652:	d091      	beq.n	8009578 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
	...

08009660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	88fa      	ldrh	r2, [r7, #6]
 8009678:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009692:	d10e      	bne.n	80096b2 <UART_Start_Receive_IT+0x52>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	691b      	ldr	r3, [r3, #16]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d105      	bne.n	80096a8 <UART_Start_Receive_IT+0x48>
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80096a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096a6:	e02d      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	22ff      	movs	r2, #255	; 0xff
 80096ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096b0:	e028      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10d      	bne.n	80096d6 <UART_Start_Receive_IT+0x76>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	691b      	ldr	r3, [r3, #16]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d104      	bne.n	80096cc <UART_Start_Receive_IT+0x6c>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	22ff      	movs	r2, #255	; 0xff
 80096c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096ca:	e01b      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	227f      	movs	r2, #127	; 0x7f
 80096d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096d4:	e016      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096de:	d10d      	bne.n	80096fc <UART_Start_Receive_IT+0x9c>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d104      	bne.n	80096f2 <UART_Start_Receive_IT+0x92>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	227f      	movs	r2, #127	; 0x7f
 80096ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096f0:	e008      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	223f      	movs	r2, #63	; 0x3f
 80096f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80096fa:	e003      	b.n	8009704 <UART_Start_Receive_IT+0xa4>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2222      	movs	r2, #34	; 0x22
 8009710:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68fa      	ldr	r2, [r7, #12]
 8009718:	6812      	ldr	r2, [r2, #0]
 800971a:	6892      	ldr	r2, [r2, #8]
 800971c:	f042 0201 	orr.w	r2, r2, #1
 8009720:	609a      	str	r2, [r3, #8]
    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800972a:	d107      	bne.n	800973c <UART_Start_Receive_IT+0xdc>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d103      	bne.n	800973c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a0c      	ldr	r2, [pc, #48]	; (8009768 <UART_Start_Receive_IT+0x108>)
 8009738:	665a      	str	r2, [r3, #100]	; 0x64
 800973a:	e002      	b.n	8009742 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4a0b      	ldr	r2, [pc, #44]	; (800976c <UART_Start_Receive_IT+0x10c>)
 8009740:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	6812      	ldr	r2, [r2, #0]
 8009754:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8009758:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr
 8009768:	08009905 	.word	0x08009905
 800976c:	0800982d 	.word	0x0800982d

08009770 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	6812      	ldr	r2, [r2, #0]
 8009780:	6812      	ldr	r2, [r2, #0]
 8009782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009786:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	6812      	ldr	r2, [r2, #0]
 8009790:	6892      	ldr	r2, [r2, #8]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800979c:	2b01      	cmp	r3, #1
 800979e:	d107      	bne.n	80097b0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	6812      	ldr	r2, [r2, #0]
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	f022 0210 	bic.w	r2, r2, #16
 80097ae:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2220      	movs	r2, #32
 80097b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b084      	sub	sp, #16
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2200      	movs	r2, #0
 80097e0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7ff fb61 	bl	8008eb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	6812      	ldr	r2, [r2, #0]
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009810:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff fb3e 	bl	8008ea0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009824:	bf00      	nop
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800983a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009840:	2b22      	cmp	r3, #34	; 0x22
 8009842:	d151      	bne.n	80098e8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800984a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009850:	89ba      	ldrh	r2, [r7, #12]
 8009852:	b2d1      	uxtb	r1, r2
 8009854:	89fa      	ldrh	r2, [r7, #14]
 8009856:	b2d2      	uxtb	r2, r2
 8009858:	400a      	ands	r2, r1
 800985a:	b2d2      	uxtb	r2, r2
 800985c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009862:	1c5a      	adds	r2, r3, #1
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009880:	b29b      	uxth	r3, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d13a      	bne.n	80098fc <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	6812      	ldr	r2, [r2, #0]
 800988e:	6812      	ldr	r2, [r2, #0]
 8009890:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009894:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	6812      	ldr	r2, [r2, #0]
 800989e:	6892      	ldr	r2, [r2, #8]
 80098a0:	f022 0201 	bic.w	r2, r2, #1
 80098a4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2220      	movs	r2, #32
 80098aa:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098b6:	2b01      	cmp	r3, #1
 80098b8:	d10f      	bne.n	80098da <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	687a      	ldr	r2, [r7, #4]
 80098c0:	6812      	ldr	r2, [r2, #0]
 80098c2:	6812      	ldr	r2, [r2, #0]
 80098c4:	f022 0210 	bic.w	r2, r2, #16
 80098c8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80098d0:	4619      	mov	r1, r3
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f7ff faf8 	bl	8008ec8 <HAL_UARTEx_RxEventCallback>
 80098d8:	e002      	b.n	80098e0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f7f9 fbde 	bl	800309c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098e6:	e009      	b.n	80098fc <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6812      	ldr	r2, [r2, #0]
 80098f0:	8b12      	ldrh	r2, [r2, #24]
 80098f2:	b292      	uxth	r2, r2
 80098f4:	f042 0208 	orr.w	r2, r2, #8
 80098f8:	b292      	uxth	r2, r2
 80098fa:	831a      	strh	r2, [r3, #24]
}
 80098fc:	bf00      	nop
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}

08009904 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009912:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009918:	2b22      	cmp	r3, #34	; 0x22
 800991a:	d151      	bne.n	80099c0 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009922:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009928:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800992a:	89ba      	ldrh	r2, [r7, #12]
 800992c:	89fb      	ldrh	r3, [r7, #14]
 800992e:	4013      	ands	r3, r2
 8009930:	b29a      	uxth	r2, r3
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800993a:	1c9a      	adds	r2, r3, #2
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b01      	subs	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009958:	b29b      	uxth	r3, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d13a      	bne.n	80099d4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	6812      	ldr	r2, [r2, #0]
 8009966:	6812      	ldr	r2, [r2, #0]
 8009968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800996c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	6812      	ldr	r2, [r2, #0]
 8009976:	6892      	ldr	r2, [r2, #8]
 8009978:	f022 0201 	bic.w	r2, r2, #1
 800997c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2220      	movs	r2, #32
 8009982:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800998e:	2b01      	cmp	r3, #1
 8009990:	d10f      	bne.n	80099b2 <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	6812      	ldr	r2, [r2, #0]
 800999c:	f022 0210 	bic.w	r2, r2, #16
 80099a0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80099a8:	4619      	mov	r1, r3
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f7ff fa8c 	bl	8008ec8 <HAL_UARTEx_RxEventCallback>
 80099b0:	e002      	b.n	80099b8 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7f9 fb72 	bl	800309c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80099be:	e009      	b.n	80099d4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	8b12      	ldrh	r2, [r2, #24]
 80099ca:	b292      	uxth	r2, r2
 80099cc:	f042 0208 	orr.w	r2, r2, #8
 80099d0:	b292      	uxth	r2, r2
 80099d2:	831a      	strh	r2, [r3, #24]
}
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80099e4:	bf00      	nop
 80099e6:	370c      	adds	r7, #12
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80099f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80099f4:	f7f9 ff82 	bl	80038fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80099f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80099fa:	e003      	b.n	8009a04 <LoopCopyDataInit>

080099fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80099fc:	4b0b      	ldr	r3, [pc, #44]	; (8009a2c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80099fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8009a00:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8009a02:	3104      	adds	r1, #4

08009a04 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8009a04:	480a      	ldr	r0, [pc, #40]	; (8009a30 <LoopForever+0xa>)
	ldr	r3, =_edata
 8009a06:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <LoopForever+0xe>)
	adds	r2, r0, r1
 8009a08:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8009a0a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8009a0c:	d3f6      	bcc.n	80099fc <CopyDataInit>
	ldr	r2, =_sbss
 8009a0e:	4a0a      	ldr	r2, [pc, #40]	; (8009a38 <LoopForever+0x12>)
	b	LoopFillZerobss
 8009a10:	e002      	b.n	8009a18 <LoopFillZerobss>

08009a12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8009a12:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8009a14:	f842 3b04 	str.w	r3, [r2], #4

08009a18 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8009a18:	4b08      	ldr	r3, [pc, #32]	; (8009a3c <LoopForever+0x16>)
	cmp	r2, r3
 8009a1a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8009a1c:	d3f9      	bcc.n	8009a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009a1e:	f000 f817 	bl	8009a50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009a22:	f7f8 ff5d 	bl	80028e0 <main>

08009a26 <LoopForever>:

LoopForever:
    b LoopForever
 8009a26:	e7fe      	b.n	8009a26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009a28:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8009a2c:	0800b070 	.word	0x0800b070
	ldr	r0, =_sdata
 8009a30:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8009a34:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8009a38:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8009a3c:	20000508 	.word	0x20000508

08009a40 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009a40:	e7fe      	b.n	8009a40 <ADC1_IRQHandler>
	...

08009a44 <__errno>:
 8009a44:	4b01      	ldr	r3, [pc, #4]	; (8009a4c <__errno+0x8>)
 8009a46:	6818      	ldr	r0, [r3, #0]
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000010 	.word	0x20000010

08009a50 <__libc_init_array>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	4e0d      	ldr	r6, [pc, #52]	; (8009a88 <__libc_init_array+0x38>)
 8009a54:	4c0d      	ldr	r4, [pc, #52]	; (8009a8c <__libc_init_array+0x3c>)
 8009a56:	1ba4      	subs	r4, r4, r6
 8009a58:	10a4      	asrs	r4, r4, #2
 8009a5a:	2500      	movs	r5, #0
 8009a5c:	42a5      	cmp	r5, r4
 8009a5e:	d109      	bne.n	8009a74 <__libc_init_array+0x24>
 8009a60:	4e0b      	ldr	r6, [pc, #44]	; (8009a90 <__libc_init_array+0x40>)
 8009a62:	4c0c      	ldr	r4, [pc, #48]	; (8009a94 <__libc_init_array+0x44>)
 8009a64:	f001 f92c 	bl	800acc0 <_init>
 8009a68:	1ba4      	subs	r4, r4, r6
 8009a6a:	10a4      	asrs	r4, r4, #2
 8009a6c:	2500      	movs	r5, #0
 8009a6e:	42a5      	cmp	r5, r4
 8009a70:	d105      	bne.n	8009a7e <__libc_init_array+0x2e>
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a78:	4798      	blx	r3
 8009a7a:	3501      	adds	r5, #1
 8009a7c:	e7ee      	b.n	8009a5c <__libc_init_array+0xc>
 8009a7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009a82:	4798      	blx	r3
 8009a84:	3501      	adds	r5, #1
 8009a86:	e7f2      	b.n	8009a6e <__libc_init_array+0x1e>
 8009a88:	0800b068 	.word	0x0800b068
 8009a8c:	0800b068 	.word	0x0800b068
 8009a90:	0800b068 	.word	0x0800b068
 8009a94:	0800b06c 	.word	0x0800b06c

08009a98 <memset>:
 8009a98:	4402      	add	r2, r0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d100      	bne.n	8009aa2 <memset+0xa>
 8009aa0:	4770      	bx	lr
 8009aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa6:	e7f9      	b.n	8009a9c <memset+0x4>

08009aa8 <siprintf>:
 8009aa8:	b40e      	push	{r1, r2, r3}
 8009aaa:	b500      	push	{lr}
 8009aac:	b09c      	sub	sp, #112	; 0x70
 8009aae:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009ab2:	ab1d      	add	r3, sp, #116	; 0x74
 8009ab4:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009ab8:	9002      	str	r0, [sp, #8]
 8009aba:	9006      	str	r0, [sp, #24]
 8009abc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ac0:	480a      	ldr	r0, [pc, #40]	; (8009aec <siprintf+0x44>)
 8009ac2:	9104      	str	r1, [sp, #16]
 8009ac4:	9107      	str	r1, [sp, #28]
 8009ac6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ace:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009ad2:	6800      	ldr	r0, [r0, #0]
 8009ad4:	9301      	str	r3, [sp, #4]
 8009ad6:	a902      	add	r1, sp, #8
 8009ad8:	f000 f892 	bl	8009c00 <_svfiprintf_r>
 8009adc:	9b02      	ldr	r3, [sp, #8]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	701a      	strb	r2, [r3, #0]
 8009ae2:	b01c      	add	sp, #112	; 0x70
 8009ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ae8:	b003      	add	sp, #12
 8009aea:	4770      	bx	lr
 8009aec:	20000010 	.word	0x20000010

08009af0 <siscanf>:
 8009af0:	b40e      	push	{r1, r2, r3}
 8009af2:	b530      	push	{r4, r5, lr}
 8009af4:	b09c      	sub	sp, #112	; 0x70
 8009af6:	ac1f      	add	r4, sp, #124	; 0x7c
 8009af8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8009afc:	f854 5b04 	ldr.w	r5, [r4], #4
 8009b00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009b04:	9002      	str	r0, [sp, #8]
 8009b06:	9006      	str	r0, [sp, #24]
 8009b08:	f7f6 fb6a 	bl	80001e0 <strlen>
 8009b0c:	4b0b      	ldr	r3, [pc, #44]	; (8009b3c <siscanf+0x4c>)
 8009b0e:	9003      	str	r0, [sp, #12]
 8009b10:	9007      	str	r0, [sp, #28]
 8009b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b14:	480a      	ldr	r0, [pc, #40]	; (8009b40 <siscanf+0x50>)
 8009b16:	9401      	str	r4, [sp, #4]
 8009b18:	2300      	movs	r3, #0
 8009b1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b1c:	9314      	str	r3, [sp, #80]	; 0x50
 8009b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009b26:	462a      	mov	r2, r5
 8009b28:	4623      	mov	r3, r4
 8009b2a:	a902      	add	r1, sp, #8
 8009b2c:	6800      	ldr	r0, [r0, #0]
 8009b2e:	f000 f9b5 	bl	8009e9c <__ssvfiscanf_r>
 8009b32:	b01c      	add	sp, #112	; 0x70
 8009b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b38:	b003      	add	sp, #12
 8009b3a:	4770      	bx	lr
 8009b3c:	08009b45 	.word	0x08009b45
 8009b40:	20000010 	.word	0x20000010

08009b44 <__seofread>:
 8009b44:	2000      	movs	r0, #0
 8009b46:	4770      	bx	lr

08009b48 <__ssputs_r>:
 8009b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b4c:	688e      	ldr	r6, [r1, #8]
 8009b4e:	429e      	cmp	r6, r3
 8009b50:	4682      	mov	sl, r0
 8009b52:	460c      	mov	r4, r1
 8009b54:	4691      	mov	r9, r2
 8009b56:	4698      	mov	r8, r3
 8009b58:	d835      	bhi.n	8009bc6 <__ssputs_r+0x7e>
 8009b5a:	898a      	ldrh	r2, [r1, #12]
 8009b5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b60:	d031      	beq.n	8009bc6 <__ssputs_r+0x7e>
 8009b62:	6825      	ldr	r5, [r4, #0]
 8009b64:	6909      	ldr	r1, [r1, #16]
 8009b66:	1a6f      	subs	r7, r5, r1
 8009b68:	6965      	ldr	r5, [r4, #20]
 8009b6a:	2302      	movs	r3, #2
 8009b6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b70:	fb95 f5f3 	sdiv	r5, r5, r3
 8009b74:	f108 0301 	add.w	r3, r8, #1
 8009b78:	443b      	add	r3, r7
 8009b7a:	429d      	cmp	r5, r3
 8009b7c:	bf38      	it	cc
 8009b7e:	461d      	movcc	r5, r3
 8009b80:	0553      	lsls	r3, r2, #21
 8009b82:	d531      	bpl.n	8009be8 <__ssputs_r+0xa0>
 8009b84:	4629      	mov	r1, r5
 8009b86:	f000 ffef 	bl	800ab68 <_malloc_r>
 8009b8a:	4606      	mov	r6, r0
 8009b8c:	b950      	cbnz	r0, 8009ba4 <__ssputs_r+0x5c>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	f8ca 3000 	str.w	r3, [sl]
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b9a:	81a3      	strh	r3, [r4, #12]
 8009b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ba4:	463a      	mov	r2, r7
 8009ba6:	6921      	ldr	r1, [r4, #16]
 8009ba8:	f000 ff6a 	bl	800aa80 <memcpy>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bb6:	81a3      	strh	r3, [r4, #12]
 8009bb8:	6126      	str	r6, [r4, #16]
 8009bba:	6165      	str	r5, [r4, #20]
 8009bbc:	443e      	add	r6, r7
 8009bbe:	1bed      	subs	r5, r5, r7
 8009bc0:	6026      	str	r6, [r4, #0]
 8009bc2:	60a5      	str	r5, [r4, #8]
 8009bc4:	4646      	mov	r6, r8
 8009bc6:	4546      	cmp	r6, r8
 8009bc8:	bf28      	it	cs
 8009bca:	4646      	movcs	r6, r8
 8009bcc:	4632      	mov	r2, r6
 8009bce:	4649      	mov	r1, r9
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	f000 ff60 	bl	800aa96 <memmove>
 8009bd6:	68a3      	ldr	r3, [r4, #8]
 8009bd8:	1b9b      	subs	r3, r3, r6
 8009bda:	60a3      	str	r3, [r4, #8]
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	441e      	add	r6, r3
 8009be0:	6026      	str	r6, [r4, #0]
 8009be2:	2000      	movs	r0, #0
 8009be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be8:	462a      	mov	r2, r5
 8009bea:	f001 f81b 	bl	800ac24 <_realloc_r>
 8009bee:	4606      	mov	r6, r0
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d1e1      	bne.n	8009bb8 <__ssputs_r+0x70>
 8009bf4:	6921      	ldr	r1, [r4, #16]
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	f000 ff68 	bl	800aacc <_free_r>
 8009bfc:	e7c7      	b.n	8009b8e <__ssputs_r+0x46>
	...

08009c00 <_svfiprintf_r>:
 8009c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c04:	b09d      	sub	sp, #116	; 0x74
 8009c06:	4680      	mov	r8, r0
 8009c08:	9303      	str	r3, [sp, #12]
 8009c0a:	898b      	ldrh	r3, [r1, #12]
 8009c0c:	061c      	lsls	r4, r3, #24
 8009c0e:	460d      	mov	r5, r1
 8009c10:	4616      	mov	r6, r2
 8009c12:	d50f      	bpl.n	8009c34 <_svfiprintf_r+0x34>
 8009c14:	690b      	ldr	r3, [r1, #16]
 8009c16:	b96b      	cbnz	r3, 8009c34 <_svfiprintf_r+0x34>
 8009c18:	2140      	movs	r1, #64	; 0x40
 8009c1a:	f000 ffa5 	bl	800ab68 <_malloc_r>
 8009c1e:	6028      	str	r0, [r5, #0]
 8009c20:	6128      	str	r0, [r5, #16]
 8009c22:	b928      	cbnz	r0, 8009c30 <_svfiprintf_r+0x30>
 8009c24:	230c      	movs	r3, #12
 8009c26:	f8c8 3000 	str.w	r3, [r8]
 8009c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2e:	e0c5      	b.n	8009dbc <_svfiprintf_r+0x1bc>
 8009c30:	2340      	movs	r3, #64	; 0x40
 8009c32:	616b      	str	r3, [r5, #20]
 8009c34:	2300      	movs	r3, #0
 8009c36:	9309      	str	r3, [sp, #36]	; 0x24
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c3e:	2330      	movs	r3, #48	; 0x30
 8009c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c44:	f04f 0b01 	mov.w	fp, #1
 8009c48:	4637      	mov	r7, r6
 8009c4a:	463c      	mov	r4, r7
 8009c4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d13c      	bne.n	8009cce <_svfiprintf_r+0xce>
 8009c54:	ebb7 0a06 	subs.w	sl, r7, r6
 8009c58:	d00b      	beq.n	8009c72 <_svfiprintf_r+0x72>
 8009c5a:	4653      	mov	r3, sl
 8009c5c:	4632      	mov	r2, r6
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4640      	mov	r0, r8
 8009c62:	f7ff ff71 	bl	8009b48 <__ssputs_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	f000 80a3 	beq.w	8009db2 <_svfiprintf_r+0x1b2>
 8009c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6e:	4453      	add	r3, sl
 8009c70:	9309      	str	r3, [sp, #36]	; 0x24
 8009c72:	783b      	ldrb	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	f000 809c 	beq.w	8009db2 <_svfiprintf_r+0x1b2>
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c80:	9304      	str	r3, [sp, #16]
 8009c82:	9307      	str	r3, [sp, #28]
 8009c84:	9205      	str	r2, [sp, #20]
 8009c86:	9306      	str	r3, [sp, #24]
 8009c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8009c8e:	2205      	movs	r2, #5
 8009c90:	7821      	ldrb	r1, [r4, #0]
 8009c92:	4850      	ldr	r0, [pc, #320]	; (8009dd4 <_svfiprintf_r+0x1d4>)
 8009c94:	f7f6 faac 	bl	80001f0 <memchr>
 8009c98:	1c67      	adds	r7, r4, #1
 8009c9a:	9b04      	ldr	r3, [sp, #16]
 8009c9c:	b9d8      	cbnz	r0, 8009cd6 <_svfiprintf_r+0xd6>
 8009c9e:	06d9      	lsls	r1, r3, #27
 8009ca0:	bf44      	itt	mi
 8009ca2:	2220      	movmi	r2, #32
 8009ca4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009ca8:	071a      	lsls	r2, r3, #28
 8009caa:	bf44      	itt	mi
 8009cac:	222b      	movmi	r2, #43	; 0x2b
 8009cae:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009cb2:	7822      	ldrb	r2, [r4, #0]
 8009cb4:	2a2a      	cmp	r2, #42	; 0x2a
 8009cb6:	d016      	beq.n	8009ce6 <_svfiprintf_r+0xe6>
 8009cb8:	9a07      	ldr	r2, [sp, #28]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	200a      	movs	r0, #10
 8009cbe:	4627      	mov	r7, r4
 8009cc0:	3401      	adds	r4, #1
 8009cc2:	783b      	ldrb	r3, [r7, #0]
 8009cc4:	3b30      	subs	r3, #48	; 0x30
 8009cc6:	2b09      	cmp	r3, #9
 8009cc8:	d951      	bls.n	8009d6e <_svfiprintf_r+0x16e>
 8009cca:	b1c9      	cbz	r1, 8009d00 <_svfiprintf_r+0x100>
 8009ccc:	e011      	b.n	8009cf2 <_svfiprintf_r+0xf2>
 8009cce:	2b25      	cmp	r3, #37	; 0x25
 8009cd0:	d0c0      	beq.n	8009c54 <_svfiprintf_r+0x54>
 8009cd2:	4627      	mov	r7, r4
 8009cd4:	e7b9      	b.n	8009c4a <_svfiprintf_r+0x4a>
 8009cd6:	4a3f      	ldr	r2, [pc, #252]	; (8009dd4 <_svfiprintf_r+0x1d4>)
 8009cd8:	1a80      	subs	r0, r0, r2
 8009cda:	fa0b f000 	lsl.w	r0, fp, r0
 8009cde:	4318      	orrs	r0, r3
 8009ce0:	9004      	str	r0, [sp, #16]
 8009ce2:	463c      	mov	r4, r7
 8009ce4:	e7d3      	b.n	8009c8e <_svfiprintf_r+0x8e>
 8009ce6:	9a03      	ldr	r2, [sp, #12]
 8009ce8:	1d11      	adds	r1, r2, #4
 8009cea:	6812      	ldr	r2, [r2, #0]
 8009cec:	9103      	str	r1, [sp, #12]
 8009cee:	2a00      	cmp	r2, #0
 8009cf0:	db01      	blt.n	8009cf6 <_svfiprintf_r+0xf6>
 8009cf2:	9207      	str	r2, [sp, #28]
 8009cf4:	e004      	b.n	8009d00 <_svfiprintf_r+0x100>
 8009cf6:	4252      	negs	r2, r2
 8009cf8:	f043 0302 	orr.w	r3, r3, #2
 8009cfc:	9207      	str	r2, [sp, #28]
 8009cfe:	9304      	str	r3, [sp, #16]
 8009d00:	783b      	ldrb	r3, [r7, #0]
 8009d02:	2b2e      	cmp	r3, #46	; 0x2e
 8009d04:	d10e      	bne.n	8009d24 <_svfiprintf_r+0x124>
 8009d06:	787b      	ldrb	r3, [r7, #1]
 8009d08:	2b2a      	cmp	r3, #42	; 0x2a
 8009d0a:	f107 0101 	add.w	r1, r7, #1
 8009d0e:	d132      	bne.n	8009d76 <_svfiprintf_r+0x176>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	9203      	str	r2, [sp, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	bfb8      	it	lt
 8009d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d20:	3702      	adds	r7, #2
 8009d22:	9305      	str	r3, [sp, #20]
 8009d24:	4c2c      	ldr	r4, [pc, #176]	; (8009dd8 <_svfiprintf_r+0x1d8>)
 8009d26:	7839      	ldrb	r1, [r7, #0]
 8009d28:	2203      	movs	r2, #3
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f7f6 fa60 	bl	80001f0 <memchr>
 8009d30:	b138      	cbz	r0, 8009d42 <_svfiprintf_r+0x142>
 8009d32:	2340      	movs	r3, #64	; 0x40
 8009d34:	1b00      	subs	r0, r0, r4
 8009d36:	fa03 f000 	lsl.w	r0, r3, r0
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	4303      	orrs	r3, r0
 8009d3e:	9304      	str	r3, [sp, #16]
 8009d40:	3701      	adds	r7, #1
 8009d42:	7839      	ldrb	r1, [r7, #0]
 8009d44:	4825      	ldr	r0, [pc, #148]	; (8009ddc <_svfiprintf_r+0x1dc>)
 8009d46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d4a:	2206      	movs	r2, #6
 8009d4c:	1c7e      	adds	r6, r7, #1
 8009d4e:	f7f6 fa4f 	bl	80001f0 <memchr>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d035      	beq.n	8009dc2 <_svfiprintf_r+0x1c2>
 8009d56:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <_svfiprintf_r+0x1e0>)
 8009d58:	b9fb      	cbnz	r3, 8009d9a <_svfiprintf_r+0x19a>
 8009d5a:	9b03      	ldr	r3, [sp, #12]
 8009d5c:	3307      	adds	r3, #7
 8009d5e:	f023 0307 	bic.w	r3, r3, #7
 8009d62:	3308      	adds	r3, #8
 8009d64:	9303      	str	r3, [sp, #12]
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	444b      	add	r3, r9
 8009d6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009d6c:	e76c      	b.n	8009c48 <_svfiprintf_r+0x48>
 8009d6e:	fb00 3202 	mla	r2, r0, r2, r3
 8009d72:	2101      	movs	r1, #1
 8009d74:	e7a3      	b.n	8009cbe <_svfiprintf_r+0xbe>
 8009d76:	2300      	movs	r3, #0
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	240a      	movs	r4, #10
 8009d7e:	460f      	mov	r7, r1
 8009d80:	3101      	adds	r1, #1
 8009d82:	783a      	ldrb	r2, [r7, #0]
 8009d84:	3a30      	subs	r2, #48	; 0x30
 8009d86:	2a09      	cmp	r2, #9
 8009d88:	d903      	bls.n	8009d92 <_svfiprintf_r+0x192>
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d0ca      	beq.n	8009d24 <_svfiprintf_r+0x124>
 8009d8e:	9005      	str	r0, [sp, #20]
 8009d90:	e7c8      	b.n	8009d24 <_svfiprintf_r+0x124>
 8009d92:	fb04 2000 	mla	r0, r4, r0, r2
 8009d96:	2301      	movs	r3, #1
 8009d98:	e7f1      	b.n	8009d7e <_svfiprintf_r+0x17e>
 8009d9a:	ab03      	add	r3, sp, #12
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	462a      	mov	r2, r5
 8009da0:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <_svfiprintf_r+0x1e4>)
 8009da2:	a904      	add	r1, sp, #16
 8009da4:	4640      	mov	r0, r8
 8009da6:	f3af 8000 	nop.w
 8009daa:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009dae:	4681      	mov	r9, r0
 8009db0:	d1d9      	bne.n	8009d66 <_svfiprintf_r+0x166>
 8009db2:	89ab      	ldrh	r3, [r5, #12]
 8009db4:	065b      	lsls	r3, r3, #25
 8009db6:	f53f af38 	bmi.w	8009c2a <_svfiprintf_r+0x2a>
 8009dba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dbc:	b01d      	add	sp, #116	; 0x74
 8009dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	462a      	mov	r2, r5
 8009dc8:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <_svfiprintf_r+0x1e4>)
 8009dca:	a904      	add	r1, sp, #16
 8009dcc:	4640      	mov	r0, r8
 8009dce:	f000 fa2f 	bl	800a230 <_printf_i>
 8009dd2:	e7ea      	b.n	8009daa <_svfiprintf_r+0x1aa>
 8009dd4:	0800aea4 	.word	0x0800aea4
 8009dd8:	0800aeaa 	.word	0x0800aeaa
 8009ddc:	0800aeae 	.word	0x0800aeae
 8009de0:	00000000 	.word	0x00000000
 8009de4:	08009b49 	.word	0x08009b49

08009de8 <_sungetc_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	1c4b      	adds	r3, r1, #1
 8009dec:	4614      	mov	r4, r2
 8009dee:	d103      	bne.n	8009df8 <_sungetc_r+0x10>
 8009df0:	f04f 35ff 	mov.w	r5, #4294967295
 8009df4:	4628      	mov	r0, r5
 8009df6:	bd38      	pop	{r3, r4, r5, pc}
 8009df8:	8993      	ldrh	r3, [r2, #12]
 8009dfa:	f023 0320 	bic.w	r3, r3, #32
 8009dfe:	8193      	strh	r3, [r2, #12]
 8009e00:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8009e02:	6852      	ldr	r2, [r2, #4]
 8009e04:	b2cd      	uxtb	r5, r1
 8009e06:	b18b      	cbz	r3, 8009e2c <_sungetc_r+0x44>
 8009e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009e0a:	429a      	cmp	r2, r3
 8009e0c:	da08      	bge.n	8009e20 <_sungetc_r+0x38>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	1e5a      	subs	r2, r3, #1
 8009e12:	6022      	str	r2, [r4, #0]
 8009e14:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009e18:	6863      	ldr	r3, [r4, #4]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	6063      	str	r3, [r4, #4]
 8009e1e:	e7e9      	b.n	8009df4 <_sungetc_r+0xc>
 8009e20:	4621      	mov	r1, r4
 8009e22:	f000 fdcf 	bl	800a9c4 <__submore>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	d0f1      	beq.n	8009e0e <_sungetc_r+0x26>
 8009e2a:	e7e1      	b.n	8009df0 <_sungetc_r+0x8>
 8009e2c:	6921      	ldr	r1, [r4, #16]
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	b151      	cbz	r1, 8009e48 <_sungetc_r+0x60>
 8009e32:	4299      	cmp	r1, r3
 8009e34:	d208      	bcs.n	8009e48 <_sungetc_r+0x60>
 8009e36:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009e3a:	428d      	cmp	r5, r1
 8009e3c:	d104      	bne.n	8009e48 <_sungetc_r+0x60>
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	3201      	adds	r2, #1
 8009e42:	6023      	str	r3, [r4, #0]
 8009e44:	6062      	str	r2, [r4, #4]
 8009e46:	e7d5      	b.n	8009df4 <_sungetc_r+0xc>
 8009e48:	63e3      	str	r3, [r4, #60]	; 0x3c
 8009e4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e4e:	6363      	str	r3, [r4, #52]	; 0x34
 8009e50:	2303      	movs	r3, #3
 8009e52:	63a3      	str	r3, [r4, #56]	; 0x38
 8009e54:	4623      	mov	r3, r4
 8009e56:	6422      	str	r2, [r4, #64]	; 0x40
 8009e58:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e7dc      	b.n	8009e1c <_sungetc_r+0x34>

08009e62 <__ssrefill_r>:
 8009e62:	b510      	push	{r4, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009e68:	b169      	cbz	r1, 8009e86 <__ssrefill_r+0x24>
 8009e6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e6e:	4299      	cmp	r1, r3
 8009e70:	d001      	beq.n	8009e76 <__ssrefill_r+0x14>
 8009e72:	f000 fe2b 	bl	800aacc <_free_r>
 8009e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e78:	6063      	str	r3, [r4, #4]
 8009e7a:	2000      	movs	r0, #0
 8009e7c:	6360      	str	r0, [r4, #52]	; 0x34
 8009e7e:	b113      	cbz	r3, 8009e86 <__ssrefill_r+0x24>
 8009e80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009e82:	6023      	str	r3, [r4, #0]
 8009e84:	bd10      	pop	{r4, pc}
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	89a3      	ldrh	r3, [r4, #12]
 8009e90:	f043 0320 	orr.w	r3, r3, #32
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	bd10      	pop	{r4, pc}

08009e9c <__ssvfiscanf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8009ea4:	f10d 080c 	add.w	r8, sp, #12
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	2300      	movs	r3, #0
 8009eac:	9346      	str	r3, [sp, #280]	; 0x118
 8009eae:	9347      	str	r3, [sp, #284]	; 0x11c
 8009eb0:	4ba0      	ldr	r3, [pc, #640]	; (800a134 <__ssvfiscanf_r+0x298>)
 8009eb2:	93a2      	str	r3, [sp, #648]	; 0x288
 8009eb4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800a13c <__ssvfiscanf_r+0x2a0>
 8009eb8:	4b9f      	ldr	r3, [pc, #636]	; (800a138 <__ssvfiscanf_r+0x29c>)
 8009eba:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	93a3      	str	r3, [sp, #652]	; 0x28c
 8009ec4:	4692      	mov	sl, r2
 8009ec6:	270a      	movs	r7, #10
 8009ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 812f 	beq.w	800a130 <__ssvfiscanf_r+0x294>
 8009ed2:	f000 fdb5 	bl	800aa40 <__locale_ctype_ptr>
 8009ed6:	f89a b000 	ldrb.w	fp, [sl]
 8009eda:	4458      	add	r0, fp
 8009edc:	7843      	ldrb	r3, [r0, #1]
 8009ede:	f013 0308 	ands.w	r3, r3, #8
 8009ee2:	d143      	bne.n	8009f6c <__ssvfiscanf_r+0xd0>
 8009ee4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009ee8:	f10a 0501 	add.w	r5, sl, #1
 8009eec:	f040 8099 	bne.w	800a022 <__ssvfiscanf_r+0x186>
 8009ef0:	9345      	str	r3, [sp, #276]	; 0x114
 8009ef2:	9343      	str	r3, [sp, #268]	; 0x10c
 8009ef4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8009efa:	d103      	bne.n	8009f04 <__ssvfiscanf_r+0x68>
 8009efc:	2310      	movs	r3, #16
 8009efe:	9343      	str	r3, [sp, #268]	; 0x10c
 8009f00:	f10a 0502 	add.w	r5, sl, #2
 8009f04:	7829      	ldrb	r1, [r5, #0]
 8009f06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009f0a:	2a09      	cmp	r2, #9
 8009f0c:	46aa      	mov	sl, r5
 8009f0e:	f105 0501 	add.w	r5, r5, #1
 8009f12:	d941      	bls.n	8009f98 <__ssvfiscanf_r+0xfc>
 8009f14:	2203      	movs	r2, #3
 8009f16:	4889      	ldr	r0, [pc, #548]	; (800a13c <__ssvfiscanf_r+0x2a0>)
 8009f18:	f7f6 f96a 	bl	80001f0 <memchr>
 8009f1c:	b138      	cbz	r0, 8009f2e <__ssvfiscanf_r+0x92>
 8009f1e:	eba0 0309 	sub.w	r3, r0, r9
 8009f22:	2001      	movs	r0, #1
 8009f24:	4098      	lsls	r0, r3
 8009f26:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009f28:	4318      	orrs	r0, r3
 8009f2a:	9043      	str	r0, [sp, #268]	; 0x10c
 8009f2c:	46aa      	mov	sl, r5
 8009f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009f32:	2b67      	cmp	r3, #103	; 0x67
 8009f34:	f10a 0501 	add.w	r5, sl, #1
 8009f38:	d84a      	bhi.n	8009fd0 <__ssvfiscanf_r+0x134>
 8009f3a:	2b65      	cmp	r3, #101	; 0x65
 8009f3c:	f080 80b7 	bcs.w	800a0ae <__ssvfiscanf_r+0x212>
 8009f40:	2b47      	cmp	r3, #71	; 0x47
 8009f42:	d82f      	bhi.n	8009fa4 <__ssvfiscanf_r+0x108>
 8009f44:	2b45      	cmp	r3, #69	; 0x45
 8009f46:	f080 80b2 	bcs.w	800a0ae <__ssvfiscanf_r+0x212>
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f000 8082 	beq.w	800a054 <__ssvfiscanf_r+0x1b8>
 8009f50:	2b25      	cmp	r3, #37	; 0x25
 8009f52:	d066      	beq.n	800a022 <__ssvfiscanf_r+0x186>
 8009f54:	2303      	movs	r3, #3
 8009f56:	9349      	str	r3, [sp, #292]	; 0x124
 8009f58:	9744      	str	r7, [sp, #272]	; 0x110
 8009f5a:	e045      	b.n	8009fe8 <__ssvfiscanf_r+0x14c>
 8009f5c:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8009f5e:	3101      	adds	r1, #1
 8009f60:	9147      	str	r1, [sp, #284]	; 0x11c
 8009f62:	6861      	ldr	r1, [r4, #4]
 8009f64:	3301      	adds	r3, #1
 8009f66:	3901      	subs	r1, #1
 8009f68:	6061      	str	r1, [r4, #4]
 8009f6a:	6023      	str	r3, [r4, #0]
 8009f6c:	6863      	ldr	r3, [r4, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	dd0b      	ble.n	8009f8a <__ssvfiscanf_r+0xee>
 8009f72:	f000 fd65 	bl	800aa40 <__locale_ctype_ptr>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	7819      	ldrb	r1, [r3, #0]
 8009f7a:	4408      	add	r0, r1
 8009f7c:	7841      	ldrb	r1, [r0, #1]
 8009f7e:	070d      	lsls	r5, r1, #28
 8009f80:	d4ec      	bmi.n	8009f5c <__ssvfiscanf_r+0xc0>
 8009f82:	f10a 0501 	add.w	r5, sl, #1
 8009f86:	46aa      	mov	sl, r5
 8009f88:	e79e      	b.n	8009ec8 <__ssvfiscanf_r+0x2c>
 8009f8a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009f8c:	4621      	mov	r1, r4
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4798      	blx	r3
 8009f92:	2800      	cmp	r0, #0
 8009f94:	d0ed      	beq.n	8009f72 <__ssvfiscanf_r+0xd6>
 8009f96:	e7f4      	b.n	8009f82 <__ssvfiscanf_r+0xe6>
 8009f98:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009f9a:	fb07 1303 	mla	r3, r7, r3, r1
 8009f9e:	3b30      	subs	r3, #48	; 0x30
 8009fa0:	9345      	str	r3, [sp, #276]	; 0x114
 8009fa2:	e7af      	b.n	8009f04 <__ssvfiscanf_r+0x68>
 8009fa4:	2b5b      	cmp	r3, #91	; 0x5b
 8009fa6:	d061      	beq.n	800a06c <__ssvfiscanf_r+0x1d0>
 8009fa8:	d80c      	bhi.n	8009fc4 <__ssvfiscanf_r+0x128>
 8009faa:	2b58      	cmp	r3, #88	; 0x58
 8009fac:	d1d2      	bne.n	8009f54 <__ssvfiscanf_r+0xb8>
 8009fae:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8009fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fb4:	9243      	str	r2, [sp, #268]	; 0x10c
 8009fb6:	2210      	movs	r2, #16
 8009fb8:	9244      	str	r2, [sp, #272]	; 0x110
 8009fba:	2b6f      	cmp	r3, #111	; 0x6f
 8009fbc:	bfb4      	ite	lt
 8009fbe:	2303      	movlt	r3, #3
 8009fc0:	2304      	movge	r3, #4
 8009fc2:	e010      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 8009fc4:	2b63      	cmp	r3, #99	; 0x63
 8009fc6:	d05c      	beq.n	800a082 <__ssvfiscanf_r+0x1e6>
 8009fc8:	2b64      	cmp	r3, #100	; 0x64
 8009fca:	d1c3      	bne.n	8009f54 <__ssvfiscanf_r+0xb8>
 8009fcc:	9744      	str	r7, [sp, #272]	; 0x110
 8009fce:	e7f4      	b.n	8009fba <__ssvfiscanf_r+0x11e>
 8009fd0:	2b70      	cmp	r3, #112	; 0x70
 8009fd2:	d042      	beq.n	800a05a <__ssvfiscanf_r+0x1be>
 8009fd4:	d81d      	bhi.n	800a012 <__ssvfiscanf_r+0x176>
 8009fd6:	2b6e      	cmp	r3, #110	; 0x6e
 8009fd8:	d059      	beq.n	800a08e <__ssvfiscanf_r+0x1f2>
 8009fda:	d843      	bhi.n	800a064 <__ssvfiscanf_r+0x1c8>
 8009fdc:	2b69      	cmp	r3, #105	; 0x69
 8009fde:	d1b9      	bne.n	8009f54 <__ssvfiscanf_r+0xb8>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	9344      	str	r3, [sp, #272]	; 0x110
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	9349      	str	r3, [sp, #292]	; 0x124
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd61      	ble.n	800a0b2 <__ssvfiscanf_r+0x216>
 8009fee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009ff0:	0659      	lsls	r1, r3, #25
 8009ff2:	d56f      	bpl.n	800a0d4 <__ssvfiscanf_r+0x238>
 8009ff4:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	dc7c      	bgt.n	800a0f4 <__ssvfiscanf_r+0x258>
 8009ffa:	ab01      	add	r3, sp, #4
 8009ffc:	4622      	mov	r2, r4
 8009ffe:	a943      	add	r1, sp, #268	; 0x10c
 800a000:	4630      	mov	r0, r6
 800a002:	f000 fa35 	bl	800a470 <_scanf_chars>
 800a006:	2801      	cmp	r0, #1
 800a008:	f000 8092 	beq.w	800a130 <__ssvfiscanf_r+0x294>
 800a00c:	2802      	cmp	r0, #2
 800a00e:	d1ba      	bne.n	8009f86 <__ssvfiscanf_r+0xea>
 800a010:	e01d      	b.n	800a04e <__ssvfiscanf_r+0x1b2>
 800a012:	2b75      	cmp	r3, #117	; 0x75
 800a014:	d0da      	beq.n	8009fcc <__ssvfiscanf_r+0x130>
 800a016:	2b78      	cmp	r3, #120	; 0x78
 800a018:	d0c9      	beq.n	8009fae <__ssvfiscanf_r+0x112>
 800a01a:	2b73      	cmp	r3, #115	; 0x73
 800a01c:	d19a      	bne.n	8009f54 <__ssvfiscanf_r+0xb8>
 800a01e:	2302      	movs	r3, #2
 800a020:	e7e1      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 800a022:	6863      	ldr	r3, [r4, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	dd0c      	ble.n	800a042 <__ssvfiscanf_r+0x1a6>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	781a      	ldrb	r2, [r3, #0]
 800a02c:	4593      	cmp	fp, r2
 800a02e:	d17f      	bne.n	800a130 <__ssvfiscanf_r+0x294>
 800a030:	3301      	adds	r3, #1
 800a032:	6862      	ldr	r2, [r4, #4]
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a038:	3a01      	subs	r2, #1
 800a03a:	3301      	adds	r3, #1
 800a03c:	6062      	str	r2, [r4, #4]
 800a03e:	9347      	str	r3, [sp, #284]	; 0x11c
 800a040:	e7a1      	b.n	8009f86 <__ssvfiscanf_r+0xea>
 800a042:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a044:	4621      	mov	r1, r4
 800a046:	4630      	mov	r0, r6
 800a048:	4798      	blx	r3
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0ec      	beq.n	800a028 <__ssvfiscanf_r+0x18c>
 800a04e:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a050:	2800      	cmp	r0, #0
 800a052:	d163      	bne.n	800a11c <__ssvfiscanf_r+0x280>
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	e066      	b.n	800a128 <__ssvfiscanf_r+0x28c>
 800a05a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a05c:	f042 0220 	orr.w	r2, r2, #32
 800a060:	9243      	str	r2, [sp, #268]	; 0x10c
 800a062:	e7a4      	b.n	8009fae <__ssvfiscanf_r+0x112>
 800a064:	2308      	movs	r3, #8
 800a066:	9344      	str	r3, [sp, #272]	; 0x110
 800a068:	2304      	movs	r3, #4
 800a06a:	e7bc      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 800a06c:	4629      	mov	r1, r5
 800a06e:	4640      	mov	r0, r8
 800a070:	f000 fb56 	bl	800a720 <__sccl>
 800a074:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a07a:	9343      	str	r3, [sp, #268]	; 0x10c
 800a07c:	4605      	mov	r5, r0
 800a07e:	2301      	movs	r3, #1
 800a080:	e7b1      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 800a082:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800a084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a088:	9343      	str	r3, [sp, #268]	; 0x10c
 800a08a:	2300      	movs	r3, #0
 800a08c:	e7ab      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 800a08e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800a090:	06d0      	lsls	r0, r2, #27
 800a092:	f53f af78 	bmi.w	8009f86 <__ssvfiscanf_r+0xea>
 800a096:	f012 0f01 	tst.w	r2, #1
 800a09a:	9a01      	ldr	r2, [sp, #4]
 800a09c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800a09e:	f102 0104 	add.w	r1, r2, #4
 800a0a2:	9101      	str	r1, [sp, #4]
 800a0a4:	6812      	ldr	r2, [r2, #0]
 800a0a6:	bf14      	ite	ne
 800a0a8:	8013      	strhne	r3, [r2, #0]
 800a0aa:	6013      	streq	r3, [r2, #0]
 800a0ac:	e76b      	b.n	8009f86 <__ssvfiscanf_r+0xea>
 800a0ae:	2305      	movs	r3, #5
 800a0b0:	e799      	b.n	8009fe6 <__ssvfiscanf_r+0x14a>
 800a0b2:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4798      	blx	r3
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d097      	beq.n	8009fee <__ssvfiscanf_r+0x152>
 800a0be:	e7c6      	b.n	800a04e <__ssvfiscanf_r+0x1b2>
 800a0c0:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800a0c2:	3201      	adds	r2, #1
 800a0c4:	9247      	str	r2, [sp, #284]	; 0x11c
 800a0c6:	6862      	ldr	r2, [r4, #4]
 800a0c8:	3a01      	subs	r2, #1
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	6062      	str	r2, [r4, #4]
 800a0ce:	dd0a      	ble.n	800a0e6 <__ssvfiscanf_r+0x24a>
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	6023      	str	r3, [r4, #0]
 800a0d4:	f000 fcb4 	bl	800aa40 <__locale_ctype_ptr>
 800a0d8:	6823      	ldr	r3, [r4, #0]
 800a0da:	781a      	ldrb	r2, [r3, #0]
 800a0dc:	4410      	add	r0, r2
 800a0de:	7842      	ldrb	r2, [r0, #1]
 800a0e0:	0712      	lsls	r2, r2, #28
 800a0e2:	d4ed      	bmi.n	800a0c0 <__ssvfiscanf_r+0x224>
 800a0e4:	e786      	b.n	8009ff4 <__ssvfiscanf_r+0x158>
 800a0e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	4798      	blx	r3
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d0f0      	beq.n	800a0d4 <__ssvfiscanf_r+0x238>
 800a0f2:	e7ac      	b.n	800a04e <__ssvfiscanf_r+0x1b2>
 800a0f4:	2b04      	cmp	r3, #4
 800a0f6:	dc06      	bgt.n	800a106 <__ssvfiscanf_r+0x26a>
 800a0f8:	ab01      	add	r3, sp, #4
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	a943      	add	r1, sp, #268	; 0x10c
 800a0fe:	4630      	mov	r0, r6
 800a100:	f000 fa1a 	bl	800a538 <_scanf_i>
 800a104:	e77f      	b.n	800a006 <__ssvfiscanf_r+0x16a>
 800a106:	4b0e      	ldr	r3, [pc, #56]	; (800a140 <__ssvfiscanf_r+0x2a4>)
 800a108:	2b00      	cmp	r3, #0
 800a10a:	f43f af3c 	beq.w	8009f86 <__ssvfiscanf_r+0xea>
 800a10e:	ab01      	add	r3, sp, #4
 800a110:	4622      	mov	r2, r4
 800a112:	a943      	add	r1, sp, #268	; 0x10c
 800a114:	4630      	mov	r0, r6
 800a116:	f3af 8000 	nop.w
 800a11a:	e774      	b.n	800a006 <__ssvfiscanf_r+0x16a>
 800a11c:	89a3      	ldrh	r3, [r4, #12]
 800a11e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a122:	bf18      	it	ne
 800a124:	f04f 30ff 	movne.w	r0, #4294967295
 800a128:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	9846      	ldr	r0, [sp, #280]	; 0x118
 800a132:	e7f9      	b.n	800a128 <__ssvfiscanf_r+0x28c>
 800a134:	08009de9 	.word	0x08009de9
 800a138:	08009e63 	.word	0x08009e63
 800a13c:	0800aeaa 	.word	0x0800aeaa
 800a140:	00000000 	.word	0x00000000

0800a144 <_printf_common>:
 800a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	4691      	mov	r9, r2
 800a14a:	461f      	mov	r7, r3
 800a14c:	688a      	ldr	r2, [r1, #8]
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a154:	4293      	cmp	r3, r2
 800a156:	bfb8      	it	lt
 800a158:	4613      	movlt	r3, r2
 800a15a:	f8c9 3000 	str.w	r3, [r9]
 800a15e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a162:	4606      	mov	r6, r0
 800a164:	460c      	mov	r4, r1
 800a166:	b112      	cbz	r2, 800a16e <_printf_common+0x2a>
 800a168:	3301      	adds	r3, #1
 800a16a:	f8c9 3000 	str.w	r3, [r9]
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	0699      	lsls	r1, r3, #26
 800a172:	bf42      	ittt	mi
 800a174:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a178:	3302      	addmi	r3, #2
 800a17a:	f8c9 3000 	strmi.w	r3, [r9]
 800a17e:	6825      	ldr	r5, [r4, #0]
 800a180:	f015 0506 	ands.w	r5, r5, #6
 800a184:	d107      	bne.n	800a196 <_printf_common+0x52>
 800a186:	f104 0a19 	add.w	sl, r4, #25
 800a18a:	68e3      	ldr	r3, [r4, #12]
 800a18c:	f8d9 2000 	ldr.w	r2, [r9]
 800a190:	1a9b      	subs	r3, r3, r2
 800a192:	429d      	cmp	r5, r3
 800a194:	db29      	blt.n	800a1ea <_printf_common+0xa6>
 800a196:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a19a:	6822      	ldr	r2, [r4, #0]
 800a19c:	3300      	adds	r3, #0
 800a19e:	bf18      	it	ne
 800a1a0:	2301      	movne	r3, #1
 800a1a2:	0692      	lsls	r2, r2, #26
 800a1a4:	d42e      	bmi.n	800a204 <_printf_common+0xc0>
 800a1a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1aa:	4639      	mov	r1, r7
 800a1ac:	4630      	mov	r0, r6
 800a1ae:	47c0      	blx	r8
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d021      	beq.n	800a1f8 <_printf_common+0xb4>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	68e5      	ldr	r5, [r4, #12]
 800a1b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a1bc:	f003 0306 	and.w	r3, r3, #6
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	bf08      	it	eq
 800a1c4:	1aad      	subeq	r5, r5, r2
 800a1c6:	68a3      	ldr	r3, [r4, #8]
 800a1c8:	6922      	ldr	r2, [r4, #16]
 800a1ca:	bf0c      	ite	eq
 800a1cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1d0:	2500      	movne	r5, #0
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	bfc4      	itt	gt
 800a1d6:	1a9b      	subgt	r3, r3, r2
 800a1d8:	18ed      	addgt	r5, r5, r3
 800a1da:	f04f 0900 	mov.w	r9, #0
 800a1de:	341a      	adds	r4, #26
 800a1e0:	454d      	cmp	r5, r9
 800a1e2:	d11b      	bne.n	800a21c <_printf_common+0xd8>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	47c0      	blx	r8
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d103      	bne.n	800a200 <_printf_common+0xbc>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a200:	3501      	adds	r5, #1
 800a202:	e7c2      	b.n	800a18a <_printf_common+0x46>
 800a204:	18e1      	adds	r1, r4, r3
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	2030      	movs	r0, #48	; 0x30
 800a20a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a20e:	4422      	add	r2, r4
 800a210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a218:	3302      	adds	r3, #2
 800a21a:	e7c4      	b.n	800a1a6 <_printf_common+0x62>
 800a21c:	2301      	movs	r3, #1
 800a21e:	4622      	mov	r2, r4
 800a220:	4639      	mov	r1, r7
 800a222:	4630      	mov	r0, r6
 800a224:	47c0      	blx	r8
 800a226:	3001      	adds	r0, #1
 800a228:	d0e6      	beq.n	800a1f8 <_printf_common+0xb4>
 800a22a:	f109 0901 	add.w	r9, r9, #1
 800a22e:	e7d7      	b.n	800a1e0 <_printf_common+0x9c>

0800a230 <_printf_i>:
 800a230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a234:	4617      	mov	r7, r2
 800a236:	7e0a      	ldrb	r2, [r1, #24]
 800a238:	b085      	sub	sp, #20
 800a23a:	2a6e      	cmp	r2, #110	; 0x6e
 800a23c:	4698      	mov	r8, r3
 800a23e:	4606      	mov	r6, r0
 800a240:	460c      	mov	r4, r1
 800a242:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a244:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800a248:	f000 80bc 	beq.w	800a3c4 <_printf_i+0x194>
 800a24c:	d81a      	bhi.n	800a284 <_printf_i+0x54>
 800a24e:	2a63      	cmp	r2, #99	; 0x63
 800a250:	d02e      	beq.n	800a2b0 <_printf_i+0x80>
 800a252:	d80a      	bhi.n	800a26a <_printf_i+0x3a>
 800a254:	2a00      	cmp	r2, #0
 800a256:	f000 80c8 	beq.w	800a3ea <_printf_i+0x1ba>
 800a25a:	2a58      	cmp	r2, #88	; 0x58
 800a25c:	f000 808a 	beq.w	800a374 <_printf_i+0x144>
 800a260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a264:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800a268:	e02a      	b.n	800a2c0 <_printf_i+0x90>
 800a26a:	2a64      	cmp	r2, #100	; 0x64
 800a26c:	d001      	beq.n	800a272 <_printf_i+0x42>
 800a26e:	2a69      	cmp	r2, #105	; 0x69
 800a270:	d1f6      	bne.n	800a260 <_printf_i+0x30>
 800a272:	6821      	ldr	r1, [r4, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	f011 0f80 	tst.w	r1, #128	; 0x80
 800a27a:	d023      	beq.n	800a2c4 <_printf_i+0x94>
 800a27c:	1d11      	adds	r1, r2, #4
 800a27e:	6019      	str	r1, [r3, #0]
 800a280:	6813      	ldr	r3, [r2, #0]
 800a282:	e027      	b.n	800a2d4 <_printf_i+0xa4>
 800a284:	2a73      	cmp	r2, #115	; 0x73
 800a286:	f000 80b4 	beq.w	800a3f2 <_printf_i+0x1c2>
 800a28a:	d808      	bhi.n	800a29e <_printf_i+0x6e>
 800a28c:	2a6f      	cmp	r2, #111	; 0x6f
 800a28e:	d02a      	beq.n	800a2e6 <_printf_i+0xb6>
 800a290:	2a70      	cmp	r2, #112	; 0x70
 800a292:	d1e5      	bne.n	800a260 <_printf_i+0x30>
 800a294:	680a      	ldr	r2, [r1, #0]
 800a296:	f042 0220 	orr.w	r2, r2, #32
 800a29a:	600a      	str	r2, [r1, #0]
 800a29c:	e003      	b.n	800a2a6 <_printf_i+0x76>
 800a29e:	2a75      	cmp	r2, #117	; 0x75
 800a2a0:	d021      	beq.n	800a2e6 <_printf_i+0xb6>
 800a2a2:	2a78      	cmp	r2, #120	; 0x78
 800a2a4:	d1dc      	bne.n	800a260 <_printf_i+0x30>
 800a2a6:	2278      	movs	r2, #120	; 0x78
 800a2a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a2ac:	496e      	ldr	r1, [pc, #440]	; (800a468 <_printf_i+0x238>)
 800a2ae:	e064      	b.n	800a37a <_printf_i+0x14a>
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800a2b6:	1d11      	adds	r1, r2, #4
 800a2b8:	6019      	str	r1, [r3, #0]
 800a2ba:	6813      	ldr	r3, [r2, #0]
 800a2bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e0a3      	b.n	800a40c <_printf_i+0x1dc>
 800a2c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800a2c8:	f102 0104 	add.w	r1, r2, #4
 800a2cc:	6019      	str	r1, [r3, #0]
 800a2ce:	d0d7      	beq.n	800a280 <_printf_i+0x50>
 800a2d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	da03      	bge.n	800a2e0 <_printf_i+0xb0>
 800a2d8:	222d      	movs	r2, #45	; 0x2d
 800a2da:	425b      	negs	r3, r3
 800a2dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a2e0:	4962      	ldr	r1, [pc, #392]	; (800a46c <_printf_i+0x23c>)
 800a2e2:	220a      	movs	r2, #10
 800a2e4:	e017      	b.n	800a316 <_printf_i+0xe6>
 800a2e6:	6820      	ldr	r0, [r4, #0]
 800a2e8:	6819      	ldr	r1, [r3, #0]
 800a2ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a2ee:	d003      	beq.n	800a2f8 <_printf_i+0xc8>
 800a2f0:	1d08      	adds	r0, r1, #4
 800a2f2:	6018      	str	r0, [r3, #0]
 800a2f4:	680b      	ldr	r3, [r1, #0]
 800a2f6:	e006      	b.n	800a306 <_printf_i+0xd6>
 800a2f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2fc:	f101 0004 	add.w	r0, r1, #4
 800a300:	6018      	str	r0, [r3, #0]
 800a302:	d0f7      	beq.n	800a2f4 <_printf_i+0xc4>
 800a304:	880b      	ldrh	r3, [r1, #0]
 800a306:	4959      	ldr	r1, [pc, #356]	; (800a46c <_printf_i+0x23c>)
 800a308:	2a6f      	cmp	r2, #111	; 0x6f
 800a30a:	bf14      	ite	ne
 800a30c:	220a      	movne	r2, #10
 800a30e:	2208      	moveq	r2, #8
 800a310:	2000      	movs	r0, #0
 800a312:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800a316:	6865      	ldr	r5, [r4, #4]
 800a318:	60a5      	str	r5, [r4, #8]
 800a31a:	2d00      	cmp	r5, #0
 800a31c:	f2c0 809c 	blt.w	800a458 <_printf_i+0x228>
 800a320:	6820      	ldr	r0, [r4, #0]
 800a322:	f020 0004 	bic.w	r0, r0, #4
 800a326:	6020      	str	r0, [r4, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d13f      	bne.n	800a3ac <_printf_i+0x17c>
 800a32c:	2d00      	cmp	r5, #0
 800a32e:	f040 8095 	bne.w	800a45c <_printf_i+0x22c>
 800a332:	4675      	mov	r5, lr
 800a334:	2a08      	cmp	r2, #8
 800a336:	d10b      	bne.n	800a350 <_printf_i+0x120>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	07da      	lsls	r2, r3, #31
 800a33c:	d508      	bpl.n	800a350 <_printf_i+0x120>
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	6862      	ldr	r2, [r4, #4]
 800a342:	429a      	cmp	r2, r3
 800a344:	bfde      	ittt	le
 800a346:	2330      	movle	r3, #48	; 0x30
 800a348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a34c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a350:	ebae 0305 	sub.w	r3, lr, r5
 800a354:	6123      	str	r3, [r4, #16]
 800a356:	f8cd 8000 	str.w	r8, [sp]
 800a35a:	463b      	mov	r3, r7
 800a35c:	aa03      	add	r2, sp, #12
 800a35e:	4621      	mov	r1, r4
 800a360:	4630      	mov	r0, r6
 800a362:	f7ff feef 	bl	800a144 <_printf_common>
 800a366:	3001      	adds	r0, #1
 800a368:	d155      	bne.n	800a416 <_printf_i+0x1e6>
 800a36a:	f04f 30ff 	mov.w	r0, #4294967295
 800a36e:	b005      	add	sp, #20
 800a370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a374:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800a378:	493c      	ldr	r1, [pc, #240]	; (800a46c <_printf_i+0x23c>)
 800a37a:	6822      	ldr	r2, [r4, #0]
 800a37c:	6818      	ldr	r0, [r3, #0]
 800a37e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800a382:	f100 0504 	add.w	r5, r0, #4
 800a386:	601d      	str	r5, [r3, #0]
 800a388:	d001      	beq.n	800a38e <_printf_i+0x15e>
 800a38a:	6803      	ldr	r3, [r0, #0]
 800a38c:	e002      	b.n	800a394 <_printf_i+0x164>
 800a38e:	0655      	lsls	r5, r2, #25
 800a390:	d5fb      	bpl.n	800a38a <_printf_i+0x15a>
 800a392:	8803      	ldrh	r3, [r0, #0]
 800a394:	07d0      	lsls	r0, r2, #31
 800a396:	bf44      	itt	mi
 800a398:	f042 0220 	orrmi.w	r2, r2, #32
 800a39c:	6022      	strmi	r2, [r4, #0]
 800a39e:	b91b      	cbnz	r3, 800a3a8 <_printf_i+0x178>
 800a3a0:	6822      	ldr	r2, [r4, #0]
 800a3a2:	f022 0220 	bic.w	r2, r2, #32
 800a3a6:	6022      	str	r2, [r4, #0]
 800a3a8:	2210      	movs	r2, #16
 800a3aa:	e7b1      	b.n	800a310 <_printf_i+0xe0>
 800a3ac:	4675      	mov	r5, lr
 800a3ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3b2:	fb02 3310 	mls	r3, r2, r0, r3
 800a3b6:	5ccb      	ldrb	r3, [r1, r3]
 800a3b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2800      	cmp	r0, #0
 800a3c0:	d1f5      	bne.n	800a3ae <_printf_i+0x17e>
 800a3c2:	e7b7      	b.n	800a334 <_printf_i+0x104>
 800a3c4:	6808      	ldr	r0, [r1, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	6949      	ldr	r1, [r1, #20]
 800a3ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 800a3ce:	d004      	beq.n	800a3da <_printf_i+0x1aa>
 800a3d0:	1d10      	adds	r0, r2, #4
 800a3d2:	6018      	str	r0, [r3, #0]
 800a3d4:	6813      	ldr	r3, [r2, #0]
 800a3d6:	6019      	str	r1, [r3, #0]
 800a3d8:	e007      	b.n	800a3ea <_printf_i+0x1ba>
 800a3da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3de:	f102 0004 	add.w	r0, r2, #4
 800a3e2:	6018      	str	r0, [r3, #0]
 800a3e4:	6813      	ldr	r3, [r2, #0]
 800a3e6:	d0f6      	beq.n	800a3d6 <_printf_i+0x1a6>
 800a3e8:	8019      	strh	r1, [r3, #0]
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	6123      	str	r3, [r4, #16]
 800a3ee:	4675      	mov	r5, lr
 800a3f0:	e7b1      	b.n	800a356 <_printf_i+0x126>
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	1d11      	adds	r1, r2, #4
 800a3f6:	6019      	str	r1, [r3, #0]
 800a3f8:	6815      	ldr	r5, [r2, #0]
 800a3fa:	6862      	ldr	r2, [r4, #4]
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	4628      	mov	r0, r5
 800a400:	f7f5 fef6 	bl	80001f0 <memchr>
 800a404:	b108      	cbz	r0, 800a40a <_printf_i+0x1da>
 800a406:	1b40      	subs	r0, r0, r5
 800a408:	6060      	str	r0, [r4, #4]
 800a40a:	6863      	ldr	r3, [r4, #4]
 800a40c:	6123      	str	r3, [r4, #16]
 800a40e:	2300      	movs	r3, #0
 800a410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a414:	e79f      	b.n	800a356 <_printf_i+0x126>
 800a416:	6923      	ldr	r3, [r4, #16]
 800a418:	462a      	mov	r2, r5
 800a41a:	4639      	mov	r1, r7
 800a41c:	4630      	mov	r0, r6
 800a41e:	47c0      	blx	r8
 800a420:	3001      	adds	r0, #1
 800a422:	d0a2      	beq.n	800a36a <_printf_i+0x13a>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	079b      	lsls	r3, r3, #30
 800a428:	d507      	bpl.n	800a43a <_printf_i+0x20a>
 800a42a:	2500      	movs	r5, #0
 800a42c:	f104 0919 	add.w	r9, r4, #25
 800a430:	68e3      	ldr	r3, [r4, #12]
 800a432:	9a03      	ldr	r2, [sp, #12]
 800a434:	1a9b      	subs	r3, r3, r2
 800a436:	429d      	cmp	r5, r3
 800a438:	db05      	blt.n	800a446 <_printf_i+0x216>
 800a43a:	68e0      	ldr	r0, [r4, #12]
 800a43c:	9b03      	ldr	r3, [sp, #12]
 800a43e:	4298      	cmp	r0, r3
 800a440:	bfb8      	it	lt
 800a442:	4618      	movlt	r0, r3
 800a444:	e793      	b.n	800a36e <_printf_i+0x13e>
 800a446:	2301      	movs	r3, #1
 800a448:	464a      	mov	r2, r9
 800a44a:	4639      	mov	r1, r7
 800a44c:	4630      	mov	r0, r6
 800a44e:	47c0      	blx	r8
 800a450:	3001      	adds	r0, #1
 800a452:	d08a      	beq.n	800a36a <_printf_i+0x13a>
 800a454:	3501      	adds	r5, #1
 800a456:	e7eb      	b.n	800a430 <_printf_i+0x200>
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d1a7      	bne.n	800a3ac <_printf_i+0x17c>
 800a45c:	780b      	ldrb	r3, [r1, #0]
 800a45e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a462:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a466:	e765      	b.n	800a334 <_printf_i+0x104>
 800a468:	0800aec6 	.word	0x0800aec6
 800a46c:	0800aeb5 	.word	0x0800aeb5

0800a470 <_scanf_chars>:
 800a470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a474:	4615      	mov	r5, r2
 800a476:	688a      	ldr	r2, [r1, #8]
 800a478:	4680      	mov	r8, r0
 800a47a:	460c      	mov	r4, r1
 800a47c:	b932      	cbnz	r2, 800a48c <_scanf_chars+0x1c>
 800a47e:	698a      	ldr	r2, [r1, #24]
 800a480:	2a00      	cmp	r2, #0
 800a482:	bf0c      	ite	eq
 800a484:	2201      	moveq	r2, #1
 800a486:	f04f 32ff 	movne.w	r2, #4294967295
 800a48a:	608a      	str	r2, [r1, #8]
 800a48c:	6822      	ldr	r2, [r4, #0]
 800a48e:	06d1      	lsls	r1, r2, #27
 800a490:	bf5f      	itttt	pl
 800a492:	681a      	ldrpl	r2, [r3, #0]
 800a494:	1d11      	addpl	r1, r2, #4
 800a496:	6019      	strpl	r1, [r3, #0]
 800a498:	6817      	ldrpl	r7, [r2, #0]
 800a49a:	2600      	movs	r6, #0
 800a49c:	69a3      	ldr	r3, [r4, #24]
 800a49e:	b1db      	cbz	r3, 800a4d8 <_scanf_chars+0x68>
 800a4a0:	2b01      	cmp	r3, #1
 800a4a2:	d107      	bne.n	800a4b4 <_scanf_chars+0x44>
 800a4a4:	682b      	ldr	r3, [r5, #0]
 800a4a6:	6962      	ldr	r2, [r4, #20]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	5cd3      	ldrb	r3, [r2, r3]
 800a4ac:	b9a3      	cbnz	r3, 800a4d8 <_scanf_chars+0x68>
 800a4ae:	2e00      	cmp	r6, #0
 800a4b0:	d132      	bne.n	800a518 <_scanf_chars+0xa8>
 800a4b2:	e006      	b.n	800a4c2 <_scanf_chars+0x52>
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d007      	beq.n	800a4c8 <_scanf_chars+0x58>
 800a4b8:	2e00      	cmp	r6, #0
 800a4ba:	d12d      	bne.n	800a518 <_scanf_chars+0xa8>
 800a4bc:	69a3      	ldr	r3, [r4, #24]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d12a      	bne.n	800a518 <_scanf_chars+0xa8>
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c8:	f000 faba 	bl	800aa40 <__locale_ctype_ptr>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	4418      	add	r0, r3
 800a4d2:	7843      	ldrb	r3, [r0, #1]
 800a4d4:	071b      	lsls	r3, r3, #28
 800a4d6:	d4ef      	bmi.n	800a4b8 <_scanf_chars+0x48>
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	06da      	lsls	r2, r3, #27
 800a4dc:	bf5e      	ittt	pl
 800a4de:	682b      	ldrpl	r3, [r5, #0]
 800a4e0:	781b      	ldrbpl	r3, [r3, #0]
 800a4e2:	703b      	strbpl	r3, [r7, #0]
 800a4e4:	682a      	ldr	r2, [r5, #0]
 800a4e6:	686b      	ldr	r3, [r5, #4]
 800a4e8:	f102 0201 	add.w	r2, r2, #1
 800a4ec:	602a      	str	r2, [r5, #0]
 800a4ee:	68a2      	ldr	r2, [r4, #8]
 800a4f0:	f103 33ff 	add.w	r3, r3, #4294967295
 800a4f4:	f102 32ff 	add.w	r2, r2, #4294967295
 800a4f8:	606b      	str	r3, [r5, #4]
 800a4fa:	f106 0601 	add.w	r6, r6, #1
 800a4fe:	bf58      	it	pl
 800a500:	3701      	addpl	r7, #1
 800a502:	60a2      	str	r2, [r4, #8]
 800a504:	b142      	cbz	r2, 800a518 <_scanf_chars+0xa8>
 800a506:	2b00      	cmp	r3, #0
 800a508:	dcc8      	bgt.n	800a49c <_scanf_chars+0x2c>
 800a50a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a50e:	4629      	mov	r1, r5
 800a510:	4640      	mov	r0, r8
 800a512:	4798      	blx	r3
 800a514:	2800      	cmp	r0, #0
 800a516:	d0c1      	beq.n	800a49c <_scanf_chars+0x2c>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	f013 0310 	ands.w	r3, r3, #16
 800a51e:	d105      	bne.n	800a52c <_scanf_chars+0xbc>
 800a520:	68e2      	ldr	r2, [r4, #12]
 800a522:	3201      	adds	r2, #1
 800a524:	60e2      	str	r2, [r4, #12]
 800a526:	69a2      	ldr	r2, [r4, #24]
 800a528:	b102      	cbz	r2, 800a52c <_scanf_chars+0xbc>
 800a52a:	703b      	strb	r3, [r7, #0]
 800a52c:	6923      	ldr	r3, [r4, #16]
 800a52e:	441e      	add	r6, r3
 800a530:	6126      	str	r6, [r4, #16]
 800a532:	2000      	movs	r0, #0
 800a534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a538 <_scanf_i>:
 800a538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a53c:	469a      	mov	sl, r3
 800a53e:	4b74      	ldr	r3, [pc, #464]	; (800a710 <_scanf_i+0x1d8>)
 800a540:	460c      	mov	r4, r1
 800a542:	4683      	mov	fp, r0
 800a544:	4616      	mov	r6, r2
 800a546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a54a:	b087      	sub	sp, #28
 800a54c:	ab03      	add	r3, sp, #12
 800a54e:	68a7      	ldr	r7, [r4, #8]
 800a550:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a554:	4b6f      	ldr	r3, [pc, #444]	; (800a714 <_scanf_i+0x1dc>)
 800a556:	69a1      	ldr	r1, [r4, #24]
 800a558:	4a6f      	ldr	r2, [pc, #444]	; (800a718 <_scanf_i+0x1e0>)
 800a55a:	2903      	cmp	r1, #3
 800a55c:	bf18      	it	ne
 800a55e:	461a      	movne	r2, r3
 800a560:	1e7b      	subs	r3, r7, #1
 800a562:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a566:	bf84      	itt	hi
 800a568:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a56c:	60a3      	strhi	r3, [r4, #8]
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	9200      	str	r2, [sp, #0]
 800a572:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a576:	bf88      	it	hi
 800a578:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a57c:	f104 091c 	add.w	r9, r4, #28
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bf8c      	ite	hi
 800a584:	197f      	addhi	r7, r7, r5
 800a586:	2700      	movls	r7, #0
 800a588:	464b      	mov	r3, r9
 800a58a:	f04f 0800 	mov.w	r8, #0
 800a58e:	9301      	str	r3, [sp, #4]
 800a590:	6831      	ldr	r1, [r6, #0]
 800a592:	ab03      	add	r3, sp, #12
 800a594:	2202      	movs	r2, #2
 800a596:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a59a:	7809      	ldrb	r1, [r1, #0]
 800a59c:	f7f5 fe28 	bl	80001f0 <memchr>
 800a5a0:	9b01      	ldr	r3, [sp, #4]
 800a5a2:	b328      	cbz	r0, 800a5f0 <_scanf_i+0xb8>
 800a5a4:	f1b8 0f01 	cmp.w	r8, #1
 800a5a8:	d156      	bne.n	800a658 <_scanf_i+0x120>
 800a5aa:	6862      	ldr	r2, [r4, #4]
 800a5ac:	b92a      	cbnz	r2, 800a5ba <_scanf_i+0x82>
 800a5ae:	2208      	movs	r2, #8
 800a5b0:	6062      	str	r2, [r4, #4]
 800a5b2:	6822      	ldr	r2, [r4, #0]
 800a5b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5b8:	6022      	str	r2, [r4, #0]
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a5c0:	6022      	str	r2, [r4, #0]
 800a5c2:	68a2      	ldr	r2, [r4, #8]
 800a5c4:	1e51      	subs	r1, r2, #1
 800a5c6:	60a1      	str	r1, [r4, #8]
 800a5c8:	b192      	cbz	r2, 800a5f0 <_scanf_i+0xb8>
 800a5ca:	6832      	ldr	r2, [r6, #0]
 800a5cc:	1c51      	adds	r1, r2, #1
 800a5ce:	6031      	str	r1, [r6, #0]
 800a5d0:	7812      	ldrb	r2, [r2, #0]
 800a5d2:	701a      	strb	r2, [r3, #0]
 800a5d4:	1c5d      	adds	r5, r3, #1
 800a5d6:	6873      	ldr	r3, [r6, #4]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	6073      	str	r3, [r6, #4]
 800a5de:	dc06      	bgt.n	800a5ee <_scanf_i+0xb6>
 800a5e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a5e4:	4631      	mov	r1, r6
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	4798      	blx	r3
 800a5ea:	2800      	cmp	r0, #0
 800a5ec:	d176      	bne.n	800a6dc <_scanf_i+0x1a4>
 800a5ee:	462b      	mov	r3, r5
 800a5f0:	f108 0801 	add.w	r8, r8, #1
 800a5f4:	f1b8 0f03 	cmp.w	r8, #3
 800a5f8:	d1c9      	bne.n	800a58e <_scanf_i+0x56>
 800a5fa:	6862      	ldr	r2, [r4, #4]
 800a5fc:	b90a      	cbnz	r2, 800a602 <_scanf_i+0xca>
 800a5fe:	220a      	movs	r2, #10
 800a600:	6062      	str	r2, [r4, #4]
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	4945      	ldr	r1, [pc, #276]	; (800a71c <_scanf_i+0x1e4>)
 800a606:	6960      	ldr	r0, [r4, #20]
 800a608:	9301      	str	r3, [sp, #4]
 800a60a:	1a89      	subs	r1, r1, r2
 800a60c:	f000 f888 	bl	800a720 <__sccl>
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	f04f 0800 	mov.w	r8, #0
 800a616:	461d      	mov	r5, r3
 800a618:	68a3      	ldr	r3, [r4, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d038      	beq.n	800a690 <_scanf_i+0x158>
 800a61e:	6831      	ldr	r1, [r6, #0]
 800a620:	6960      	ldr	r0, [r4, #20]
 800a622:	780a      	ldrb	r2, [r1, #0]
 800a624:	5c80      	ldrb	r0, [r0, r2]
 800a626:	2800      	cmp	r0, #0
 800a628:	d032      	beq.n	800a690 <_scanf_i+0x158>
 800a62a:	2a30      	cmp	r2, #48	; 0x30
 800a62c:	6822      	ldr	r2, [r4, #0]
 800a62e:	d121      	bne.n	800a674 <_scanf_i+0x13c>
 800a630:	0510      	lsls	r0, r2, #20
 800a632:	d51f      	bpl.n	800a674 <_scanf_i+0x13c>
 800a634:	f108 0801 	add.w	r8, r8, #1
 800a638:	b117      	cbz	r7, 800a640 <_scanf_i+0x108>
 800a63a:	3301      	adds	r3, #1
 800a63c:	3f01      	subs	r7, #1
 800a63e:	60a3      	str	r3, [r4, #8]
 800a640:	6873      	ldr	r3, [r6, #4]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	6073      	str	r3, [r6, #4]
 800a648:	dd1b      	ble.n	800a682 <_scanf_i+0x14a>
 800a64a:	6833      	ldr	r3, [r6, #0]
 800a64c:	3301      	adds	r3, #1
 800a64e:	6033      	str	r3, [r6, #0]
 800a650:	68a3      	ldr	r3, [r4, #8]
 800a652:	3b01      	subs	r3, #1
 800a654:	60a3      	str	r3, [r4, #8]
 800a656:	e7df      	b.n	800a618 <_scanf_i+0xe0>
 800a658:	f1b8 0f02 	cmp.w	r8, #2
 800a65c:	d1b1      	bne.n	800a5c2 <_scanf_i+0x8a>
 800a65e:	6822      	ldr	r2, [r4, #0]
 800a660:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a664:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a668:	d1c2      	bne.n	800a5f0 <_scanf_i+0xb8>
 800a66a:	2110      	movs	r1, #16
 800a66c:	6061      	str	r1, [r4, #4]
 800a66e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a672:	e7a5      	b.n	800a5c0 <_scanf_i+0x88>
 800a674:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a678:	6022      	str	r2, [r4, #0]
 800a67a:	780b      	ldrb	r3, [r1, #0]
 800a67c:	702b      	strb	r3, [r5, #0]
 800a67e:	3501      	adds	r5, #1
 800a680:	e7de      	b.n	800a640 <_scanf_i+0x108>
 800a682:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a686:	4631      	mov	r1, r6
 800a688:	4658      	mov	r0, fp
 800a68a:	4798      	blx	r3
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d0df      	beq.n	800a650 <_scanf_i+0x118>
 800a690:	6823      	ldr	r3, [r4, #0]
 800a692:	05d9      	lsls	r1, r3, #23
 800a694:	d50c      	bpl.n	800a6b0 <_scanf_i+0x178>
 800a696:	454d      	cmp	r5, r9
 800a698:	d908      	bls.n	800a6ac <_scanf_i+0x174>
 800a69a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a69e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a6a2:	4632      	mov	r2, r6
 800a6a4:	4658      	mov	r0, fp
 800a6a6:	4798      	blx	r3
 800a6a8:	1e6f      	subs	r7, r5, #1
 800a6aa:	463d      	mov	r5, r7
 800a6ac:	454d      	cmp	r5, r9
 800a6ae:	d02c      	beq.n	800a70a <_scanf_i+0x1d2>
 800a6b0:	6822      	ldr	r2, [r4, #0]
 800a6b2:	f012 0210 	ands.w	r2, r2, #16
 800a6b6:	d11e      	bne.n	800a6f6 <_scanf_i+0x1be>
 800a6b8:	702a      	strb	r2, [r5, #0]
 800a6ba:	6863      	ldr	r3, [r4, #4]
 800a6bc:	9e00      	ldr	r6, [sp, #0]
 800a6be:	4649      	mov	r1, r9
 800a6c0:	4658      	mov	r0, fp
 800a6c2:	47b0      	blx	r6
 800a6c4:	6822      	ldr	r2, [r4, #0]
 800a6c6:	f8da 3000 	ldr.w	r3, [sl]
 800a6ca:	f012 0f20 	tst.w	r2, #32
 800a6ce:	d008      	beq.n	800a6e2 <_scanf_i+0x1aa>
 800a6d0:	1d1a      	adds	r2, r3, #4
 800a6d2:	f8ca 2000 	str.w	r2, [sl]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	6018      	str	r0, [r3, #0]
 800a6da:	e009      	b.n	800a6f0 <_scanf_i+0x1b8>
 800a6dc:	f04f 0800 	mov.w	r8, #0
 800a6e0:	e7d6      	b.n	800a690 <_scanf_i+0x158>
 800a6e2:	07d2      	lsls	r2, r2, #31
 800a6e4:	d5f4      	bpl.n	800a6d0 <_scanf_i+0x198>
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	f8ca 2000 	str.w	r2, [sl]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	8018      	strh	r0, [r3, #0]
 800a6f0:	68e3      	ldr	r3, [r4, #12]
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	60e3      	str	r3, [r4, #12]
 800a6f6:	eba5 0509 	sub.w	r5, r5, r9
 800a6fa:	44a8      	add	r8, r5
 800a6fc:	6925      	ldr	r5, [r4, #16]
 800a6fe:	4445      	add	r5, r8
 800a700:	6125      	str	r5, [r4, #16]
 800a702:	2000      	movs	r0, #0
 800a704:	b007      	add	sp, #28
 800a706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70a:	2001      	movs	r0, #1
 800a70c:	e7fa      	b.n	800a704 <_scanf_i+0x1cc>
 800a70e:	bf00      	nop
 800a710:	0800ae50 	.word	0x0800ae50
 800a714:	0800a9a1 	.word	0x0800a9a1
 800a718:	0800a881 	.word	0x0800a881
 800a71c:	0800aee7 	.word	0x0800aee7

0800a720 <__sccl>:
 800a720:	b570      	push	{r4, r5, r6, lr}
 800a722:	780b      	ldrb	r3, [r1, #0]
 800a724:	2b5e      	cmp	r3, #94	; 0x5e
 800a726:	bf13      	iteet	ne
 800a728:	1c4a      	addne	r2, r1, #1
 800a72a:	1c8a      	addeq	r2, r1, #2
 800a72c:	784b      	ldrbeq	r3, [r1, #1]
 800a72e:	2100      	movne	r1, #0
 800a730:	bf08      	it	eq
 800a732:	2101      	moveq	r1, #1
 800a734:	1e44      	subs	r4, r0, #1
 800a736:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a73a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a73e:	42a5      	cmp	r5, r4
 800a740:	d1fb      	bne.n	800a73a <__sccl+0x1a>
 800a742:	b913      	cbnz	r3, 800a74a <__sccl+0x2a>
 800a744:	3a01      	subs	r2, #1
 800a746:	4610      	mov	r0, r2
 800a748:	bd70      	pop	{r4, r5, r6, pc}
 800a74a:	f081 0401 	eor.w	r4, r1, #1
 800a74e:	54c4      	strb	r4, [r0, r3]
 800a750:	4611      	mov	r1, r2
 800a752:	780d      	ldrb	r5, [r1, #0]
 800a754:	2d2d      	cmp	r5, #45	; 0x2d
 800a756:	f101 0201 	add.w	r2, r1, #1
 800a75a:	d006      	beq.n	800a76a <__sccl+0x4a>
 800a75c:	2d5d      	cmp	r5, #93	; 0x5d
 800a75e:	d0f2      	beq.n	800a746 <__sccl+0x26>
 800a760:	b90d      	cbnz	r5, 800a766 <__sccl+0x46>
 800a762:	460a      	mov	r2, r1
 800a764:	e7ef      	b.n	800a746 <__sccl+0x26>
 800a766:	462b      	mov	r3, r5
 800a768:	e7f1      	b.n	800a74e <__sccl+0x2e>
 800a76a:	784e      	ldrb	r6, [r1, #1]
 800a76c:	2e5d      	cmp	r6, #93	; 0x5d
 800a76e:	d0fa      	beq.n	800a766 <__sccl+0x46>
 800a770:	42b3      	cmp	r3, r6
 800a772:	dcf8      	bgt.n	800a766 <__sccl+0x46>
 800a774:	3102      	adds	r1, #2
 800a776:	3301      	adds	r3, #1
 800a778:	429e      	cmp	r6, r3
 800a77a:	54c4      	strb	r4, [r0, r3]
 800a77c:	dcfb      	bgt.n	800a776 <__sccl+0x56>
 800a77e:	e7e8      	b.n	800a752 <__sccl+0x32>

0800a780 <_strtol_l.isra.0>:
 800a780:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	4692      	mov	sl, r2
 800a78a:	461f      	mov	r7, r3
 800a78c:	468b      	mov	fp, r1
 800a78e:	465d      	mov	r5, fp
 800a790:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a792:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a796:	f000 f950 	bl	800aa3a <__locale_ctype_ptr_l>
 800a79a:	4420      	add	r0, r4
 800a79c:	7846      	ldrb	r6, [r0, #1]
 800a79e:	f016 0608 	ands.w	r6, r6, #8
 800a7a2:	d10b      	bne.n	800a7bc <_strtol_l.isra.0+0x3c>
 800a7a4:	2c2d      	cmp	r4, #45	; 0x2d
 800a7a6:	d10b      	bne.n	800a7c0 <_strtol_l.isra.0+0x40>
 800a7a8:	782c      	ldrb	r4, [r5, #0]
 800a7aa:	2601      	movs	r6, #1
 800a7ac:	f10b 0502 	add.w	r5, fp, #2
 800a7b0:	b167      	cbz	r7, 800a7cc <_strtol_l.isra.0+0x4c>
 800a7b2:	2f10      	cmp	r7, #16
 800a7b4:	d114      	bne.n	800a7e0 <_strtol_l.isra.0+0x60>
 800a7b6:	2c30      	cmp	r4, #48	; 0x30
 800a7b8:	d00a      	beq.n	800a7d0 <_strtol_l.isra.0+0x50>
 800a7ba:	e011      	b.n	800a7e0 <_strtol_l.isra.0+0x60>
 800a7bc:	46ab      	mov	fp, r5
 800a7be:	e7e6      	b.n	800a78e <_strtol_l.isra.0+0xe>
 800a7c0:	2c2b      	cmp	r4, #43	; 0x2b
 800a7c2:	bf04      	itt	eq
 800a7c4:	782c      	ldrbeq	r4, [r5, #0]
 800a7c6:	f10b 0502 	addeq.w	r5, fp, #2
 800a7ca:	e7f1      	b.n	800a7b0 <_strtol_l.isra.0+0x30>
 800a7cc:	2c30      	cmp	r4, #48	; 0x30
 800a7ce:	d127      	bne.n	800a820 <_strtol_l.isra.0+0xa0>
 800a7d0:	782b      	ldrb	r3, [r5, #0]
 800a7d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a7d6:	2b58      	cmp	r3, #88	; 0x58
 800a7d8:	d14b      	bne.n	800a872 <_strtol_l.isra.0+0xf2>
 800a7da:	786c      	ldrb	r4, [r5, #1]
 800a7dc:	2710      	movs	r7, #16
 800a7de:	3502      	adds	r5, #2
 800a7e0:	2e00      	cmp	r6, #0
 800a7e2:	bf0c      	ite	eq
 800a7e4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800a7e8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	fbb1 fef7 	udiv	lr, r1, r7
 800a7f2:	4610      	mov	r0, r2
 800a7f4:	fb07 1c1e 	mls	ip, r7, lr, r1
 800a7f8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	d811      	bhi.n	800a824 <_strtol_l.isra.0+0xa4>
 800a800:	461c      	mov	r4, r3
 800a802:	42a7      	cmp	r7, r4
 800a804:	dd1d      	ble.n	800a842 <_strtol_l.isra.0+0xc2>
 800a806:	1c53      	adds	r3, r2, #1
 800a808:	d007      	beq.n	800a81a <_strtol_l.isra.0+0x9a>
 800a80a:	4586      	cmp	lr, r0
 800a80c:	d316      	bcc.n	800a83c <_strtol_l.isra.0+0xbc>
 800a80e:	d101      	bne.n	800a814 <_strtol_l.isra.0+0x94>
 800a810:	45a4      	cmp	ip, r4
 800a812:	db13      	blt.n	800a83c <_strtol_l.isra.0+0xbc>
 800a814:	fb00 4007 	mla	r0, r0, r7, r4
 800a818:	2201      	movs	r2, #1
 800a81a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a81e:	e7eb      	b.n	800a7f8 <_strtol_l.isra.0+0x78>
 800a820:	270a      	movs	r7, #10
 800a822:	e7dd      	b.n	800a7e0 <_strtol_l.isra.0+0x60>
 800a824:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800a828:	2b19      	cmp	r3, #25
 800a82a:	d801      	bhi.n	800a830 <_strtol_l.isra.0+0xb0>
 800a82c:	3c37      	subs	r4, #55	; 0x37
 800a82e:	e7e8      	b.n	800a802 <_strtol_l.isra.0+0x82>
 800a830:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800a834:	2b19      	cmp	r3, #25
 800a836:	d804      	bhi.n	800a842 <_strtol_l.isra.0+0xc2>
 800a838:	3c57      	subs	r4, #87	; 0x57
 800a83a:	e7e2      	b.n	800a802 <_strtol_l.isra.0+0x82>
 800a83c:	f04f 32ff 	mov.w	r2, #4294967295
 800a840:	e7eb      	b.n	800a81a <_strtol_l.isra.0+0x9a>
 800a842:	1c53      	adds	r3, r2, #1
 800a844:	d108      	bne.n	800a858 <_strtol_l.isra.0+0xd8>
 800a846:	2322      	movs	r3, #34	; 0x22
 800a848:	f8c8 3000 	str.w	r3, [r8]
 800a84c:	4608      	mov	r0, r1
 800a84e:	f1ba 0f00 	cmp.w	sl, #0
 800a852:	d107      	bne.n	800a864 <_strtol_l.isra.0+0xe4>
 800a854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a858:	b106      	cbz	r6, 800a85c <_strtol_l.isra.0+0xdc>
 800a85a:	4240      	negs	r0, r0
 800a85c:	f1ba 0f00 	cmp.w	sl, #0
 800a860:	d00c      	beq.n	800a87c <_strtol_l.isra.0+0xfc>
 800a862:	b122      	cbz	r2, 800a86e <_strtol_l.isra.0+0xee>
 800a864:	3d01      	subs	r5, #1
 800a866:	f8ca 5000 	str.w	r5, [sl]
 800a86a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86e:	464d      	mov	r5, r9
 800a870:	e7f9      	b.n	800a866 <_strtol_l.isra.0+0xe6>
 800a872:	2430      	movs	r4, #48	; 0x30
 800a874:	2f00      	cmp	r7, #0
 800a876:	d1b3      	bne.n	800a7e0 <_strtol_l.isra.0+0x60>
 800a878:	2708      	movs	r7, #8
 800a87a:	e7b1      	b.n	800a7e0 <_strtol_l.isra.0+0x60>
 800a87c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a880 <_strtol_r>:
 800a880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a882:	4c06      	ldr	r4, [pc, #24]	; (800a89c <_strtol_r+0x1c>)
 800a884:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_strtol_r+0x20>)
 800a886:	6824      	ldr	r4, [r4, #0]
 800a888:	6a24      	ldr	r4, [r4, #32]
 800a88a:	2c00      	cmp	r4, #0
 800a88c:	bf08      	it	eq
 800a88e:	462c      	moveq	r4, r5
 800a890:	9400      	str	r4, [sp, #0]
 800a892:	f7ff ff75 	bl	800a780 <_strtol_l.isra.0>
 800a896:	b003      	add	sp, #12
 800a898:	bd30      	pop	{r4, r5, pc}
 800a89a:	bf00      	nop
 800a89c:	20000010 	.word	0x20000010
 800a8a0:	20000074 	.word	0x20000074

0800a8a4 <_strtoul_l.isra.0>:
 800a8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	4680      	mov	r8, r0
 800a8aa:	4689      	mov	r9, r1
 800a8ac:	4692      	mov	sl, r2
 800a8ae:	461e      	mov	r6, r3
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	463d      	mov	r5, r7
 800a8b4:	9808      	ldr	r0, [sp, #32]
 800a8b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8ba:	f000 f8be 	bl	800aa3a <__locale_ctype_ptr_l>
 800a8be:	4420      	add	r0, r4
 800a8c0:	7843      	ldrb	r3, [r0, #1]
 800a8c2:	f013 0308 	ands.w	r3, r3, #8
 800a8c6:	d10a      	bne.n	800a8de <_strtoul_l.isra.0+0x3a>
 800a8c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a8ca:	d10a      	bne.n	800a8e2 <_strtoul_l.isra.0+0x3e>
 800a8cc:	782c      	ldrb	r4, [r5, #0]
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	1cbd      	adds	r5, r7, #2
 800a8d2:	b15e      	cbz	r6, 800a8ec <_strtoul_l.isra.0+0x48>
 800a8d4:	2e10      	cmp	r6, #16
 800a8d6:	d113      	bne.n	800a900 <_strtoul_l.isra.0+0x5c>
 800a8d8:	2c30      	cmp	r4, #48	; 0x30
 800a8da:	d009      	beq.n	800a8f0 <_strtoul_l.isra.0+0x4c>
 800a8dc:	e010      	b.n	800a900 <_strtoul_l.isra.0+0x5c>
 800a8de:	462f      	mov	r7, r5
 800a8e0:	e7e7      	b.n	800a8b2 <_strtoul_l.isra.0+0xe>
 800a8e2:	2c2b      	cmp	r4, #43	; 0x2b
 800a8e4:	bf04      	itt	eq
 800a8e6:	782c      	ldrbeq	r4, [r5, #0]
 800a8e8:	1cbd      	addeq	r5, r7, #2
 800a8ea:	e7f2      	b.n	800a8d2 <_strtoul_l.isra.0+0x2e>
 800a8ec:	2c30      	cmp	r4, #48	; 0x30
 800a8ee:	d125      	bne.n	800a93c <_strtoul_l.isra.0+0x98>
 800a8f0:	782a      	ldrb	r2, [r5, #0]
 800a8f2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a8f6:	2a58      	cmp	r2, #88	; 0x58
 800a8f8:	d14a      	bne.n	800a990 <_strtoul_l.isra.0+0xec>
 800a8fa:	786c      	ldrb	r4, [r5, #1]
 800a8fc:	2610      	movs	r6, #16
 800a8fe:	3502      	adds	r5, #2
 800a900:	f04f 31ff 	mov.w	r1, #4294967295
 800a904:	2700      	movs	r7, #0
 800a906:	fbb1 f1f6 	udiv	r1, r1, r6
 800a90a:	fb06 fe01 	mul.w	lr, r6, r1
 800a90e:	ea6f 0e0e 	mvn.w	lr, lr
 800a912:	4638      	mov	r0, r7
 800a914:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800a918:	2a09      	cmp	r2, #9
 800a91a:	d811      	bhi.n	800a940 <_strtoul_l.isra.0+0x9c>
 800a91c:	4614      	mov	r4, r2
 800a91e:	42a6      	cmp	r6, r4
 800a920:	dd1d      	ble.n	800a95e <_strtoul_l.isra.0+0xba>
 800a922:	2f00      	cmp	r7, #0
 800a924:	db18      	blt.n	800a958 <_strtoul_l.isra.0+0xb4>
 800a926:	4281      	cmp	r1, r0
 800a928:	d316      	bcc.n	800a958 <_strtoul_l.isra.0+0xb4>
 800a92a:	d101      	bne.n	800a930 <_strtoul_l.isra.0+0x8c>
 800a92c:	45a6      	cmp	lr, r4
 800a92e:	db13      	blt.n	800a958 <_strtoul_l.isra.0+0xb4>
 800a930:	fb00 4006 	mla	r0, r0, r6, r4
 800a934:	2701      	movs	r7, #1
 800a936:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a93a:	e7eb      	b.n	800a914 <_strtoul_l.isra.0+0x70>
 800a93c:	260a      	movs	r6, #10
 800a93e:	e7df      	b.n	800a900 <_strtoul_l.isra.0+0x5c>
 800a940:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 800a944:	2a19      	cmp	r2, #25
 800a946:	d801      	bhi.n	800a94c <_strtoul_l.isra.0+0xa8>
 800a948:	3c37      	subs	r4, #55	; 0x37
 800a94a:	e7e8      	b.n	800a91e <_strtoul_l.isra.0+0x7a>
 800a94c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800a950:	2a19      	cmp	r2, #25
 800a952:	d804      	bhi.n	800a95e <_strtoul_l.isra.0+0xba>
 800a954:	3c57      	subs	r4, #87	; 0x57
 800a956:	e7e2      	b.n	800a91e <_strtoul_l.isra.0+0x7a>
 800a958:	f04f 37ff 	mov.w	r7, #4294967295
 800a95c:	e7eb      	b.n	800a936 <_strtoul_l.isra.0+0x92>
 800a95e:	2f00      	cmp	r7, #0
 800a960:	da09      	bge.n	800a976 <_strtoul_l.isra.0+0xd2>
 800a962:	2322      	movs	r3, #34	; 0x22
 800a964:	f8c8 3000 	str.w	r3, [r8]
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	f1ba 0f00 	cmp.w	sl, #0
 800a970:	d107      	bne.n	800a982 <_strtoul_l.isra.0+0xde>
 800a972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a976:	b103      	cbz	r3, 800a97a <_strtoul_l.isra.0+0xd6>
 800a978:	4240      	negs	r0, r0
 800a97a:	f1ba 0f00 	cmp.w	sl, #0
 800a97e:	d00c      	beq.n	800a99a <_strtoul_l.isra.0+0xf6>
 800a980:	b127      	cbz	r7, 800a98c <_strtoul_l.isra.0+0xe8>
 800a982:	3d01      	subs	r5, #1
 800a984:	f8ca 5000 	str.w	r5, [sl]
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	464d      	mov	r5, r9
 800a98e:	e7f9      	b.n	800a984 <_strtoul_l.isra.0+0xe0>
 800a990:	2430      	movs	r4, #48	; 0x30
 800a992:	2e00      	cmp	r6, #0
 800a994:	d1b4      	bne.n	800a900 <_strtoul_l.isra.0+0x5c>
 800a996:	2608      	movs	r6, #8
 800a998:	e7b2      	b.n	800a900 <_strtoul_l.isra.0+0x5c>
 800a99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800a9a0 <_strtoul_r>:
 800a9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a2:	4c06      	ldr	r4, [pc, #24]	; (800a9bc <_strtoul_r+0x1c>)
 800a9a4:	4d06      	ldr	r5, [pc, #24]	; (800a9c0 <_strtoul_r+0x20>)
 800a9a6:	6824      	ldr	r4, [r4, #0]
 800a9a8:	6a24      	ldr	r4, [r4, #32]
 800a9aa:	2c00      	cmp	r4, #0
 800a9ac:	bf08      	it	eq
 800a9ae:	462c      	moveq	r4, r5
 800a9b0:	9400      	str	r4, [sp, #0]
 800a9b2:	f7ff ff77 	bl	800a8a4 <_strtoul_l.isra.0>
 800a9b6:	b003      	add	sp, #12
 800a9b8:	bd30      	pop	{r4, r5, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000010 	.word	0x20000010
 800a9c0:	20000074 	.word	0x20000074

0800a9c4 <__submore>:
 800a9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d0:	4299      	cmp	r1, r3
 800a9d2:	d11e      	bne.n	800aa12 <__submore+0x4e>
 800a9d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9d8:	f000 f8c6 	bl	800ab68 <_malloc_r>
 800a9dc:	b918      	cbnz	r0, 800a9e6 <__submore+0x22>
 800a9de:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800a9ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a9f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a9f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a9f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a9fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800aa02:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800aa06:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa12:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800aa14:	0077      	lsls	r7, r6, #1
 800aa16:	463a      	mov	r2, r7
 800aa18:	f000 f904 	bl	800ac24 <_realloc_r>
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	2800      	cmp	r0, #0
 800aa20:	d0dd      	beq.n	800a9de <__submore+0x1a>
 800aa22:	eb00 0806 	add.w	r8, r0, r6
 800aa26:	4601      	mov	r1, r0
 800aa28:	4632      	mov	r2, r6
 800aa2a:	4640      	mov	r0, r8
 800aa2c:	f000 f828 	bl	800aa80 <memcpy>
 800aa30:	f8c4 8000 	str.w	r8, [r4]
 800aa34:	6365      	str	r5, [r4, #52]	; 0x34
 800aa36:	63a7      	str	r7, [r4, #56]	; 0x38
 800aa38:	e7e8      	b.n	800aa0c <__submore+0x48>

0800aa3a <__locale_ctype_ptr_l>:
 800aa3a:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800aa3e:	4770      	bx	lr

0800aa40 <__locale_ctype_ptr>:
 800aa40:	4b04      	ldr	r3, [pc, #16]	; (800aa54 <__locale_ctype_ptr+0x14>)
 800aa42:	4a05      	ldr	r2, [pc, #20]	; (800aa58 <__locale_ctype_ptr+0x18>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bf08      	it	eq
 800aa4c:	4613      	moveq	r3, r2
 800aa4e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800aa52:	4770      	bx	lr
 800aa54:	20000010 	.word	0x20000010
 800aa58:	20000074 	.word	0x20000074

0800aa5c <__ascii_mbtowc>:
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	b901      	cbnz	r1, 800aa62 <__ascii_mbtowc+0x6>
 800aa60:	a901      	add	r1, sp, #4
 800aa62:	b142      	cbz	r2, 800aa76 <__ascii_mbtowc+0x1a>
 800aa64:	b14b      	cbz	r3, 800aa7a <__ascii_mbtowc+0x1e>
 800aa66:	7813      	ldrb	r3, [r2, #0]
 800aa68:	600b      	str	r3, [r1, #0]
 800aa6a:	7812      	ldrb	r2, [r2, #0]
 800aa6c:	1c10      	adds	r0, r2, #0
 800aa6e:	bf18      	it	ne
 800aa70:	2001      	movne	r0, #1
 800aa72:	b002      	add	sp, #8
 800aa74:	4770      	bx	lr
 800aa76:	4610      	mov	r0, r2
 800aa78:	e7fb      	b.n	800aa72 <__ascii_mbtowc+0x16>
 800aa7a:	f06f 0001 	mvn.w	r0, #1
 800aa7e:	e7f8      	b.n	800aa72 <__ascii_mbtowc+0x16>

0800aa80 <memcpy>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	1e43      	subs	r3, r0, #1
 800aa84:	440a      	add	r2, r1
 800aa86:	4291      	cmp	r1, r2
 800aa88:	d100      	bne.n	800aa8c <memcpy+0xc>
 800aa8a:	bd10      	pop	{r4, pc}
 800aa8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa94:	e7f7      	b.n	800aa86 <memcpy+0x6>

0800aa96 <memmove>:
 800aa96:	4288      	cmp	r0, r1
 800aa98:	b510      	push	{r4, lr}
 800aa9a:	eb01 0302 	add.w	r3, r1, r2
 800aa9e:	d803      	bhi.n	800aaa8 <memmove+0x12>
 800aaa0:	1e42      	subs	r2, r0, #1
 800aaa2:	4299      	cmp	r1, r3
 800aaa4:	d10c      	bne.n	800aac0 <memmove+0x2a>
 800aaa6:	bd10      	pop	{r4, pc}
 800aaa8:	4298      	cmp	r0, r3
 800aaaa:	d2f9      	bcs.n	800aaa0 <memmove+0xa>
 800aaac:	1881      	adds	r1, r0, r2
 800aaae:	1ad2      	subs	r2, r2, r3
 800aab0:	42d3      	cmn	r3, r2
 800aab2:	d100      	bne.n	800aab6 <memmove+0x20>
 800aab4:	bd10      	pop	{r4, pc}
 800aab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aaba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aabe:	e7f7      	b.n	800aab0 <memmove+0x1a>
 800aac0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aac4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aac8:	e7eb      	b.n	800aaa2 <memmove+0xc>
	...

0800aacc <_free_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	4605      	mov	r5, r0
 800aad0:	2900      	cmp	r1, #0
 800aad2:	d045      	beq.n	800ab60 <_free_r+0x94>
 800aad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad8:	1f0c      	subs	r4, r1, #4
 800aada:	2b00      	cmp	r3, #0
 800aadc:	bfb8      	it	lt
 800aade:	18e4      	addlt	r4, r4, r3
 800aae0:	f000 f8e3 	bl	800acaa <__malloc_lock>
 800aae4:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <_free_r+0x98>)
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	4610      	mov	r0, r2
 800aaea:	b933      	cbnz	r3, 800aafa <_free_r+0x2e>
 800aaec:	6063      	str	r3, [r4, #4]
 800aaee:	6014      	str	r4, [r2, #0]
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaf6:	f000 b8d9 	b.w	800acac <__malloc_unlock>
 800aafa:	42a3      	cmp	r3, r4
 800aafc:	d90c      	bls.n	800ab18 <_free_r+0x4c>
 800aafe:	6821      	ldr	r1, [r4, #0]
 800ab00:	1862      	adds	r2, r4, r1
 800ab02:	4293      	cmp	r3, r2
 800ab04:	bf04      	itt	eq
 800ab06:	681a      	ldreq	r2, [r3, #0]
 800ab08:	685b      	ldreq	r3, [r3, #4]
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	bf04      	itt	eq
 800ab0e:	1852      	addeq	r2, r2, r1
 800ab10:	6022      	streq	r2, [r4, #0]
 800ab12:	6004      	str	r4, [r0, #0]
 800ab14:	e7ec      	b.n	800aaf0 <_free_r+0x24>
 800ab16:	4613      	mov	r3, r2
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	b10a      	cbz	r2, 800ab20 <_free_r+0x54>
 800ab1c:	42a2      	cmp	r2, r4
 800ab1e:	d9fa      	bls.n	800ab16 <_free_r+0x4a>
 800ab20:	6819      	ldr	r1, [r3, #0]
 800ab22:	1858      	adds	r0, r3, r1
 800ab24:	42a0      	cmp	r0, r4
 800ab26:	d10b      	bne.n	800ab40 <_free_r+0x74>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	4401      	add	r1, r0
 800ab2c:	1858      	adds	r0, r3, r1
 800ab2e:	4282      	cmp	r2, r0
 800ab30:	6019      	str	r1, [r3, #0]
 800ab32:	d1dd      	bne.n	800aaf0 <_free_r+0x24>
 800ab34:	6810      	ldr	r0, [r2, #0]
 800ab36:	6852      	ldr	r2, [r2, #4]
 800ab38:	605a      	str	r2, [r3, #4]
 800ab3a:	4401      	add	r1, r0
 800ab3c:	6019      	str	r1, [r3, #0]
 800ab3e:	e7d7      	b.n	800aaf0 <_free_r+0x24>
 800ab40:	d902      	bls.n	800ab48 <_free_r+0x7c>
 800ab42:	230c      	movs	r3, #12
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	e7d3      	b.n	800aaf0 <_free_r+0x24>
 800ab48:	6820      	ldr	r0, [r4, #0]
 800ab4a:	1821      	adds	r1, r4, r0
 800ab4c:	428a      	cmp	r2, r1
 800ab4e:	bf04      	itt	eq
 800ab50:	6811      	ldreq	r1, [r2, #0]
 800ab52:	6852      	ldreq	r2, [r2, #4]
 800ab54:	6062      	str	r2, [r4, #4]
 800ab56:	bf04      	itt	eq
 800ab58:	1809      	addeq	r1, r1, r0
 800ab5a:	6021      	streq	r1, [r4, #0]
 800ab5c:	605c      	str	r4, [r3, #4]
 800ab5e:	e7c7      	b.n	800aaf0 <_free_r+0x24>
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	2000021c 	.word	0x2000021c

0800ab68 <_malloc_r>:
 800ab68:	b570      	push	{r4, r5, r6, lr}
 800ab6a:	1ccd      	adds	r5, r1, #3
 800ab6c:	f025 0503 	bic.w	r5, r5, #3
 800ab70:	3508      	adds	r5, #8
 800ab72:	2d0c      	cmp	r5, #12
 800ab74:	bf38      	it	cc
 800ab76:	250c      	movcc	r5, #12
 800ab78:	2d00      	cmp	r5, #0
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	db01      	blt.n	800ab82 <_malloc_r+0x1a>
 800ab7e:	42a9      	cmp	r1, r5
 800ab80:	d903      	bls.n	800ab8a <_malloc_r+0x22>
 800ab82:	230c      	movs	r3, #12
 800ab84:	6033      	str	r3, [r6, #0]
 800ab86:	2000      	movs	r0, #0
 800ab88:	bd70      	pop	{r4, r5, r6, pc}
 800ab8a:	f000 f88e 	bl	800acaa <__malloc_lock>
 800ab8e:	4a23      	ldr	r2, [pc, #140]	; (800ac1c <_malloc_r+0xb4>)
 800ab90:	6814      	ldr	r4, [r2, #0]
 800ab92:	4621      	mov	r1, r4
 800ab94:	b991      	cbnz	r1, 800abbc <_malloc_r+0x54>
 800ab96:	4c22      	ldr	r4, [pc, #136]	; (800ac20 <_malloc_r+0xb8>)
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	b91b      	cbnz	r3, 800aba4 <_malloc_r+0x3c>
 800ab9c:	4630      	mov	r0, r6
 800ab9e:	f000 f867 	bl	800ac70 <_sbrk_r>
 800aba2:	6020      	str	r0, [r4, #0]
 800aba4:	4629      	mov	r1, r5
 800aba6:	4630      	mov	r0, r6
 800aba8:	f000 f862 	bl	800ac70 <_sbrk_r>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d126      	bne.n	800abfe <_malloc_r+0x96>
 800abb0:	230c      	movs	r3, #12
 800abb2:	6033      	str	r3, [r6, #0]
 800abb4:	4630      	mov	r0, r6
 800abb6:	f000 f879 	bl	800acac <__malloc_unlock>
 800abba:	e7e4      	b.n	800ab86 <_malloc_r+0x1e>
 800abbc:	680b      	ldr	r3, [r1, #0]
 800abbe:	1b5b      	subs	r3, r3, r5
 800abc0:	d41a      	bmi.n	800abf8 <_malloc_r+0x90>
 800abc2:	2b0b      	cmp	r3, #11
 800abc4:	d90f      	bls.n	800abe6 <_malloc_r+0x7e>
 800abc6:	600b      	str	r3, [r1, #0]
 800abc8:	50cd      	str	r5, [r1, r3]
 800abca:	18cc      	adds	r4, r1, r3
 800abcc:	4630      	mov	r0, r6
 800abce:	f000 f86d 	bl	800acac <__malloc_unlock>
 800abd2:	f104 000b 	add.w	r0, r4, #11
 800abd6:	1d23      	adds	r3, r4, #4
 800abd8:	f020 0007 	bic.w	r0, r0, #7
 800abdc:	1ac3      	subs	r3, r0, r3
 800abde:	d01b      	beq.n	800ac18 <_malloc_r+0xb0>
 800abe0:	425a      	negs	r2, r3
 800abe2:	50e2      	str	r2, [r4, r3]
 800abe4:	bd70      	pop	{r4, r5, r6, pc}
 800abe6:	428c      	cmp	r4, r1
 800abe8:	bf0d      	iteet	eq
 800abea:	6863      	ldreq	r3, [r4, #4]
 800abec:	684b      	ldrne	r3, [r1, #4]
 800abee:	6063      	strne	r3, [r4, #4]
 800abf0:	6013      	streq	r3, [r2, #0]
 800abf2:	bf18      	it	ne
 800abf4:	460c      	movne	r4, r1
 800abf6:	e7e9      	b.n	800abcc <_malloc_r+0x64>
 800abf8:	460c      	mov	r4, r1
 800abfa:	6849      	ldr	r1, [r1, #4]
 800abfc:	e7ca      	b.n	800ab94 <_malloc_r+0x2c>
 800abfe:	1cc4      	adds	r4, r0, #3
 800ac00:	f024 0403 	bic.w	r4, r4, #3
 800ac04:	42a0      	cmp	r0, r4
 800ac06:	d005      	beq.n	800ac14 <_malloc_r+0xac>
 800ac08:	1a21      	subs	r1, r4, r0
 800ac0a:	4630      	mov	r0, r6
 800ac0c:	f000 f830 	bl	800ac70 <_sbrk_r>
 800ac10:	3001      	adds	r0, #1
 800ac12:	d0cd      	beq.n	800abb0 <_malloc_r+0x48>
 800ac14:	6025      	str	r5, [r4, #0]
 800ac16:	e7d9      	b.n	800abcc <_malloc_r+0x64>
 800ac18:	bd70      	pop	{r4, r5, r6, pc}
 800ac1a:	bf00      	nop
 800ac1c:	2000021c 	.word	0x2000021c
 800ac20:	20000220 	.word	0x20000220

0800ac24 <_realloc_r>:
 800ac24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac26:	4607      	mov	r7, r0
 800ac28:	4614      	mov	r4, r2
 800ac2a:	460e      	mov	r6, r1
 800ac2c:	b921      	cbnz	r1, 800ac38 <_realloc_r+0x14>
 800ac2e:	4611      	mov	r1, r2
 800ac30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ac34:	f7ff bf98 	b.w	800ab68 <_malloc_r>
 800ac38:	b922      	cbnz	r2, 800ac44 <_realloc_r+0x20>
 800ac3a:	f7ff ff47 	bl	800aacc <_free_r>
 800ac3e:	4625      	mov	r5, r4
 800ac40:	4628      	mov	r0, r5
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	f000 f833 	bl	800acae <_malloc_usable_size_r>
 800ac48:	4284      	cmp	r4, r0
 800ac4a:	d90f      	bls.n	800ac6c <_realloc_r+0x48>
 800ac4c:	4621      	mov	r1, r4
 800ac4e:	4638      	mov	r0, r7
 800ac50:	f7ff ff8a 	bl	800ab68 <_malloc_r>
 800ac54:	4605      	mov	r5, r0
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d0f2      	beq.n	800ac40 <_realloc_r+0x1c>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	4622      	mov	r2, r4
 800ac5e:	f7ff ff0f 	bl	800aa80 <memcpy>
 800ac62:	4631      	mov	r1, r6
 800ac64:	4638      	mov	r0, r7
 800ac66:	f7ff ff31 	bl	800aacc <_free_r>
 800ac6a:	e7e9      	b.n	800ac40 <_realloc_r+0x1c>
 800ac6c:	4635      	mov	r5, r6
 800ac6e:	e7e7      	b.n	800ac40 <_realloc_r+0x1c>

0800ac70 <_sbrk_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4c06      	ldr	r4, [pc, #24]	; (800ac8c <_sbrk_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4605      	mov	r5, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	f7f8 fe12 	bl	80038a4 <_sbrk>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_sbrk_r+0x1a>
 800ac84:	6823      	ldr	r3, [r4, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_sbrk_r+0x1a>
 800ac88:	602b      	str	r3, [r5, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	20000504 	.word	0x20000504

0800ac90 <__ascii_wctomb>:
 800ac90:	b149      	cbz	r1, 800aca6 <__ascii_wctomb+0x16>
 800ac92:	2aff      	cmp	r2, #255	; 0xff
 800ac94:	bf85      	ittet	hi
 800ac96:	238a      	movhi	r3, #138	; 0x8a
 800ac98:	6003      	strhi	r3, [r0, #0]
 800ac9a:	700a      	strbls	r2, [r1, #0]
 800ac9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800aca0:	bf98      	it	ls
 800aca2:	2001      	movls	r0, #1
 800aca4:	4770      	bx	lr
 800aca6:	4608      	mov	r0, r1
 800aca8:	4770      	bx	lr

0800acaa <__malloc_lock>:
 800acaa:	4770      	bx	lr

0800acac <__malloc_unlock>:
 800acac:	4770      	bx	lr

0800acae <_malloc_usable_size_r>:
 800acae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800acb2:	2800      	cmp	r0, #0
 800acb4:	f1a0 0004 	sub.w	r0, r0, #4
 800acb8:	bfbc      	itt	lt
 800acba:	580b      	ldrlt	r3, [r1, r0]
 800acbc:	18c0      	addlt	r0, r0, r3
 800acbe:	4770      	bx	lr

0800acc0 <_init>:
 800acc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc2:	bf00      	nop
 800acc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acc6:	bc08      	pop	{r3}
 800acc8:	469e      	mov	lr, r3
 800acca:	4770      	bx	lr

0800accc <_fini>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr
